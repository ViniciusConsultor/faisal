'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("QuickAccountingDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class QuickAccountingDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableVoucher As VoucherDataTable
    
    Private tableVoucherDetail As VoucherDetailDataTable
    
    Private tableVoucherType As VoucherTypeDataTable
    
    Private tableCOA As COADataTable
    
    Private tableFinancialAccountType As FinancialAccountTypeDataTable
    
    Private tableCashFlowAccount As CashFlowAccountDataTable
    
    Private relationFK_Accounting_Voucher_Detail_Accounting_Voucher As Global.System.Data.DataRelation
    
    Private relationFK_Accounting_Voucher_Detail_Accounting_COA As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Voucher")) Is Nothing) Then
                MyBase.Tables.Add(New VoucherDataTable(ds.Tables("Voucher")))
            End If
            If (Not (ds.Tables("VoucherDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VoucherDetailDataTable(ds.Tables("VoucherDetail")))
            End If
            If (Not (ds.Tables("VoucherType")) Is Nothing) Then
                MyBase.Tables.Add(New VoucherTypeDataTable(ds.Tables("VoucherType")))
            End If
            If (Not (ds.Tables("COA")) Is Nothing) Then
                MyBase.Tables.Add(New COADataTable(ds.Tables("COA")))
            End If
            If (Not (ds.Tables("FinancialAccountType")) Is Nothing) Then
                MyBase.Tables.Add(New FinancialAccountTypeDataTable(ds.Tables("FinancialAccountType")))
            End If
            If (Not (ds.Tables("CashFlowAccount")) Is Nothing) Then
                MyBase.Tables.Add(New CashFlowAccountDataTable(ds.Tables("CashFlowAccount")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Voucher() As VoucherDataTable
        Get
            Return Me.tableVoucher
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VoucherDetail() As VoucherDetailDataTable
        Get
            Return Me.tableVoucherDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VoucherType() As VoucherTypeDataTable
        Get
            Return Me.tableVoucherType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property COA() As COADataTable
        Get
            Return Me.tableCOA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FinancialAccountType() As FinancialAccountTypeDataTable
        Get
            Return Me.tableFinancialAccountType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CashFlowAccount() As CashFlowAccountDataTable
        Get
            Return Me.tableCashFlowAccount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As QuickAccountingDataSet = CType(MyBase.Clone,QuickAccountingDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Voucher")) Is Nothing) Then
                MyBase.Tables.Add(New VoucherDataTable(ds.Tables("Voucher")))
            End If
            If (Not (ds.Tables("VoucherDetail")) Is Nothing) Then
                MyBase.Tables.Add(New VoucherDetailDataTable(ds.Tables("VoucherDetail")))
            End If
            If (Not (ds.Tables("VoucherType")) Is Nothing) Then
                MyBase.Tables.Add(New VoucherTypeDataTable(ds.Tables("VoucherType")))
            End If
            If (Not (ds.Tables("COA")) Is Nothing) Then
                MyBase.Tables.Add(New COADataTable(ds.Tables("COA")))
            End If
            If (Not (ds.Tables("FinancialAccountType")) Is Nothing) Then
                MyBase.Tables.Add(New FinancialAccountTypeDataTable(ds.Tables("FinancialAccountType")))
            End If
            If (Not (ds.Tables("CashFlowAccount")) Is Nothing) Then
                MyBase.Tables.Add(New CashFlowAccountDataTable(ds.Tables("CashFlowAccount")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVoucher = CType(MyBase.Tables("Voucher"),VoucherDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVoucher) Is Nothing) Then
                Me.tableVoucher.InitVars
            End If
        End If
        Me.tableVoucherDetail = CType(MyBase.Tables("VoucherDetail"),VoucherDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVoucherDetail) Is Nothing) Then
                Me.tableVoucherDetail.InitVars
            End If
        End If
        Me.tableVoucherType = CType(MyBase.Tables("VoucherType"),VoucherTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVoucherType) Is Nothing) Then
                Me.tableVoucherType.InitVars
            End If
        End If
        Me.tableCOA = CType(MyBase.Tables("COA"),COADataTable)
        If (initTable = true) Then
            If (Not (Me.tableCOA) Is Nothing) Then
                Me.tableCOA.InitVars
            End If
        End If
        Me.tableFinancialAccountType = CType(MyBase.Tables("FinancialAccountType"),FinancialAccountTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFinancialAccountType) Is Nothing) Then
                Me.tableFinancialAccountType.InitVars
            End If
        End If
        Me.tableCashFlowAccount = CType(MyBase.Tables("CashFlowAccount"),CashFlowAccountDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCashFlowAccount) Is Nothing) Then
                Me.tableCashFlowAccount.InitVars
            End If
        End If
        Me.relationFK_Accounting_Voucher_Detail_Accounting_Voucher = Me.Relations("FK_Accounting_Voucher_Detail_Accounting_Voucher")
        Me.relationFK_Accounting_Voucher_Detail_Accounting_COA = Me.Relations("FK_Accounting_Voucher_Detail_Accounting_COA")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "QuickAccountingDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/QuickAccountingDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVoucher = New VoucherDataTable
        MyBase.Tables.Add(Me.tableVoucher)
        Me.tableVoucherDetail = New VoucherDetailDataTable
        MyBase.Tables.Add(Me.tableVoucherDetail)
        Me.tableVoucherType = New VoucherTypeDataTable
        MyBase.Tables.Add(Me.tableVoucherType)
        Me.tableCOA = New COADataTable
        MyBase.Tables.Add(Me.tableCOA)
        Me.tableFinancialAccountType = New FinancialAccountTypeDataTable
        MyBase.Tables.Add(Me.tableFinancialAccountType)
        Me.tableCashFlowAccount = New CashFlowAccountDataTable
        MyBase.Tables.Add(Me.tableCashFlowAccount)
        Me.relationFK_Accounting_Voucher_Detail_Accounting_Voucher = New Global.System.Data.DataRelation("FK_Accounting_Voucher_Detail_Accounting_Voucher", New Global.System.Data.DataColumn() {Me.tableVoucher.Co_IDColumn, Me.tableVoucher.Voucher_IDColumn}, New Global.System.Data.DataColumn() {Me.tableVoucherDetail.Co_IDColumn, Me.tableVoucherDetail.Voucher_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Accounting_Voucher_Detail_Accounting_Voucher)
        Me.relationFK_Accounting_Voucher_Detail_Accounting_COA = New Global.System.Data.DataRelation("FK_Accounting_Voucher_Detail_Accounting_COA", New Global.System.Data.DataColumn() {Me.tableCOA.Co_IDColumn, Me.tableCOA.COA_IDColumn}, New Global.System.Data.DataColumn() {Me.tableVoucherDetail.Co_IDColumn, Me.tableVoucherDetail.COA_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Accounting_Voucher_Detail_Accounting_COA)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVoucher() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVoucherDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVoucherType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCOA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFinancialAccountType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCashFlowAccount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As QuickAccountingDataSet = New QuickAccountingDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VoucherRowChangeEventHandler(ByVal sender As Object, ByVal e As VoucherRowChangeEvent)
    
    Public Delegate Sub VoucherDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As VoucherDetailRowChangeEvent)
    
    Public Delegate Sub VoucherTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As VoucherTypeRowChangeEvent)
    
    Public Delegate Sub COARowChangeEventHandler(ByVal sender As Object, ByVal e As COARowChangeEvent)
    
    Public Delegate Sub FinancialAccountTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As FinancialAccountTypeRowChangeEvent)
    
    Public Delegate Sub CashFlowAccountRowChangeEventHandler(ByVal sender As Object, ByVal e As CashFlowAccountRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VoucherDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnVoucher_ID As Global.System.Data.DataColumn
        
        Private columnVoucherType_ID As Global.System.Data.DataColumn
        
        Private columnVoucher_No As Global.System.Data.DataColumn
        
        Private columnVoucher_Date As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        Private columnSource_ID As Global.System.Data.DataColumn
        
        Private columnSource_DocumentType_ID As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnDocumentStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Voucher"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Voucher_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucher_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherType_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherType_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Voucher_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucher_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Voucher_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucher_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Source_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Source_DocumentType_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource_DocumentType_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DocumentStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocumentStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VoucherRow
            Get
                Return CType(Me.Rows(index),VoucherRow)
            End Get
        End Property
        
        Public Event VoucherRowChanging As VoucherRowChangeEventHandler
        
        Public Event VoucherRowChanged As VoucherRowChangeEventHandler
        
        Public Event VoucherRowDeleting As VoucherRowChangeEventHandler
        
        Public Event VoucherRowDeleted As VoucherRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVoucherRow(ByVal row As VoucherRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVoucherRow(ByVal Co_ID As Short, ByVal Voucher_ID As Integer, ByVal VoucherType_ID As Integer, ByVal Voucher_No As String, ByVal Voucher_Date As Date, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Remarks As String, ByVal RecordStatus_ID As Integer, ByVal Source_ID As Integer, ByVal Source_DocumentType_ID As Short, ByVal Upload_DateTime As Date, ByVal DocumentStatus_ID As Integer) As VoucherRow
            Dim rowVoucherRow As VoucherRow = CType(Me.NewRow,VoucherRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Voucher_ID, VoucherType_ID, Voucher_No, Voucher_Date, Stamp_UserID, Stamp_DateTime, Remarks, RecordStatus_ID, Source_ID, Source_DocumentType_ID, Upload_DateTime, DocumentStatus_ID}
            rowVoucherRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVoucherRow)
            Return rowVoucherRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDVoucher_ID(ByVal Co_ID As Short, ByVal Voucher_ID As Integer) As VoucherRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Voucher_ID}),VoucherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VoucherDataTable = CType(MyBase.Clone,VoucherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VoucherDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnVoucher_ID = MyBase.Columns("Voucher_ID")
            Me.columnVoucherType_ID = MyBase.Columns("VoucherType_ID")
            Me.columnVoucher_No = MyBase.Columns("Voucher_No")
            Me.columnVoucher_Date = MyBase.Columns("Voucher_Date")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
            Me.columnSource_ID = MyBase.Columns("Source_ID")
            Me.columnSource_DocumentType_ID = MyBase.Columns("Source_DocumentType_ID")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnDocumentStatus_ID = MyBase.Columns("DocumentStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnVoucher_ID = New Global.System.Data.DataColumn("Voucher_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucher_ID)
            Me.columnVoucherType_ID = New Global.System.Data.DataColumn("VoucherType_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherType_ID)
            Me.columnVoucher_No = New Global.System.Data.DataColumn("Voucher_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucher_No)
            Me.columnVoucher_Date = New Global.System.Data.DataColumn("Voucher_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucher_Date)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.columnSource_ID = New Global.System.Data.DataColumn("Source_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource_ID)
            Me.columnSource_DocumentType_ID = New Global.System.Data.DataColumn("Source_DocumentType_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource_DocumentType_ID)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnDocumentStatus_ID = New Global.System.Data.DataColumn("DocumentStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocumentStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnVoucher_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnVoucher_ID.AllowDBNull = false
            Me.columnVoucherType_ID.AllowDBNull = false
            Me.columnVoucher_No.AllowDBNull = false
            Me.columnVoucher_No.MaxLength = 50
            Me.columnVoucher_Date.AllowDBNull = false
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 50
            Me.columnRecordStatus_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVoucherRow() As VoucherRow
            Return CType(Me.NewRow,VoucherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VoucherRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VoucherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VoucherRowChangedEvent) Is Nothing) Then
                RaiseEvent VoucherRowChanged(Me, New VoucherRowChangeEvent(CType(e.Row,VoucherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VoucherRowChangingEvent) Is Nothing) Then
                RaiseEvent VoucherRowChanging(Me, New VoucherRowChangeEvent(CType(e.Row,VoucherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VoucherRowDeletedEvent) Is Nothing) Then
                RaiseEvent VoucherRowDeleted(Me, New VoucherRowChangeEvent(CType(e.Row,VoucherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VoucherRowDeletingEvent) Is Nothing) Then
                RaiseEvent VoucherRowDeleting(Me, New VoucherRowChangeEvent(CType(e.Row,VoucherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVoucherRow(ByVal row As VoucherRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickAccountingDataSet = New QuickAccountingDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VoucherDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VoucherDetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnVoucher_ID As Global.System.Data.DataColumn
        
        Private columnVoucherDetail_ID As Global.System.Data.DataColumn
        
        Private columnCOA_ID As Global.System.Data.DataColumn
        
        Private columnCOA_Code As Global.System.Data.DataColumn
        
        Private columnCOA_Desc As Global.System.Data.DataColumn
        
        Private columnNarration As Global.System.Data.DataColumn
        
        Private columnDebitAmount As Global.System.Data.DataColumn
        
        Private columnCreditAmount As Global.System.Data.DataColumn
        
        Private columnStamp_User_Id As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnCustomDate1 As Global.System.Data.DataColumn
        
        Private columnCustomDate2 As Global.System.Data.DataColumn
        
        Private columnCustomDate3 As Global.System.Data.DataColumn
        
        Private columnCustomDate4 As Global.System.Data.DataColumn
        
        Private columnCustomDate5 As Global.System.Data.DataColumn
        
        Private columnCustomDecimal1 As Global.System.Data.DataColumn
        
        Private columnCustomDecimal2 As Global.System.Data.DataColumn
        
        Private columnCustomDecimal3 As Global.System.Data.DataColumn
        
        Private columnCustomDecimal4 As Global.System.Data.DataColumn
        
        Private columnCustomDecimal5 As Global.System.Data.DataColumn
        
        Private columnCustomText1 As Global.System.Data.DataColumn
        
        Private columnCustomText2 As Global.System.Data.DataColumn
        
        Private columnCustomText3 As Global.System.Data.DataColumn
        
        Private columnCustomText4 As Global.System.Data.DataColumn
        
        Private columnCustomText5 As Global.System.Data.DataColumn
        
        Private columnParty_ID As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VoucherDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Voucher_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucher_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherDetail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherDetail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COA_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOA_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COA_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOA_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NarrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNarration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DebitAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDebitAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreditAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_User_IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_User_Id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDate1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDate1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDate2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDate2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDate3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDate3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDate4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDate4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDate5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDate5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDecimal1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDecimal1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDecimal2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDecimal2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDecimal3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDecimal3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDecimal4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDecimal4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomDecimal5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomDecimal5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomText1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomText1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomText2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomText2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomText3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomText3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomText4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomText4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomText5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomText5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Party_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParty_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VoucherDetailRow
            Get
                Return CType(Me.Rows(index),VoucherDetailRow)
            End Get
        End Property
        
        Public Event VoucherDetailRowChanging As VoucherDetailRowChangeEventHandler
        
        Public Event VoucherDetailRowChanged As VoucherDetailRowChangeEventHandler
        
        Public Event VoucherDetailRowDeleting As VoucherDetailRowChangeEventHandler
        
        Public Event VoucherDetailRowDeleted As VoucherDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVoucherDetailRow(ByVal row As VoucherDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVoucherDetailRow( _
                    ByVal Co_ID As Short,  _
                    ByVal Voucher_ID As Integer,  _
                    ByVal VoucherDetail_ID As Short,  _
                    ByVal COA_ID As Integer,  _
                    ByVal COA_Code As String,  _
                    ByVal COA_Desc As String,  _
                    ByVal Narration As String,  _
                    ByVal DebitAmount As Decimal,  _
                    ByVal CreditAmount As Decimal,  _
                    ByVal Stamp_User_Id As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Date,  _
                    ByVal CustomDate1 As Date,  _
                    ByVal CustomDate2 As Date,  _
                    ByVal CustomDate3 As Date,  _
                    ByVal CustomDate4 As Date,  _
                    ByVal CustomDate5 As Date,  _
                    ByVal CustomDecimal1 As Date,  _
                    ByVal CustomDecimal2 As Date,  _
                    ByVal CustomDecimal3 As Date,  _
                    ByVal CustomDecimal4 As Date,  _
                    ByVal CustomDecimal5 As Date,  _
                    ByVal CustomText1 As Date,  _
                    ByVal CustomText2 As Date,  _
                    ByVal CustomText3 As Date,  _
                    ByVal CustomText4 As Date,  _
                    ByVal CustomText5 As Date,  _
                    ByVal Party_ID As Integer,  _
                    ByVal RecordStatus_ID As Integer) As VoucherDetailRow
            Dim rowVoucherDetailRow As VoucherDetailRow = CType(Me.NewRow,VoucherDetailRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Voucher_ID, VoucherDetail_ID, COA_ID, COA_Code, COA_Desc, Narration, DebitAmount, CreditAmount, Stamp_User_Id, Stamp_DateTime, Upload_DateTime, CustomDate1, CustomDate2, CustomDate3, CustomDate4, CustomDate5, CustomDecimal1, CustomDecimal2, CustomDecimal3, CustomDecimal4, CustomDecimal5, CustomText1, CustomText2, CustomText3, CustomText4, CustomText5, Party_ID, RecordStatus_ID}
            rowVoucherDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVoucherDetailRow)
            Return rowVoucherDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDVoucher_IDVoucherDetail_ID(ByVal Co_ID As Short, ByVal Voucher_ID As Integer, ByVal VoucherDetail_ID As Short) As VoucherDetailRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Voucher_ID, VoucherDetail_ID}),VoucherDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VoucherDetailDataTable = CType(MyBase.Clone,VoucherDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VoucherDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnVoucher_ID = MyBase.Columns("Voucher_ID")
            Me.columnVoucherDetail_ID = MyBase.Columns("VoucherDetail_ID")
            Me.columnCOA_ID = MyBase.Columns("COA_ID")
            Me.columnCOA_Code = MyBase.Columns("COA_Code")
            Me.columnCOA_Desc = MyBase.Columns("COA_Desc")
            Me.columnNarration = MyBase.Columns("Narration")
            Me.columnDebitAmount = MyBase.Columns("DebitAmount")
            Me.columnCreditAmount = MyBase.Columns("CreditAmount")
            Me.columnStamp_User_Id = MyBase.Columns("Stamp_User_Id")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnCustomDate1 = MyBase.Columns("CustomDate1")
            Me.columnCustomDate2 = MyBase.Columns("CustomDate2")
            Me.columnCustomDate3 = MyBase.Columns("CustomDate3")
            Me.columnCustomDate4 = MyBase.Columns("CustomDate4")
            Me.columnCustomDate5 = MyBase.Columns("CustomDate5")
            Me.columnCustomDecimal1 = MyBase.Columns("CustomDecimal1")
            Me.columnCustomDecimal2 = MyBase.Columns("CustomDecimal2")
            Me.columnCustomDecimal3 = MyBase.Columns("CustomDecimal3")
            Me.columnCustomDecimal4 = MyBase.Columns("CustomDecimal4")
            Me.columnCustomDecimal5 = MyBase.Columns("CustomDecimal5")
            Me.columnCustomText1 = MyBase.Columns("CustomText1")
            Me.columnCustomText2 = MyBase.Columns("CustomText2")
            Me.columnCustomText3 = MyBase.Columns("CustomText3")
            Me.columnCustomText4 = MyBase.Columns("CustomText4")
            Me.columnCustomText5 = MyBase.Columns("CustomText5")
            Me.columnParty_ID = MyBase.Columns("Party_ID")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnVoucher_ID = New Global.System.Data.DataColumn("Voucher_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucher_ID)
            Me.columnVoucherDetail_ID = New Global.System.Data.DataColumn("VoucherDetail_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherDetail_ID)
            Me.columnCOA_ID = New Global.System.Data.DataColumn("COA_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOA_ID)
            Me.columnCOA_Code = New Global.System.Data.DataColumn("COA_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOA_Code)
            Me.columnCOA_Desc = New Global.System.Data.DataColumn("COA_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOA_Desc)
            Me.columnNarration = New Global.System.Data.DataColumn("Narration", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNarration)
            Me.columnDebitAmount = New Global.System.Data.DataColumn("DebitAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDebitAmount)
            Me.columnCreditAmount = New Global.System.Data.DataColumn("CreditAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditAmount)
            Me.columnStamp_User_Id = New Global.System.Data.DataColumn("Stamp_User_Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_User_Id)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnCustomDate1 = New Global.System.Data.DataColumn("CustomDate1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDate1)
            Me.columnCustomDate2 = New Global.System.Data.DataColumn("CustomDate2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDate2)
            Me.columnCustomDate3 = New Global.System.Data.DataColumn("CustomDate3", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDate3)
            Me.columnCustomDate4 = New Global.System.Data.DataColumn("CustomDate4", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDate4)
            Me.columnCustomDate5 = New Global.System.Data.DataColumn("CustomDate5", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDate5)
            Me.columnCustomDecimal1 = New Global.System.Data.DataColumn("CustomDecimal1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDecimal1)
            Me.columnCustomDecimal2 = New Global.System.Data.DataColumn("CustomDecimal2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDecimal2)
            Me.columnCustomDecimal3 = New Global.System.Data.DataColumn("CustomDecimal3", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDecimal3)
            Me.columnCustomDecimal4 = New Global.System.Data.DataColumn("CustomDecimal4", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDecimal4)
            Me.columnCustomDecimal5 = New Global.System.Data.DataColumn("CustomDecimal5", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomDecimal5)
            Me.columnCustomText1 = New Global.System.Data.DataColumn("CustomText1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomText1)
            Me.columnCustomText2 = New Global.System.Data.DataColumn("CustomText2", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomText2)
            Me.columnCustomText3 = New Global.System.Data.DataColumn("CustomText3", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomText3)
            Me.columnCustomText4 = New Global.System.Data.DataColumn("CustomText4", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomText4)
            Me.columnCustomText5 = New Global.System.Data.DataColumn("CustomText5", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomText5)
            Me.columnParty_ID = New Global.System.Data.DataColumn("Party_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParty_ID)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnVoucher_ID, Me.columnVoucherDetail_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnVoucher_ID.AllowDBNull = false
            Me.columnVoucherDetail_ID.AllowDBNull = false
            Me.columnCOA_ID.AllowDBNull = false
            Me.columnNarration.AllowDBNull = false
            Me.columnNarration.MaxLength = 300
            Me.columnDebitAmount.AllowDBNull = false
            Me.columnCreditAmount.AllowDBNull = false
            Me.columnStamp_User_Id.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVoucherDetailRow() As VoucherDetailRow
            Return CType(Me.NewRow,VoucherDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VoucherDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VoucherDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VoucherDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent VoucherDetailRowChanged(Me, New VoucherDetailRowChangeEvent(CType(e.Row,VoucherDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VoucherDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent VoucherDetailRowChanging(Me, New VoucherDetailRowChangeEvent(CType(e.Row,VoucherDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VoucherDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent VoucherDetailRowDeleted(Me, New VoucherDetailRowChangeEvent(CType(e.Row,VoucherDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VoucherDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent VoucherDetailRowDeleting(Me, New VoucherDetailRowChangeEvent(CType(e.Row,VoucherDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVoucherDetailRow(ByVal row As VoucherDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickAccountingDataSet = New QuickAccountingDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VoucherDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VoucherTypeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnVoucherType_ID As Global.System.Data.DataColumn
        
        Private columnVoucherType_Code As Global.System.Data.DataColumn
        
        Private columnVoucherType_Desc As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnInactive_From As Global.System.Data.DataColumn
        
        Private columnInactive_To As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VoucherType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherType_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherType_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherType_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherType_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoucherType_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoucherType_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Inactive_FromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactive_From
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Inactive_ToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactive_To
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VoucherTypeRow
            Get
                Return CType(Me.Rows(index),VoucherTypeRow)
            End Get
        End Property
        
        Public Event VoucherTypeRowChanging As VoucherTypeRowChangeEventHandler
        
        Public Event VoucherTypeRowChanged As VoucherTypeRowChangeEventHandler
        
        Public Event VoucherTypeRowDeleting As VoucherTypeRowChangeEventHandler
        
        Public Event VoucherTypeRowDeleted As VoucherTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVoucherTypeRow(ByVal row As VoucherTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVoucherTypeRow(ByVal Co_ID As Short, ByVal VoucherType_ID As Integer, ByVal VoucherType_Code As String, ByVal VoucherType_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal Inactive_From As Date, ByVal Inactive_To As Date, ByVal RecordStatus_ID As Integer) As VoucherTypeRow
            Dim rowVoucherTypeRow As VoucherTypeRow = CType(Me.NewRow,VoucherTypeRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, VoucherType_ID, VoucherType_Code, VoucherType_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, RecordStatus_ID}
            rowVoucherTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVoucherTypeRow)
            Return rowVoucherTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDVoucherType_ID(ByVal Co_ID As Short, ByVal VoucherType_ID As Integer) As VoucherTypeRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, VoucherType_ID}),VoucherTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VoucherTypeDataTable = CType(MyBase.Clone,VoucherTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VoucherTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnVoucherType_ID = MyBase.Columns("VoucherType_ID")
            Me.columnVoucherType_Code = MyBase.Columns("VoucherType_Code")
            Me.columnVoucherType_Desc = MyBase.Columns("VoucherType_Desc")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnInactive_From = MyBase.Columns("Inactive_From")
            Me.columnInactive_To = MyBase.Columns("Inactive_To")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnVoucherType_ID = New Global.System.Data.DataColumn("VoucherType_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherType_ID)
            Me.columnVoucherType_Code = New Global.System.Data.DataColumn("VoucherType_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherType_Code)
            Me.columnVoucherType_Desc = New Global.System.Data.DataColumn("VoucherType_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoucherType_Desc)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnInactive_From = New Global.System.Data.DataColumn("Inactive_From", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactive_From)
            Me.columnInactive_To = New Global.System.Data.DataColumn("Inactive_To", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactive_To)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnVoucherType_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnVoucherType_ID.AllowDBNull = false
            Me.columnVoucherType_Code.AllowDBNull = false
            Me.columnVoucherType_Code.MaxLength = 50
            Me.columnVoucherType_Desc.AllowDBNull = false
            Me.columnVoucherType_Desc.MaxLength = 250
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVoucherTypeRow() As VoucherTypeRow
            Return CType(Me.NewRow,VoucherTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VoucherTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VoucherTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VoucherTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent VoucherTypeRowChanged(Me, New VoucherTypeRowChangeEvent(CType(e.Row,VoucherTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VoucherTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent VoucherTypeRowChanging(Me, New VoucherTypeRowChangeEvent(CType(e.Row,VoucherTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VoucherTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent VoucherTypeRowDeleted(Me, New VoucherTypeRowChangeEvent(CType(e.Row,VoucherTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VoucherTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent VoucherTypeRowDeleting(Me, New VoucherTypeRowChangeEvent(CType(e.Row,VoucherTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVoucherTypeRow(ByVal row As VoucherTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickAccountingDataSet = New QuickAccountingDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VoucherTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class COADataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnCOA_ID As Global.System.Data.DataColumn
        
        Private columnCOA_Code As Global.System.Data.DataColumn
        
        Private columnCOA_Desc As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnInactive_From As Global.System.Data.DataColumn
        
        Private columnInactive_To As Global.System.Data.DataColumn
        
        Private columnParent_COA_ID As Global.System.Data.DataColumn
        
        Private columnLevel_No As Global.System.Data.DataColumn
        
        Private columnFinancialAccountType_ID As Global.System.Data.DataColumn
        
        Private columnCashFlowAccount_ID As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        Private columnOpening_DebitAmount As Global.System.Data.DataColumn
        
        Private columnOpening_CreditAmount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "COA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COA_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOA_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COA_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOA_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Inactive_FromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactive_From
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Inactive_ToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactive_To
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Parent_COA_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParent_COA_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Level_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLevel_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinancialAccountType_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinancialAccountType_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashFlowAccount_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashFlowAccount_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Opening_DebitAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpening_DebitAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Opening_CreditAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpening_CreditAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As COARow
            Get
                Return CType(Me.Rows(index),COARow)
            End Get
        End Property
        
        Public Event COARowChanging As COARowChangeEventHandler
        
        Public Event COARowChanged As COARowChangeEventHandler
        
        Public Event COARowDeleting As COARowChangeEventHandler
        
        Public Event COARowDeleted As COARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCOARow(ByVal row As COARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCOARow( _
                    ByVal Co_ID As Short,  _
                    ByVal COA_ID As Integer,  _
                    ByVal COA_Code As String,  _
                    ByVal COA_Desc As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Date,  _
                    ByVal Inactive_From As Date,  _
                    ByVal Inactive_To As Date,  _
                    ByVal Parent_COA_ID As Integer,  _
                    ByVal Level_No As Byte,  _
                    ByVal FinancialAccountType_ID As Short,  _
                    ByVal CashFlowAccount_ID As Short,  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Opening_DebitAmount As Decimal,  _
                    ByVal Opening_CreditAmount As Decimal) As COARow
            Dim rowCOARow As COARow = CType(Me.NewRow,COARow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, COA_ID, COA_Code, COA_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, Parent_COA_ID, Level_No, FinancialAccountType_ID, CashFlowAccount_ID, RecordStatus_ID, Opening_DebitAmount, Opening_CreditAmount}
            rowCOARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCOARow)
            Return rowCOARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDCOA_ID(ByVal Co_ID As Short, ByVal COA_ID As Integer) As COARow
            Return CType(Me.Rows.Find(New Object() {Co_ID, COA_ID}),COARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As COADataTable = CType(MyBase.Clone,COADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New COADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnCOA_ID = MyBase.Columns("COA_ID")
            Me.columnCOA_Code = MyBase.Columns("COA_Code")
            Me.columnCOA_Desc = MyBase.Columns("COA_Desc")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnInactive_From = MyBase.Columns("Inactive_From")
            Me.columnInactive_To = MyBase.Columns("Inactive_To")
            Me.columnParent_COA_ID = MyBase.Columns("Parent_COA_ID")
            Me.columnLevel_No = MyBase.Columns("Level_No")
            Me.columnFinancialAccountType_ID = MyBase.Columns("FinancialAccountType_ID")
            Me.columnCashFlowAccount_ID = MyBase.Columns("CashFlowAccount_ID")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
            Me.columnOpening_DebitAmount = MyBase.Columns("Opening_DebitAmount")
            Me.columnOpening_CreditAmount = MyBase.Columns("Opening_CreditAmount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnCOA_ID = New Global.System.Data.DataColumn("COA_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOA_ID)
            Me.columnCOA_Code = New Global.System.Data.DataColumn("COA_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOA_Code)
            Me.columnCOA_Desc = New Global.System.Data.DataColumn("COA_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOA_Desc)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnInactive_From = New Global.System.Data.DataColumn("Inactive_From", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactive_From)
            Me.columnInactive_To = New Global.System.Data.DataColumn("Inactive_To", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactive_To)
            Me.columnParent_COA_ID = New Global.System.Data.DataColumn("Parent_COA_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParent_COA_ID)
            Me.columnLevel_No = New Global.System.Data.DataColumn("Level_No", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLevel_No)
            Me.columnFinancialAccountType_ID = New Global.System.Data.DataColumn("FinancialAccountType_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinancialAccountType_ID)
            Me.columnCashFlowAccount_ID = New Global.System.Data.DataColumn("CashFlowAccount_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashFlowAccount_ID)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.columnOpening_DebitAmount = New Global.System.Data.DataColumn("Opening_DebitAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpening_DebitAmount)
            Me.columnOpening_CreditAmount = New Global.System.Data.DataColumn("Opening_CreditAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpening_CreditAmount)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnCOA_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnCOA_ID.AllowDBNull = false
            Me.columnCOA_Code.AllowDBNull = false
            Me.columnCOA_Code.MaxLength = 50
            Me.columnCOA_Desc.AllowDBNull = false
            Me.columnCOA_Desc.MaxLength = 250
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnParent_COA_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCOARow() As COARow
            Return CType(Me.NewRow,COARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New COARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(COARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.COARowChangedEvent) Is Nothing) Then
                RaiseEvent COARowChanged(Me, New COARowChangeEvent(CType(e.Row,COARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.COARowChangingEvent) Is Nothing) Then
                RaiseEvent COARowChanging(Me, New COARowChangeEvent(CType(e.Row,COARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.COARowDeletedEvent) Is Nothing) Then
                RaiseEvent COARowDeleted(Me, New COARowChangeEvent(CType(e.Row,COARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.COARowDeletingEvent) Is Nothing) Then
                RaiseEvent COARowDeleting(Me, New COARowChangeEvent(CType(e.Row,COARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCOARow(ByVal row As COARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickAccountingDataSet = New QuickAccountingDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "COADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FinancialAccountTypeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnFinancialAccountType_ID As Global.System.Data.DataColumn
        
        Private columnFinancialAccountType_Desc As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FinancialAccountType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinancialAccountType_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinancialAccountType_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinancialAccountType_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinancialAccountType_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FinancialAccountTypeRow
            Get
                Return CType(Me.Rows(index),FinancialAccountTypeRow)
            End Get
        End Property
        
        Public Event FinancialAccountTypeRowChanging As FinancialAccountTypeRowChangeEventHandler
        
        Public Event FinancialAccountTypeRowChanged As FinancialAccountTypeRowChangeEventHandler
        
        Public Event FinancialAccountTypeRowDeleting As FinancialAccountTypeRowChangeEventHandler
        
        Public Event FinancialAccountTypeRowDeleted As FinancialAccountTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFinancialAccountTypeRow(ByVal row As FinancialAccountTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFinancialAccountTypeRow(ByVal Co_ID As Short, ByVal FinancialAccountType_ID As Short, ByVal FinancialAccountType_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer) As FinancialAccountTypeRow
            Dim rowFinancialAccountTypeRow As FinancialAccountTypeRow = CType(Me.NewRow,FinancialAccountTypeRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, FinancialAccountType_ID, FinancialAccountType_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID}
            rowFinancialAccountTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFinancialAccountTypeRow)
            Return rowFinancialAccountTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFinancialAccountType_IDCo_ID(ByVal FinancialAccountType_ID As Short, ByVal Co_ID As Short) As FinancialAccountTypeRow
            Return CType(Me.Rows.Find(New Object() {FinancialAccountType_ID, Co_ID}),FinancialAccountTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FinancialAccountTypeDataTable = CType(MyBase.Clone,FinancialAccountTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FinancialAccountTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnFinancialAccountType_ID = MyBase.Columns("FinancialAccountType_ID")
            Me.columnFinancialAccountType_Desc = MyBase.Columns("FinancialAccountType_Desc")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnFinancialAccountType_ID = New Global.System.Data.DataColumn("FinancialAccountType_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinancialAccountType_ID)
            Me.columnFinancialAccountType_Desc = New Global.System.Data.DataColumn("FinancialAccountType_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinancialAccountType_Desc)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFinancialAccountType_ID, Me.columnCo_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnFinancialAccountType_ID.AllowDBNull = false
            Me.columnFinancialAccountType_Desc.AllowDBNull = false
            Me.columnFinancialAccountType_Desc.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFinancialAccountTypeRow() As FinancialAccountTypeRow
            Return CType(Me.NewRow,FinancialAccountTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FinancialAccountTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FinancialAccountTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FinancialAccountTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent FinancialAccountTypeRowChanged(Me, New FinancialAccountTypeRowChangeEvent(CType(e.Row,FinancialAccountTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FinancialAccountTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent FinancialAccountTypeRowChanging(Me, New FinancialAccountTypeRowChangeEvent(CType(e.Row,FinancialAccountTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FinancialAccountTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent FinancialAccountTypeRowDeleted(Me, New FinancialAccountTypeRowChangeEvent(CType(e.Row,FinancialAccountTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FinancialAccountTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent FinancialAccountTypeRowDeleting(Me, New FinancialAccountTypeRowChangeEvent(CType(e.Row,FinancialAccountTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFinancialAccountTypeRow(ByVal row As FinancialAccountTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickAccountingDataSet = New QuickAccountingDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FinancialAccountTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CashFlowAccountDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnCashFlowAccount_ID As Global.System.Data.DataColumn
        
        Private columnCashFlowAccount_Desc As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CashFlowAccount"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashFlowAccount_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashFlowAccount_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CashFlowAccount_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCashFlowAccount_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CashFlowAccountRow
            Get
                Return CType(Me.Rows(index),CashFlowAccountRow)
            End Get
        End Property
        
        Public Event CashFlowAccountRowChanging As CashFlowAccountRowChangeEventHandler
        
        Public Event CashFlowAccountRowChanged As CashFlowAccountRowChangeEventHandler
        
        Public Event CashFlowAccountRowDeleting As CashFlowAccountRowChangeEventHandler
        
        Public Event CashFlowAccountRowDeleted As CashFlowAccountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCashFlowAccountRow(ByVal row As CashFlowAccountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCashFlowAccountRow(ByVal Co_ID As Short, ByVal CashFlowAccount_ID As Short, ByVal CashFlowAccount_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer) As CashFlowAccountRow
            Dim rowCashFlowAccountRow As CashFlowAccountRow = CType(Me.NewRow,CashFlowAccountRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, CashFlowAccount_ID, CashFlowAccount_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID}
            rowCashFlowAccountRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCashFlowAccountRow)
            Return rowCashFlowAccountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCashFlowAccount_IDCo_ID(ByVal CashFlowAccount_ID As Short, ByVal Co_ID As Short) As CashFlowAccountRow
            Return CType(Me.Rows.Find(New Object() {CashFlowAccount_ID, Co_ID}),CashFlowAccountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CashFlowAccountDataTable = CType(MyBase.Clone,CashFlowAccountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CashFlowAccountDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnCashFlowAccount_ID = MyBase.Columns("CashFlowAccount_ID")
            Me.columnCashFlowAccount_Desc = MyBase.Columns("CashFlowAccount_Desc")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnCashFlowAccount_ID = New Global.System.Data.DataColumn("CashFlowAccount_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashFlowAccount_ID)
            Me.columnCashFlowAccount_Desc = New Global.System.Data.DataColumn("CashFlowAccount_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCashFlowAccount_Desc)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCashFlowAccount_ID, Me.columnCo_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnCashFlowAccount_ID.AllowDBNull = false
            Me.columnCashFlowAccount_Desc.AllowDBNull = false
            Me.columnCashFlowAccount_Desc.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCashFlowAccountRow() As CashFlowAccountRow
            Return CType(Me.NewRow,CashFlowAccountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CashFlowAccountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CashFlowAccountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CashFlowAccountRowChangedEvent) Is Nothing) Then
                RaiseEvent CashFlowAccountRowChanged(Me, New CashFlowAccountRowChangeEvent(CType(e.Row,CashFlowAccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CashFlowAccountRowChangingEvent) Is Nothing) Then
                RaiseEvent CashFlowAccountRowChanging(Me, New CashFlowAccountRowChangeEvent(CType(e.Row,CashFlowAccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CashFlowAccountRowDeletedEvent) Is Nothing) Then
                RaiseEvent CashFlowAccountRowDeleted(Me, New CashFlowAccountRowChangeEvent(CType(e.Row,CashFlowAccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CashFlowAccountRowDeletingEvent) Is Nothing) Then
                RaiseEvent CashFlowAccountRowDeleting(Me, New CashFlowAccountRowChangeEvent(CType(e.Row,CashFlowAccountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCashFlowAccountRow(ByVal row As CashFlowAccountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickAccountingDataSet = New QuickAccountingDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CashFlowAccountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VoucherRow
        Inherits Global.System.Data.DataRow
        
        Private tableVoucher As VoucherDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVoucher = CType(Me.Table,VoucherDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableVoucher.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableVoucher.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Voucher_ID() As Integer
            Get
                Return CType(Me(Me.tableVoucher.Voucher_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableVoucher.Voucher_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherType_ID() As Integer
            Get
                Return CType(Me(Me.tableVoucher.VoucherType_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableVoucher.VoucherType_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Voucher_No() As String
            Get
                Return CType(Me(Me.tableVoucher.Voucher_NoColumn),String)
            End Get
            Set
                Me(Me.tableVoucher.Voucher_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Voucher_Date() As Date
            Get
                Return CType(Me(Me.tableVoucher.Voucher_DateColumn),Date)
            End Get
            Set
                Me(Me.tableVoucher.Voucher_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableVoucher.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableVoucher.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableVoucher.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableVoucher.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableVoucher.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableVoucher.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableVoucher.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableVoucher.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Source_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVoucher.Source_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Source_ID' in table 'Voucher' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucher.Source_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Source_DocumentType_ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableVoucher.Source_DocumentType_IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Source_DocumentType_ID' in table 'Voucher' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucher.Source_DocumentType_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucher.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'Voucher' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucher.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DocumentStatus_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVoucher.DocumentStatus_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DocumentStatus_ID' in table 'Voucher' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucher.DocumentStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSource_IDNull() As Boolean
            Return Me.IsNull(Me.tableVoucher.Source_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSource_IDNull()
            Me(Me.tableVoucher.Source_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSource_DocumentType_IDNull() As Boolean
            Return Me.IsNull(Me.tableVoucher.Source_DocumentType_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSource_DocumentType_IDNull()
            Me(Me.tableVoucher.Source_DocumentType_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableVoucher.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableVoucher.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDocumentStatus_IDNull() As Boolean
            Return Me.IsNull(Me.tableVoucher.DocumentStatus_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDocumentStatus_IDNull()
            Me(Me.tableVoucher.DocumentStatus_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVoucherDetailRows() As VoucherDetailRow()
            If (Me.Table.ChildRelations("FK_Accounting_Voucher_Detail_Accounting_Voucher") Is Nothing) Then
                Return New VoucherDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Accounting_Voucher_Detail_Accounting_Voucher")),VoucherDetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VoucherDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableVoucherDetail As VoucherDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVoucherDetail = CType(Me.Table,VoucherDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableVoucherDetail.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableVoucherDetail.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Voucher_ID() As Integer
            Get
                Return CType(Me(Me.tableVoucherDetail.Voucher_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableVoucherDetail.Voucher_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherDetail_ID() As Short
            Get
                Return CType(Me(Me.tableVoucherDetail.VoucherDetail_IDColumn),Short)
            End Get
            Set
                Me(Me.tableVoucherDetail.VoucherDetail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COA_ID() As Integer
            Get
                Return CType(Me(Me.tableVoucherDetail.COA_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableVoucherDetail.COA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COA_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.COA_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COA_Code' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.COA_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COA_Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.COA_DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COA_Desc' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.COA_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Narration() As String
            Get
                Return CType(Me(Me.tableVoucherDetail.NarrationColumn),String)
            End Get
            Set
                Me(Me.tableVoucherDetail.NarrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DebitAmount() As Decimal
            Get
                Return CType(Me(Me.tableVoucherDetail.DebitAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableVoucherDetail.DebitAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreditAmount() As Decimal
            Get
                Return CType(Me(Me.tableVoucherDetail.CreditAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tableVoucherDetail.CreditAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_User_Id() As Integer
            Get
                Return CType(Me(Me.tableVoucherDetail.Stamp_User_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableVoucherDetail.Stamp_User_IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableVoucherDetail.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableVoucherDetail.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDate1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDate1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDate1' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDate1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDate2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDate2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDate2' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDate2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDate3() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDate3Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDate3' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDate3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDate4() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDate4Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDate4' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDate4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDate5() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDate5Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDate5' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDate5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDecimal1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDecimal1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDecimal1' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDecimal1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDecimal2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDecimal2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDecimal2' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDecimal2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDecimal3() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDecimal3Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDecimal3' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDecimal3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDecimal4() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDecimal4Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDecimal4' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDecimal4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomDecimal5() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomDecimal5Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomDecimal5' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomDecimal5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomText1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomText1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomText1' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomText1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomText2() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomText2Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomText2' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomText2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomText3() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomText3Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomText3' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomText3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomText4() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomText4Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomText4' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomText4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomText5() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.CustomText5Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustomText5' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.CustomText5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Party_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.Party_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Party_ID' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.Party_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVoucherDetail.RecordStatus_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordStatus_ID' in table 'VoucherDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherDetail.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherRowParent() As VoucherRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Accounting_Voucher_Detail_Accounting_Voucher")),VoucherRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Accounting_Voucher_Detail_Accounting_Voucher"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COARowParent() As COARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Accounting_Voucher_Detail_Accounting_COA")),COARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Accounting_Voucher_Detail_Accounting_COA"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOA_CodeNull() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.COA_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOA_CodeNull()
            Me(Me.tableVoucherDetail.COA_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOA_DescNull() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.COA_DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOA_DescNull()
            Me(Me.tableVoucherDetail.COA_DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableVoucherDetail.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDate1Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDate1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDate1Null()
            Me(Me.tableVoucherDetail.CustomDate1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDate2Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDate2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDate2Null()
            Me(Me.tableVoucherDetail.CustomDate2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDate3Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDate3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDate3Null()
            Me(Me.tableVoucherDetail.CustomDate3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDate4Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDate4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDate4Null()
            Me(Me.tableVoucherDetail.CustomDate4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDate5Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDate5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDate5Null()
            Me(Me.tableVoucherDetail.CustomDate5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDecimal1Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDecimal1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDecimal1Null()
            Me(Me.tableVoucherDetail.CustomDecimal1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDecimal2Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDecimal2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDecimal2Null()
            Me(Me.tableVoucherDetail.CustomDecimal2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDecimal3Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDecimal3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDecimal3Null()
            Me(Me.tableVoucherDetail.CustomDecimal3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDecimal4Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDecimal4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDecimal4Null()
            Me(Me.tableVoucherDetail.CustomDecimal4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomDecimal5Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomDecimal5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomDecimal5Null()
            Me(Me.tableVoucherDetail.CustomDecimal5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomText1Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomText1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomText1Null()
            Me(Me.tableVoucherDetail.CustomText1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomText2Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomText2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomText2Null()
            Me(Me.tableVoucherDetail.CustomText2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomText3Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomText3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomText3Null()
            Me(Me.tableVoucherDetail.CustomText3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomText4Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomText4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomText4Null()
            Me(Me.tableVoucherDetail.CustomText4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomText5Null() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.CustomText5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomText5Null()
            Me(Me.tableVoucherDetail.CustomText5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParty_IDNull() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.Party_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParty_IDNull()
            Me(Me.tableVoucherDetail.Party_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecordStatus_IDNull() As Boolean
            Return Me.IsNull(Me.tableVoucherDetail.RecordStatus_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecordStatus_IDNull()
            Me(Me.tableVoucherDetail.RecordStatus_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VoucherTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableVoucherType As VoucherTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVoucherType = CType(Me.Table,VoucherTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableVoucherType.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableVoucherType.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherType_ID() As Integer
            Get
                Return CType(Me(Me.tableVoucherType.VoucherType_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableVoucherType.VoucherType_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherType_Code() As String
            Get
                Return CType(Me(Me.tableVoucherType.VoucherType_CodeColumn),String)
            End Get
            Set
                Me(Me.tableVoucherType.VoucherType_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoucherType_Desc() As String
            Get
                Return CType(Me(Me.tableVoucherType.VoucherType_DescColumn),String)
            End Get
            Set
                Me(Me.tableVoucherType.VoucherType_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableVoucherType.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableVoucherType.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableVoucherType.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableVoucherType.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherType.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'VoucherType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherType.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactive_From() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherType.Inactive_FromColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactive_From' in table 'VoucherType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherType.Inactive_FromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactive_To() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVoucherType.Inactive_ToColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactive_To' in table 'VoucherType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherType.Inactive_ToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVoucherType.RecordStatus_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordStatus_ID' in table 'VoucherType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoucherType.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableVoucherType.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableVoucherType.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactive_FromNull() As Boolean
            Return Me.IsNull(Me.tableVoucherType.Inactive_FromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactive_FromNull()
            Me(Me.tableVoucherType.Inactive_FromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactive_ToNull() As Boolean
            Return Me.IsNull(Me.tableVoucherType.Inactive_ToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactive_ToNull()
            Me(Me.tableVoucherType.Inactive_ToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecordStatus_IDNull() As Boolean
            Return Me.IsNull(Me.tableVoucherType.RecordStatus_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecordStatus_IDNull()
            Me(Me.tableVoucherType.RecordStatus_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class COARow
        Inherits Global.System.Data.DataRow
        
        Private tableCOA As COADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCOA = CType(Me.Table,COADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableCOA.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableCOA.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COA_ID() As Integer
            Get
                Return CType(Me(Me.tableCOA.COA_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCOA.COA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COA_Code() As String
            Get
                Return CType(Me(Me.tableCOA.COA_CodeColumn),String)
            End Get
            Set
                Me(Me.tableCOA.COA_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COA_Desc() As String
            Get
                Return CType(Me(Me.tableCOA.COA_DescColumn),String)
            End Get
            Set
                Me(Me.tableCOA.COA_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableCOA.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCOA.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableCOA.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableCOA.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOA.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'COA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOA.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactive_From() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOA.Inactive_FromColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactive_From' in table 'COA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOA.Inactive_FromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactive_To() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCOA.Inactive_ToColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactive_To' in table 'COA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOA.Inactive_ToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Parent_COA_ID() As Integer
            Get
                Return CType(Me(Me.tableCOA.Parent_COA_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableCOA.Parent_COA_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Level_No() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableCOA.Level_NoColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Level_No' in table 'COA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOA.Level_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinancialAccountType_ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOA.FinancialAccountType_IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinancialAccountType_ID' in table 'COA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOA.FinancialAccountType_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashFlowAccount_ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCOA.CashFlowAccount_IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CashFlowAccount_ID' in table 'COA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOA.CashFlowAccount_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCOA.RecordStatus_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordStatus_ID' in table 'COA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOA.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Opening_DebitAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOA.Opening_DebitAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Opening_DebitAmount' in table 'COA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOA.Opening_DebitAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Opening_CreditAmount() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCOA.Opening_CreditAmountColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Opening_CreditAmount' in table 'COA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCOA.Opening_CreditAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableCOA.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableCOA.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactive_FromNull() As Boolean
            Return Me.IsNull(Me.tableCOA.Inactive_FromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactive_FromNull()
            Me(Me.tableCOA.Inactive_FromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactive_ToNull() As Boolean
            Return Me.IsNull(Me.tableCOA.Inactive_ToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactive_ToNull()
            Me(Me.tableCOA.Inactive_ToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLevel_NoNull() As Boolean
            Return Me.IsNull(Me.tableCOA.Level_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLevel_NoNull()
            Me(Me.tableCOA.Level_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinancialAccountType_IDNull() As Boolean
            Return Me.IsNull(Me.tableCOA.FinancialAccountType_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinancialAccountType_IDNull()
            Me(Me.tableCOA.FinancialAccountType_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCashFlowAccount_IDNull() As Boolean
            Return Me.IsNull(Me.tableCOA.CashFlowAccount_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCashFlowAccount_IDNull()
            Me(Me.tableCOA.CashFlowAccount_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecordStatus_IDNull() As Boolean
            Return Me.IsNull(Me.tableCOA.RecordStatus_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecordStatus_IDNull()
            Me(Me.tableCOA.RecordStatus_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpening_DebitAmountNull() As Boolean
            Return Me.IsNull(Me.tableCOA.Opening_DebitAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpening_DebitAmountNull()
            Me(Me.tableCOA.Opening_DebitAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpening_CreditAmountNull() As Boolean
            Return Me.IsNull(Me.tableCOA.Opening_CreditAmountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpening_CreditAmountNull()
            Me(Me.tableCOA.Opening_CreditAmountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVoucherDetailRows() As VoucherDetailRow()
            If (Me.Table.ChildRelations("FK_Accounting_Voucher_Detail_Accounting_COA") Is Nothing) Then
                Return New VoucherDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Accounting_Voucher_Detail_Accounting_COA")),VoucherDetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FinancialAccountTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableFinancialAccountType As FinancialAccountTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFinancialAccountType = CType(Me.Table,FinancialAccountTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableFinancialAccountType.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableFinancialAccountType.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinancialAccountType_ID() As Short
            Get
                Return CType(Me(Me.tableFinancialAccountType.FinancialAccountType_IDColumn),Short)
            End Get
            Set
                Me(Me.tableFinancialAccountType.FinancialAccountType_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinancialAccountType_Desc() As String
            Get
                Return CType(Me(Me.tableFinancialAccountType.FinancialAccountType_DescColumn),String)
            End Get
            Set
                Me(Me.tableFinancialAccountType.FinancialAccountType_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFinancialAccountType.Stamp_UserIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Stamp_UserID' in table 'FinancialAccountType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFinancialAccountType.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFinancialAccountType.Stamp_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Stamp_DateTime' in table 'FinancialAccountType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFinancialAccountType.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFinancialAccountType.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'FinancialAccountType' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFinancialAccountType.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFinancialAccountType.RecordStatus_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordStatus_ID' in table 'FinancialAccountType' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFinancialAccountType.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStamp_UserIDNull() As Boolean
            Return Me.IsNull(Me.tableFinancialAccountType.Stamp_UserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStamp_UserIDNull()
            Me(Me.tableFinancialAccountType.Stamp_UserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStamp_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableFinancialAccountType.Stamp_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStamp_DateTimeNull()
            Me(Me.tableFinancialAccountType.Stamp_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableFinancialAccountType.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableFinancialAccountType.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecordStatus_IDNull() As Boolean
            Return Me.IsNull(Me.tableFinancialAccountType.RecordStatus_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecordStatus_IDNull()
            Me(Me.tableFinancialAccountType.RecordStatus_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CashFlowAccountRow
        Inherits Global.System.Data.DataRow
        
        Private tableCashFlowAccount As CashFlowAccountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCashFlowAccount = CType(Me.Table,CashFlowAccountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableCashFlowAccount.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableCashFlowAccount.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashFlowAccount_ID() As Short
            Get
                Return CType(Me(Me.tableCashFlowAccount.CashFlowAccount_IDColumn),Short)
            End Get
            Set
                Me(Me.tableCashFlowAccount.CashFlowAccount_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CashFlowAccount_Desc() As String
            Get
                Return CType(Me(Me.tableCashFlowAccount.CashFlowAccount_DescColumn),String)
            End Get
            Set
                Me(Me.tableCashFlowAccount.CashFlowAccount_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCashFlowAccount.Stamp_UserIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Stamp_UserID' in table 'CashFlowAccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashFlowAccount.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCashFlowAccount.Stamp_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Stamp_DateTime' in table 'CashFlowAccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashFlowAccount.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCashFlowAccount.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'CashFlowAccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashFlowAccount.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCashFlowAccount.RecordStatus_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecordStatus_ID' in table 'CashFlowAccount' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCashFlowAccount.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStamp_UserIDNull() As Boolean
            Return Me.IsNull(Me.tableCashFlowAccount.Stamp_UserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStamp_UserIDNull()
            Me(Me.tableCashFlowAccount.Stamp_UserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStamp_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableCashFlowAccount.Stamp_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStamp_DateTimeNull()
            Me(Me.tableCashFlowAccount.Stamp_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableCashFlowAccount.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableCashFlowAccount.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecordStatus_IDNull() As Boolean
            Return Me.IsNull(Me.tableCashFlowAccount.RecordStatus_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecordStatus_IDNull()
            Me(Me.tableCashFlowAccount.RecordStatus_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VoucherRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VoucherRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VoucherRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VoucherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VoucherDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VoucherDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VoucherDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VoucherDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VoucherTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VoucherTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VoucherTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VoucherTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class COARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As COARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As COARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As COARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FinancialAccountTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FinancialAccountTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FinancialAccountTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FinancialAccountTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CashFlowAccountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CashFlowAccountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CashFlowAccountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CashFlowAccountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace QuickAccountingDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VoucherTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Voucher"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Voucher_ID", "Voucher_ID")
            tableMapping.ColumnMappings.Add("VoucherType_ID", "VoucherType_ID")
            tableMapping.ColumnMappings.Add("Voucher_No", "Voucher_No")
            tableMapping.ColumnMappings.Add("Voucher_Date", "Voucher_Date")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            tableMapping.ColumnMappings.Add("Source_ID", "Source_ID")
            tableMapping.ColumnMappings.Add("Source_DocumentType_ID", "Source_DocumentType_ID")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("DocumentStatus_ID", "DocumentStatus_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Accounting_Voucher] WHERE (([Co_ID] = @Original_Co_ID) AND ([Voucher"& _ 
                "_ID] = @Original_Voucher_ID) AND ([VoucherType_ID] = @Original_VoucherType_ID) A"& _ 
                "ND ([Voucher_No] = @Original_Voucher_No) AND ([Voucher_Date] = @Original_Voucher"& _ 
                "_Date) AND ([RecordStatus_ID] = @Original_RecordStatus_ID) AND ([Remarks] = @Ori"& _ 
                "ginal_Remarks) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTim"& _ 
                "e] = @Original_Stamp_DateTime) AND ((@IsNull_Source_ID = 1 AND [Source_ID] IS NU"& _ 
                "LL) OR ([Source_ID] = @Original_Source_ID)) AND ((@IsNull_Source_DocumentType_ID"& _ 
                " = 1 AND [Source_DocumentType_ID] IS NULL) OR ([Source_DocumentType_ID] = @Origi"& _ 
                "nal_Source_DocumentType_ID)) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateT"& _ 
                "ime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ((@IsNull_"& _ 
                "DocumentStatus_ID = 1 AND [DocumentStatus_ID] IS NULL) OR ([DocumentStatus_ID] ="& _ 
                " @Original_DocumentStatus_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Voucher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Voucher_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Voucher_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Source_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Source_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Source_DocumentType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Source_DocumentType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DocumentStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocumentStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DocumentStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocumentStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Accounting_Voucher] ([Co_ID], [Voucher_ID], [VoucherType_ID], [Vouch"& _ 
                "er_No], [Voucher_Date], [RecordStatus_ID], [Remarks], [Stamp_UserID], [Stamp_Dat"& _ 
                "eTime], [Source_ID], [Source_DocumentType_ID], [Upload_DateTime], [DocumentStatu"& _ 
                "s_ID]) VALUES (@Co_ID, @Voucher_ID, @VoucherType_ID, @Voucher_No, @Voucher_Date,"& _ 
                " @RecordStatus_ID, @Remarks, @Stamp_UserID, @Stamp_DateTime, @Source_ID, @Source"& _ 
                "_DocumentType_ID, @Upload_DateTime, @DocumentStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Voucher_"& _ 
                "ID, VoucherType_ID, Voucher_No, Voucher_Date, RecordStatus_ID, Remarks, Stamp_Us"& _ 
                "erID, Stamp_DateTime, Source_ID, Source_DocumentType_ID, Upload_DateTime, Docume"& _ 
                "ntStatus_ID FROM Accounting_Voucher WHERE (Co_ID = @Co_ID) AND (Voucher_ID = @Vo"& _ 
                "ucher_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_DocumentType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DocumentStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocumentStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Accounting_Voucher] SET [Co_ID] = @Co_ID, [Voucher_ID] = @Voucher_ID, [Vo"& _ 
                "ucherType_ID] = @VoucherType_ID, [Voucher_No] = @Voucher_No, [Voucher_Date] = @V"& _ 
                "oucher_Date, [RecordStatus_ID] = @RecordStatus_ID, [Remarks] = @Remarks, [Stamp_"& _ 
                "UserID] = @Stamp_UserID, [Stamp_DateTime] = @Stamp_DateTime, [Source_ID] = @Sour"& _ 
                "ce_ID, [Source_DocumentType_ID] = @Source_DocumentType_ID, [Upload_DateTime] = @"& _ 
                "Upload_DateTime, [DocumentStatus_ID] = @DocumentStatus_ID WHERE (([Co_ID] = @Ori"& _ 
                "ginal_Co_ID) AND ([Voucher_ID] = @Original_Voucher_ID) AND ([VoucherType_ID] = @"& _ 
                "Original_VoucherType_ID) AND ([Voucher_No] = @Original_Voucher_No) AND ([Voucher"& _ 
                "_Date] = @Original_Voucher_Date) AND ([RecordStatus_ID] = @Original_RecordStatus"& _ 
                "_ID) AND ([Remarks] = @Original_Remarks) AND ([Stamp_UserID] = @Original_Stamp_U"& _ 
                "serID) AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Source_ID"& _ 
                " = 1 AND [Source_ID] IS NULL) OR ([Source_ID] = @Original_Source_ID)) AND ((@IsN"& _ 
                "ull_Source_DocumentType_ID = 1 AND [Source_DocumentType_ID] IS NULL) OR ([Source"& _ 
                "_DocumentType_ID] = @Original_Source_DocumentType_ID)) AND ((@IsNull_Upload_Date"& _ 
                "Time = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload"& _ 
                "_DateTime)) AND ((@IsNull_DocumentStatus_ID = 1 AND [DocumentStatus_ID] IS NULL)"& _ 
                " OR ([DocumentStatus_ID] = @Original_DocumentStatus_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Vouche"& _ 
                "r_ID, VoucherType_ID, Voucher_No, Voucher_Date, RecordStatus_ID, Remarks, Stamp_"& _ 
                "UserID, Stamp_DateTime, Source_ID, Source_DocumentType_ID, Upload_DateTime, Docu"& _ 
                "mentStatus_ID FROM Accounting_Voucher WHERE (Co_ID = @Co_ID) AND (Voucher_ID = @"& _ 
                "Voucher_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_DocumentType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DocumentStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocumentStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Voucher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Voucher_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Voucher_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Source_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Source_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Source_DocumentType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Source_DocumentType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DocumentStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocumentStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DocumentStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocumentStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(16) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Voucher_ID, VoucherType_ID, Voucher_No, Voucher_Date, RecordSta"& _ 
                "tus_ID, Remarks, Stamp_UserID, Stamp_DateTime, Source_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "  Source_DocumentType_ID, Upload_DateTime, DocumentStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accou"& _ 
                "nting_Voucher"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID) AND (Voucher_ID = @Voucher_ID)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM Accounting_Voucher WHERE (Co_Id = @Co_Id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_Id", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_DocumentTyp"& _ 
                "e_ID, Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        VoucherType_ID, Voucher_Date, Voucher_ID, Voucher_No"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accou"& _ 
                "nting_Voucher"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      @Co_ID = 0) A"& _ 
                "ND (Stamp_DateTime > @Stamp_DateTime)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_DocumentType_ID"& _ 
                ", Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_ID, Vouc"& _ 
                "her_Date, Voucher_ID, Voucher_No FROM Accounting_Voucher WHERE (Co_ID = @Co_Id) "& _ 
                "AND (Upload_DateTime > @Upload_DateTime)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_Id", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_DocumentType_ID"& _ 
                ", Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_ID, Vouc"& _ 
                "her_Date, Voucher_ID, Voucher_No "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Accounting_Voucher "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Co_ID = @Co_"& _ 
                "ID) AND (Source_ID = @Source_ID) AND (Source_DocumentType_ID = @Source_DocumentT"& _ 
                "ype_ID)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_DocumentType_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT TOP (1) Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_Documen"& _ 
                "tType_ID, Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_"& _ 
                "ID, Voucher_Date, Voucher_ID, Voucher_No"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Accounting_Voucher"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Co"& _ 
                "_ID = @Co_ID) AND (RecordStatus_ID <> 4) AND Source_ID IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Vouch"& _ 
                "er_ID"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT TOP (1) Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_Documen"& _ 
                "tType_ID, Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_"& _ 
                "ID, Voucher_Date, Voucher_ID, Voucher_No FROM Accounting_Voucher WHERE (Co_ID = "& _ 
                "@Co_ID) AND (VoucherType_ID = @VoucherType_ID) AND (RecordStatus_ID <> 4) ORDER "& _ 
                "BY Voucher_ID"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT TOP (1) Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_Documen"& _ 
                "tType_ID, Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_"& _ 
                "ID, Voucher_Date, Voucher_ID, Voucher_No "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Accounting_Voucher "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Co_I"& _ 
                "D = @Co_ID) AND (RecordStatus_ID <> 4) AND Source_ID IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Voucher_I"& _ 
                "D DESC"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT TOP (1) Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_Documen"& _ 
                "tType_ID, Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_"& _ 
                "ID, Voucher_Date, Voucher_ID, Voucher_No FROM Accounting_Voucher WHERE (Co_ID = "& _ 
                "@Co_ID) AND (VoucherType_ID = @VoucherType_ID) AND (RecordStatus_ID <> 4) ORDER "& _ 
                "BY Voucher_ID DESC"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT MAX(Voucher_No) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Accounting_Voucher "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  Co_ID = @Co_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND Vo"& _ 
                "ucher_No LIKE @LikeOperatorValue"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LikeOperatorValue", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT     CONVERT(INT, ISNULL(MAX(Voucher_ID),0) + 1) AS NewID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Acc"& _ 
                "ounting_Voucher"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @Co_ID"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(11).Connection = Me.Connection
            Me._commandCollection(11).CommandText = "SELECT CONVERT(INT, ISNULL(MAX(CAST(Voucher_No AS INT)),0) + 1) AS NewID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Ac"& _ 
                "counting_Voucher"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @Co_ID AND VoucherType_ID = @Vtype"
            Me._commandCollection(11).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Vtype", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(12) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(12).Connection = Me.Connection
            Me._commandCollection(12).CommandText = "SELECT TOP (1) Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_Documen"& _ 
                "tType_ID, Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_"& _ 
                "ID, Voucher_Date, Voucher_ID, Voucher_No "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Accounting_Voucher "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Co_I"& _ 
                "D = @Co_ID) AND (Voucher_ID > @Voucher_ID) AND (RecordStatus_ID <> 4) AND Source"& _ 
                "_ID IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Voucher_ID"
            Me._commandCollection(12).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(13).Connection = Me.Connection
            Me._commandCollection(13).CommandText = "SELECT TOP (1) Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_Documen"& _ 
                "tType_ID, Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_"& _ 
                "ID, Voucher_Date, Voucher_ID, Voucher_No "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Accounting_Voucher "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Co_I"& _ 
                "D = @Co_ID) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND (Voucher_ID > @Voucher_ID) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND (VoucherType_ID = @VoucherT"& _ 
                "ype_ID) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND (RecordStatus_ID <> 4) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Voucher_ID"
            Me._commandCollection(13).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(14).Connection = Me.Connection
            Me._commandCollection(14).CommandText = "SELECT TOP (1) Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_Documen"& _ 
                "tType_ID, Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_"& _ 
                "ID, Voucher_Date, Voucher_ID, Voucher_No"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Accounting_Voucher "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (C"& _ 
                "o_ID = @Co_ID) AND (Voucher_ID < @Voucher_ID) AND (RecordStatus_ID <> 4) AND Sou"& _ 
                "rce_ID IS NULL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Voucher_ID DESC"
            Me._commandCollection(14).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(15).Connection = Me.Connection
            Me._commandCollection(15).CommandText = "SELECT TOP (1) Co_ID, DocumentStatus_ID, RecordStatus_ID, Remarks, Source_Documen"& _ 
                "tType_ID, Source_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime, VoucherType_"& _ 
                "ID, Voucher_Date, Voucher_ID, Voucher_No "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Accounting_Voucher "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Co_I"& _ 
                "D = @Co_ID) AND (Voucher_ID < @Voucher_ID) AND VoucherType_ID = @VoucherType_ID "& _ 
                "AND (RecordStatus_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Voucher_ID DESC"
            Me._commandCollection(15).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(16) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(16).Connection = Me.Connection
            Me._commandCollection(16).CommandText = "UPDATE    Accounting_Voucher"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              RecordStatus_ID = @RecordStatus_ID"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID) AND (Source_ID = @Source_ID) AND (Source_DocumentTy"& _ 
                "pe_ID = @Source_DocumentType_ID)"
            Me._commandCollection(16).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_DocumentType_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetByCoIDVoucherID(ByVal Co_ID As Integer, ByVal Voucher_ID As Integer) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUpdatedByCoIDDateTime(ByVal Co_ID As Integer, ByVal Stamp_DateTime As Date) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Stamp_DateTime,Date)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUploadedByCoIDDateTime(ByVal Co_Id As Integer, ByVal Upload_DateTime As Global.System.Nullable(Of Date)) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_Id,Integer)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDSourceIDSourceDocumentTypeID(ByVal Co_ID As Integer, ByVal Source_ID As Global.System.Nullable(Of Integer), ByVal Source_DocumentType_ID As Global.System.Nullable(Of Integer)) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            If (Source_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Source_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Source_DocumentType_ID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Source_DocumentType_ID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFirstByCoID(ByVal Co_ID As Integer) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFirstByCoIDVoucherTypeID(ByVal Co_ID As Short, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetLastByCoID(ByVal Co_ID As Integer) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetLastByCoIDVoucherTypeID(ByVal Co_ID As Integer, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetNextByCoIDVoucherID(ByVal Co_ID As Integer, ByVal Voucher_ID As Integer) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetNextByCoIDVoucherIDVoucherTypeID(ByVal Co_ID As Integer, ByVal Voucher_ID As Integer, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(13)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPreviousByCoIDVoucherID(ByVal Co_ID As Integer, ByVal Voucher_ID As Integer) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(14)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPreviousByCoIDVoucherIDVoucherTypeID(ByVal Co_ID As Integer, ByVal Voucher_ID As Integer, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(15)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDataTable = New QuickAccountingDataSet.VoucherDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickAccountingDataSet.VoucherDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickAccountingDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Voucher")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Voucher_ID As Integer, ByVal Original_VoucherType_ID As Integer, ByVal Original_Voucher_No As String, ByVal Original_Voucher_Date As Date, ByVal Original_RecordStatus_ID As Integer, ByVal Original_Remarks As String, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Source_ID As Global.System.Nullable(Of Integer), ByVal Original_Source_DocumentType_ID As Global.System.Nullable(Of Short), ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_DocumentStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Voucher_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_VoucherType_ID,Integer)
            If (Original_Voucher_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Voucher_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Voucher_No,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Voucher_Date,Date)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_RecordStatus_ID,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Source_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Source_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_Source_DocumentType_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Source_DocumentType_ID.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_DocumentStatus_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_DocumentStatus_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Voucher_ID As Integer, ByVal VoucherType_ID As Integer, ByVal Voucher_No As String, ByVal Voucher_Date As Date, ByVal RecordStatus_ID As Integer, ByVal Remarks As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Source_ID As Global.System.Nullable(Of Integer), ByVal Source_DocumentType_ID As Global.System.Nullable(Of Short), ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal DocumentStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(VoucherType_ID,Integer)
            If (Voucher_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Voucher_No")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Voucher_No,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Voucher_Date,Date)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(RecordStatus_ID,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Stamp_DateTime,Date)
            If (Source_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Source_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Source_DocumentType_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Source_DocumentType_ID.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DocumentStatus_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DocumentStatus_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Voucher_ID As Integer,  _
                    ByVal VoucherType_ID As Integer,  _
                    ByVal Voucher_No As String,  _
                    ByVal Voucher_Date As Date,  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Source_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Source_DocumentType_ID As Global.System.Nullable(Of Short),  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal DocumentStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Voucher_ID As Integer,  _
                    ByVal Original_VoucherType_ID As Integer,  _
                    ByVal Original_Voucher_No As String,  _
                    ByVal Original_Voucher_Date As Date,  _
                    ByVal Original_RecordStatus_ID As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Source_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Source_DocumentType_ID As Global.System.Nullable(Of Short),  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_DocumentStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(VoucherType_ID,Integer)
            If (Voucher_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Voucher_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Voucher_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Voucher_Date,Date)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(RecordStatus_ID,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Stamp_DateTime,Date)
            If (Source_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Source_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Source_DocumentType_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Source_DocumentType_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DocumentStatus_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DocumentStatus_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Voucher_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_VoucherType_ID,Integer)
            If (Original_Voucher_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Voucher_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Voucher_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Voucher_Date,Date)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_RecordStatus_ID,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Source_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Source_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_Source_DocumentType_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Source_DocumentType_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_DocumentStatus_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_DocumentStatus_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal VoucherType_ID As Integer,  _
                    ByVal Voucher_No As String,  _
                    ByVal Voucher_Date As Date,  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Source_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Source_DocumentType_ID As Global.System.Nullable(Of Short),  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal DocumentStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Voucher_ID As Integer,  _
                    ByVal Original_VoucherType_ID As Integer,  _
                    ByVal Original_Voucher_No As String,  _
                    ByVal Original_Voucher_Date As Date,  _
                    ByVal Original_RecordStatus_ID As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Source_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Source_DocumentType_ID As Global.System.Nullable(Of Short),  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_DocumentStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_Co_ID, Original_Voucher_ID, VoucherType_ID, Voucher_No, Voucher_Date, RecordStatus_ID, Remarks, Stamp_UserID, Stamp_DateTime, Source_ID, Source_DocumentType_ID, Upload_DateTime, DocumentStatus_ID, Original_Co_ID, Original_Voucher_ID, Original_VoucherType_ID, Original_Voucher_No, Original_Voucher_Date, Original_RecordStatus_ID, Original_Remarks, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Source_ID, Original_Source_DocumentType_ID, Original_Upload_DateTime, Original_DocumentStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteAll(ByVal Co_Id As Short) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Co_Id,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetMaxVoucherNoByCoID(ByVal Co_ID As Integer, ByVal LikeOperatorValue As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(9)
            command.Parameters(0).Value = CType(Co_ID,Integer)
            If (LikeOperatorValue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LikeOperatorValue")
            Else
                command.Parameters(1).Value = CType(LikeOperatorValue,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewVoucherIDByCoID(ByVal Co_ID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(10)
            command.Parameters(0).Value = CType(Co_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewVoucherNoByCoIDVoucherTypeID(ByVal Co_ID As Integer, ByVal Vtype As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(11)
            command.Parameters(0).Value = CType(Co_ID,Integer)
            command.Parameters(1).Value = CType(Vtype,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateStatusByCoIdSource(ByVal RecordStatus_ID As Integer, ByVal Co_ID As Short, ByVal Source_ID As Global.System.Nullable(Of Integer), ByVal Source_DocumentType_ID As Global.System.Nullable(Of Short)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(16)
            command.Parameters(0).Value = CType(RecordStatus_ID,Integer)
            command.Parameters(1).Value = CType(Co_ID,Short)
            If (Source_ID.HasValue = true) Then
                command.Parameters(2).Value = CType(Source_ID.Value,Integer)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Source_DocumentType_ID.HasValue = true) Then
                command.Parameters(3).Value = CType(Source_DocumentType_ID.Value,Short)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VoucherDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VoucherDetail"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Voucher_ID", "Voucher_ID")
            tableMapping.ColumnMappings.Add("VoucherDetail_ID", "VoucherDetail_ID")
            tableMapping.ColumnMappings.Add("COA_ID", "COA_ID")
            tableMapping.ColumnMappings.Add("Narration", "Narration")
            tableMapping.ColumnMappings.Add("DebitAmount", "DebitAmount")
            tableMapping.ColumnMappings.Add("CreditAmount", "CreditAmount")
            tableMapping.ColumnMappings.Add("Stamp_User_Id", "Stamp_User_Id")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("CustomDate1", "CustomDate1")
            tableMapping.ColumnMappings.Add("CustomDate2", "CustomDate2")
            tableMapping.ColumnMappings.Add("CustomDate3", "CustomDate3")
            tableMapping.ColumnMappings.Add("CustomDate4", "CustomDate4")
            tableMapping.ColumnMappings.Add("CustomDate5", "CustomDate5")
            tableMapping.ColumnMappings.Add("CustomDecimal1", "CustomDecimal1")
            tableMapping.ColumnMappings.Add("CustomDecimal2", "CustomDecimal2")
            tableMapping.ColumnMappings.Add("CustomDecimal3", "CustomDecimal3")
            tableMapping.ColumnMappings.Add("CustomDecimal4", "CustomDecimal4")
            tableMapping.ColumnMappings.Add("CustomDecimal5", "CustomDecimal5")
            tableMapping.ColumnMappings.Add("CustomText1", "CustomText1")
            tableMapping.ColumnMappings.Add("CustomText2", "CustomText2")
            tableMapping.ColumnMappings.Add("CustomText3", "CustomText3")
            tableMapping.ColumnMappings.Add("CustomText4", "CustomText4")
            tableMapping.ColumnMappings.Add("CustomText5", "CustomText5")
            tableMapping.ColumnMappings.Add("Party_ID", "Party_ID")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Accounting_Voucher_Detail] WHERE (([Co_ID] = @Original_Co_ID) AND (["& _ 
                "Voucher_ID] = @Original_Voucher_ID) AND ([VoucherDetail_ID] = @Original_VoucherD"& _ 
                "etail_ID) AND ([COA_ID] = @Original_COA_ID) AND ([Narration] = @Original_Narrati"& _ 
                "on) AND ([DebitAmount] = @Original_DebitAmount) AND ([CreditAmount] = @Original_"& _ 
                "CreditAmount) AND ([Stamp_User_Id] = @Original_Stamp_User_Id) AND ([Stamp_DateTi"& _ 
                "me] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_Da"& _ 
                "teTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ((@IsNu"& _ 
                "ll_CustomDate1 = 1 AND [CustomDate1] IS NULL) OR ([CustomDate1] = @Original_Cust"& _ 
                "omDate1)) AND ((@IsNull_CustomDate2 = 1 AND [CustomDate2] IS NULL) OR ([CustomDa"& _ 
                "te2] = @Original_CustomDate2)) AND ((@IsNull_CustomDate3 = 1 AND [CustomDate3] I"& _ 
                "S NULL) OR ([CustomDate3] = @Original_CustomDate3)) AND ((@IsNull_CustomDate4 = "& _ 
                "1 AND [CustomDate4] IS NULL) OR ([CustomDate4] = @Original_CustomDate4)) AND ((@"& _ 
                "IsNull_CustomDate5 = 1 AND [CustomDate5] IS NULL) OR ([CustomDate5] = @Original_"& _ 
                "CustomDate5)) AND ((@IsNull_CustomDecimal1 = 1 AND [CustomDecimal1] IS NULL) OR "& _ 
                "([CustomDecimal1] = @Original_CustomDecimal1)) AND ((@IsNull_CustomDecimal2 = 1 "& _ 
                "AND [CustomDecimal2] IS NULL) OR ([CustomDecimal2] = @Original_CustomDecimal2)) "& _ 
                "AND ((@IsNull_CustomDecimal3 = 1 AND [CustomDecimal3] IS NULL) OR ([CustomDecima"& _ 
                "l3] = @Original_CustomDecimal3)) AND ((@IsNull_CustomDecimal4 = 1 AND [CustomDec"& _ 
                "imal4] IS NULL) OR ([CustomDecimal4] = @Original_CustomDecimal4)) AND ((@IsNull_"& _ 
                "CustomDecimal5 = 1 AND [CustomDecimal5] IS NULL) OR ([CustomDecimal5] = @Origina"& _ 
                "l_CustomDecimal5)) AND ((@IsNull_CustomText1 = 1 AND [CustomText1] IS NULL) OR ("& _ 
                "[CustomText1] = @Original_CustomText1)) AND ((@IsNull_CustomText2 = 1 AND [Custo"& _ 
                "mText2] IS NULL) OR ([CustomText2] = @Original_CustomText2)) AND ((@IsNull_Custo"& _ 
                "mText3 = 1 AND [CustomText3] IS NULL) OR ([CustomText3] = @Original_CustomText3)"& _ 
                ") AND ((@IsNull_CustomText4 = 1 AND [CustomText4] IS NULL) OR ([CustomText4] = @"& _ 
                "Original_CustomText4)) AND ((@IsNull_CustomText5 = 1 AND [CustomText5] IS NULL) "& _ 
                "OR ([CustomText5] = @Original_CustomText5)) AND ((@IsNull_Party_ID = 1 AND [Part"& _ 
                "y_ID] IS NULL) OR ([Party_ID] = @Original_Party_ID)) AND ((@IsNull_RecordStatus_"& _ 
                "ID = 1 AND [RecordStatus_ID] IS NULL) OR ([RecordStatus_ID] = @Original_RecordSt"& _ 
                "atus_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Voucher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherDetail_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Narration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Narration", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DebitAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 14, 4, "DebitAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 14, 4, "CreditAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_User_Id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_User_Id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Party_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Party_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Accounting_Voucher_Detail] ([Co_ID], [Voucher_ID], [VoucherDetail_ID"& _ 
                "], [COA_ID], [Narration], [DebitAmount], [CreditAmount], [Stamp_User_Id], [Stamp"& _ 
                "_DateTime], [Upload_DateTime], [CustomDate1], [CustomDate2], [CustomDate3], [Cus"& _ 
                "tomDate4], [CustomDate5], [CustomDecimal1], [CustomDecimal2], [CustomDecimal3], "& _ 
                "[CustomDecimal4], [CustomDecimal5], [CustomText1], [CustomText2], [CustomText3],"& _ 
                " [CustomText4], [CustomText5], [Party_ID], [RecordStatus_ID]) VALUES (@Co_ID, @V"& _ 
                "oucher_ID, @VoucherDetail_ID, @COA_ID, @Narration, @DebitAmount, @CreditAmount, "& _ 
                "@Stamp_User_Id, @Stamp_DateTime, @Upload_DateTime, @CustomDate1, @CustomDate2, @"& _ 
                "CustomDate3, @CustomDate4, @CustomDate5, @CustomDecimal1, @CustomDecimal2, @Cust"& _ 
                "omDecimal3, @CustomDecimal4, @CustomDecimal5, @CustomText1, @CustomText2, @Custo"& _ 
                "mText3, @CustomText4, @CustomText5, @Party_ID, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID,"& _ 
                " Voucher_ID, VoucherDetail_ID, COA_ID, Narration, DebitAmount, CreditAmount, Sta"& _ 
                "mp_User_Id, Stamp_DateTime, Upload_DateTime, CustomDate1, CustomDate2, CustomDat"& _ 
                "e3, CustomDate4, CustomDate5, CustomDecimal1, CustomDecimal2, CustomDecimal3, Cu"& _ 
                "stomDecimal4, CustomDecimal5, CustomText1, CustomText2, CustomText3, CustomText4"& _ 
                ", CustomText5, Party_ID, RecordStatus_ID FROM Accounting_Voucher_Detail WHERE (C"& _ 
                "o_ID = @Co_ID) AND (VoucherDetail_ID = @VoucherDetail_ID) AND (Voucher_ID = @Vou"& _ 
                "cher_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherDetail_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherDetail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Narration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Narration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DebitAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 14, 4, "DebitAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 14, 4, "CreditAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_User_Id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_User_Id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Party_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Accounting_Voucher_Detail] SET [Co_ID] = @Co_ID, [Voucher_ID] = @Voucher_"& _ 
                "ID, [VoucherDetail_ID] = @VoucherDetail_ID, [COA_ID] = @COA_ID, [Narration] = @N"& _ 
                "arration, [DebitAmount] = @DebitAmount, [CreditAmount] = @CreditAmount, [Stamp_U"& _ 
                "ser_Id] = @Stamp_User_Id, [Stamp_DateTime] = @Stamp_DateTime, [Upload_DateTime] "& _ 
                "= @Upload_DateTime, [CustomDate1] = @CustomDate1, [CustomDate2] = @CustomDate2, "& _ 
                "[CustomDate3] = @CustomDate3, [CustomDate4] = @CustomDate4, [CustomDate5] = @Cus"& _ 
                "tomDate5, [CustomDecimal1] = @CustomDecimal1, [CustomDecimal2] = @CustomDecimal2"& _ 
                ", [CustomDecimal3] = @CustomDecimal3, [CustomDecimal4] = @CustomDecimal4, [Custo"& _ 
                "mDecimal5] = @CustomDecimal5, [CustomText1] = @CustomText1, [CustomText2] = @Cus"& _ 
                "tomText2, [CustomText3] = @CustomText3, [CustomText4] = @CustomText4, [CustomTex"& _ 
                "t5] = @CustomText5, [Party_ID] = @Party_ID, [RecordStatus_ID] = @RecordStatus_ID"& _ 
                " WHERE (([Co_ID] = @Original_Co_ID) AND ([Voucher_ID] = @Original_Voucher_ID) AN"& _ 
                "D ([VoucherDetail_ID] = @Original_VoucherDetail_ID) AND ([COA_ID] = @Original_CO"& _ 
                "A_ID) AND ([Narration] = @Original_Narration) AND ([DebitAmount] = @Original_Deb"& _ 
                "itAmount) AND ([CreditAmount] = @Original_CreditAmount) AND ([Stamp_User_Id] = @"& _ 
                "Original_Stamp_User_Id) AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND (("& _ 
                "@IsNull_Upload_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime]"& _ 
                " = @Original_Upload_DateTime)) AND ((@IsNull_CustomDate1 = 1 AND [CustomDate1] I"& _ 
                "S NULL) OR ([CustomDate1] = @Original_CustomDate1)) AND ((@IsNull_CustomDate2 = "& _ 
                "1 AND [CustomDate2] IS NULL) OR ([CustomDate2] = @Original_CustomDate2)) AND ((@"& _ 
                "IsNull_CustomDate3 = 1 AND [CustomDate3] IS NULL) OR ([CustomDate3] = @Original_"& _ 
                "CustomDate3)) AND ((@IsNull_CustomDate4 = 1 AND [CustomDate4] IS NULL) OR ([Cust"& _ 
                "omDate4] = @Original_CustomDate4)) AND ((@IsNull_CustomDate5 = 1 AND [CustomDate"& _ 
                "5] IS NULL) OR ([CustomDate5] = @Original_CustomDate5)) AND ((@IsNull_CustomDeci"& _ 
                "mal1 = 1 AND [CustomDecimal1] IS NULL) OR ([CustomDecimal1] = @Original_CustomDe"& _ 
                "cimal1)) AND ((@IsNull_CustomDecimal2 = 1 AND [CustomDecimal2] IS NULL) OR ([Cus"& _ 
                "tomDecimal2] = @Original_CustomDecimal2)) AND ((@IsNull_CustomDecimal3 = 1 AND ["& _ 
                "CustomDecimal3] IS NULL) OR ([CustomDecimal3] = @Original_CustomDecimal3)) AND ("& _ 
                "(@IsNull_CustomDecimal4 = 1 AND [CustomDecimal4] IS NULL) OR ([CustomDecimal4] ="& _ 
                " @Original_CustomDecimal4)) AND ((@IsNull_CustomDecimal5 = 1 AND [CustomDecimal5"& _ 
                "] IS NULL) OR ([CustomDecimal5] = @Original_CustomDecimal5)) AND ((@IsNull_Custo"& _ 
                "mText1 = 1 AND [CustomText1] IS NULL) OR ([CustomText1] = @Original_CustomText1)"& _ 
                ") AND ((@IsNull_CustomText2 = 1 AND [CustomText2] IS NULL) OR ([CustomText2] = @"& _ 
                "Original_CustomText2)) AND ((@IsNull_CustomText3 = 1 AND [CustomText3] IS NULL) "& _ 
                "OR ([CustomText3] = @Original_CustomText3)) AND ((@IsNull_CustomText4 = 1 AND [C"& _ 
                "ustomText4] IS NULL) OR ([CustomText4] = @Original_CustomText4)) AND ((@IsNull_C"& _ 
                "ustomText5 = 1 AND [CustomText5] IS NULL) OR ([CustomText5] = @Original_CustomTe"& _ 
                "xt5)) AND ((@IsNull_Party_ID = 1 AND [Party_ID] IS NULL) OR ([Party_ID] = @Origi"& _ 
                "nal_Party_ID)) AND ((@IsNull_RecordStatus_ID = 1 AND [RecordStatus_ID] IS NULL) "& _ 
                "OR ([RecordStatus_ID] = @Original_RecordStatus_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Voucher_ID,"& _ 
                " VoucherDetail_ID, COA_ID, Narration, DebitAmount, CreditAmount, Stamp_User_Id, "& _ 
                "Stamp_DateTime, Upload_DateTime, CustomDate1, CustomDate2, CustomDate3, CustomDa"& _ 
                "te4, CustomDate5, CustomDecimal1, CustomDecimal2, CustomDecimal3, CustomDecimal4"& _ 
                ", CustomDecimal5, CustomText1, CustomText2, CustomText3, CustomText4, CustomText"& _ 
                "5, Party_ID, RecordStatus_ID FROM Accounting_Voucher_Detail WHERE (Co_ID = @Co_I"& _ 
                "D) AND (VoucherDetail_ID = @VoucherDetail_ID) AND (Voucher_ID = @Voucher_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherDetail_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherDetail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Narration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Narration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DebitAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 14, 4, "DebitAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreditAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 14, 4, "CreditAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_User_Id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_User_Id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDate5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomDecimal5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomText5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Party_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Voucher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherDetail_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Narration", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Narration", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DebitAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 14, 4, "DebitAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CreditAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 14, 4, "CreditAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_User_Id", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_User_Id", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDate5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDate5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDate5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomDecimal5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomDecimal5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomDecimal5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText1", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText2", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText3", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText4", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CustomText5", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText5", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomText5", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomText5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Party_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Party_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Voucher_ID, VoucherDetail_ID, COA_ID, Narration, DebitAmount, C"& _ 
                "reditAmount, Stamp_User_Id, Stamp_DateTime, Upload_DateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     CustomDate1, CustomDate2, CustomDate3, CustomDate4, CustomDate5, CustomDeci"& _ 
                "mal1, CustomDecimal2, CustomDecimal3, CustomDecimal4, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Cu"& _ 
                "stomDecimal5, CustomText1, CustomText2, CustomText3, CustomText4, CustomText5, P"& _ 
                "arty_ID, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_Voucher_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_"& _ 
                "ID = @Co_ID) AND (Voucher_ID = @Voucher_ID) AND (VoucherDetail_ID = @VoucherDeta"& _ 
                "il_ID)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherDetail_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherDetail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM Accounting_Voucher_Detail WHERE (Co_Id = @Co_Id)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_Id", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     COA_ID, Co_ID, CreditAmount, CustomDate1, CustomDate2, CustomDate3, Cu"& _ 
                "stomDate4, CustomDate5, CustomDecimal1, CustomDecimal2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "CustomDecimal3, CustomDecimal4, CustomDecimal5, CustomText1, CustomText2, Custom"& _ 
                "Text3, CustomText4, CustomText5, DebitAmount, Narration, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " Party_ID, RecordStatus_ID, Stamp_DateTime, Stamp_User_Id, Upload_DateTime, Vouc"& _ 
                "herDetail_ID, Voucher_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_Voucher_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_"& _ 
                "ID = @Co_ID OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      @Co_ID = 0) AND (Stamp_DateTime > @Stamp_D"& _ 
                "ateTime)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT COA_ID, Co_ID, CreditAmount, CustomDate1, CustomDate2, CustomDate3, Custom"& _ 
                "Date4, CustomDate5, CustomDecimal1, CustomDecimal2, CustomDecimal3, CustomDecima"& _ 
                "l4, CustomDecimal5, CustomText1, CustomText2, CustomText3, CustomText4, CustomTe"& _ 
                "xt5, DebitAmount, Narration, Party_ID, RecordStatus_ID, Stamp_DateTime, Stamp_Us"& _ 
                "er_Id, Upload_DateTime, VoucherDetail_ID, Voucher_ID FROM Accounting_Voucher_Det"& _ 
                "ail WHERE (Co_ID = @Co_Id) AND (Upload_DateTime > @Upload_DateTime)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_Id", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     ca.COA_ID, avd.Co_ID, ca.CoA_Code ,COA_Desc, CreditAmount, CustomDate1"& _ 
                ", CustomDate2, CustomDate3, CustomDate4, CustomDate5, CustomDecimal1, CustomDeci"& _ 
                "mal2, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      CustomDecimal3, CustomDecimal4, CustomDecimal5, Cu"& _ 
                "stomText1, CustomText2, CustomText3, CustomText4, CustomText5, DebitAmount, Narr"& _ 
                "ation, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Party_ID,avd.RecordStatus_ID,avd. Stamp_DateTime,"& _ 
                " Stamp_User_Id,                     avd.Upload_DateTime, VoucherDetail_ID, Vouch"& _ 
                "er_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_Voucher_Detail as avd"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"INNER JOIN Accounting_COA "& _ 
                "As ca On ca.Co_ID =avd.Co_ID and avd.COA_ID = ca.COA_ID "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (avd.Co_ID ="& _ 
                " @Co_ID) AND (Voucher_ID = @Voucher_ID)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     CONVERT(SMALLINT, ISNULL(MAX(VoucherDetail_ID), 0) + 1) AS NewID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM"& _ 
                "         Accounting_Voucher_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID) AND (Voucher_ID ="& _ 
                " @Voucher_ID)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Voucher_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Voucher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetByCoIDVoucherIDVoucherDetailID(ByVal Co_ID As Short, ByVal Voucher_ID As Integer, ByVal VoucherDetail_ID As Short) As QuickAccountingDataSet.VoucherDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(VoucherDetail_ID,Short)
            Dim dataTable As QuickAccountingDataSet.VoucherDetailDataTable = New QuickAccountingDataSet.VoucherDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUpdatedByCoIDDateTime(ByVal Co_ID As Short, ByVal Stamp_DateTime As Date) As QuickAccountingDataSet.VoucherDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Stamp_DateTime,Date)
            Dim dataTable As QuickAccountingDataSet.VoucherDetailDataTable = New QuickAccountingDataSet.VoucherDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUploadedByCoIDDateTime(ByVal Co_Id As Integer, ByVal Upload_DateTime As Global.System.Nullable(Of Date)) As QuickAccountingDataSet.VoucherDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_Id,Integer)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As QuickAccountingDataSet.VoucherDetailDataTable = New QuickAccountingDataSet.VoucherDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDVoucherID(ByVal Co_ID As Integer, ByVal Voucher_ID As Integer) As QuickAccountingDataSet.VoucherDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherDetailDataTable = New QuickAccountingDataSet.VoucherDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickAccountingDataSet.VoucherDetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickAccountingDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "VoucherDetail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Voucher_ID As Integer,  _
                    ByVal Original_VoucherDetail_ID As Short,  _
                    ByVal Original_COA_ID As Integer,  _
                    ByVal Original_Narration As String,  _
                    ByVal Original_DebitAmount As Decimal,  _
                    ByVal Original_CreditAmount As Decimal,  _
                    ByVal Original_Stamp_User_Id As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Party_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RecordStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Voucher_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_VoucherDetail_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COA_ID,Integer)
            If (Original_Narration Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Narration")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Narration,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_DebitAmount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CreditAmount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Stamp_User_Id,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CustomDate1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_CustomDate2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_CustomDate3.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CustomDate4.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_CustomDate5.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_CustomDecimal1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_CustomDecimal2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_CustomDecimal3.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_CustomDecimal4.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_CustomDecimal5.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_CustomText1.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_CustomText2.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText3.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_CustomText3.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText4.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_CustomText4.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText5.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_CustomText5.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_Party_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_Party_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_RecordStatus_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Co_ID As Short,  _
                    ByVal Voucher_ID As Integer,  _
                    ByVal VoucherDetail_ID As Short,  _
                    ByVal COA_ID As Integer,  _
                    ByVal Narration As String,  _
                    ByVal DebitAmount As Decimal,  _
                    ByVal CreditAmount As Decimal,  _
                    ByVal Stamp_User_Id As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate1 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate2 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate3 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate4 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate5 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal1 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal2 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal3 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal4 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal5 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText1 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText2 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText3 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText4 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText5 As Global.System.Nullable(Of Date),  _
                    ByVal Party_ID As Global.System.Nullable(Of Integer),  _
                    ByVal RecordStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(VoucherDetail_ID,Short)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(COA_ID,Integer)
            If (Narration Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Narration")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Narration,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(DebitAmount,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(CreditAmount,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Stamp_User_Id,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CustomDate1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CustomDate1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (CustomDate2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(CustomDate2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CustomDate3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CustomDate3.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (CustomDate4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(CustomDate4.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CustomDate5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CustomDate5.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CustomDecimal1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(CustomDecimal2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(CustomDecimal3.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(CustomDecimal4.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(CustomDecimal5.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (CustomText1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(CustomText1.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (CustomText2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(CustomText2.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (CustomText3.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(CustomText3.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CustomText4.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(CustomText4.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (CustomText5.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(CustomText5.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Party_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(Party_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (RecordStatus_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Voucher_ID As Integer,  _
                    ByVal VoucherDetail_ID As Short,  _
                    ByVal COA_ID As Integer,  _
                    ByVal Narration As String,  _
                    ByVal DebitAmount As Decimal,  _
                    ByVal CreditAmount As Decimal,  _
                    ByVal Stamp_User_Id As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate1 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate2 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate3 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate4 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate5 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal1 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal2 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal3 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal4 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal5 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText1 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText2 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText3 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText4 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText5 As Global.System.Nullable(Of Date),  _
                    ByVal Party_ID As Global.System.Nullable(Of Integer),  _
                    ByVal RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Voucher_ID As Integer,  _
                    ByVal Original_VoucherDetail_ID As Short,  _
                    ByVal Original_COA_ID As Integer,  _
                    ByVal Original_Narration As String,  _
                    ByVal Original_DebitAmount As Decimal,  _
                    ByVal Original_CreditAmount As Decimal,  _
                    ByVal Original_Stamp_User_Id As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Party_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RecordStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Voucher_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(VoucherDetail_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COA_ID,Integer)
            If (Narration Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Narration")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Narration,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DebitAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CreditAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Stamp_User_Id,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (CustomDate1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CustomDate1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (CustomDate2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(CustomDate2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CustomDate3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CustomDate3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (CustomDate4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(CustomDate4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CustomDate5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CustomDate5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(CustomDecimal1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(CustomDecimal2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(CustomDecimal3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(CustomDecimal4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (CustomDecimal5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(CustomDecimal5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (CustomText1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(CustomText1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (CustomText2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(CustomText2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (CustomText3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(CustomText3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (CustomText4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(CustomText4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (CustomText5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(CustomText5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Party_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Party_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (RecordStatus_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Voucher_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_VoucherDetail_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_COA_ID,Integer)
            If (Original_Narration Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Narration")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Narration,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_DebitAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_CreditAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Stamp_User_Id,Integer)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_CustomDate1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_CustomDate2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_CustomDate3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_CustomDate4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDate5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_CustomDate5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_CustomDecimal1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_CustomDecimal2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_CustomDecimal3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_CustomDecimal4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomDecimal5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_CustomDecimal5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_CustomText1.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_CustomText2.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText3.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_CustomText3.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText4.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_CustomText4.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_CustomText5.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_CustomText5.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_Party_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_Party_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_RecordStatus_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COA_ID As Integer,  _
                    ByVal Narration As String,  _
                    ByVal DebitAmount As Decimal,  _
                    ByVal CreditAmount As Decimal,  _
                    ByVal Stamp_User_Id As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate1 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate2 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate3 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate4 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDate5 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal1 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal2 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal3 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal4 As Global.System.Nullable(Of Date),  _
                    ByVal CustomDecimal5 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText1 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText2 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText3 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText4 As Global.System.Nullable(Of Date),  _
                    ByVal CustomText5 As Global.System.Nullable(Of Date),  _
                    ByVal Party_ID As Global.System.Nullable(Of Integer),  _
                    ByVal RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Voucher_ID As Integer,  _
                    ByVal Original_VoucherDetail_ID As Short,  _
                    ByVal Original_COA_ID As Integer,  _
                    ByVal Original_Narration As String,  _
                    ByVal Original_DebitAmount As Decimal,  _
                    ByVal Original_CreditAmount As Decimal,  _
                    ByVal Original_Stamp_User_Id As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDate5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomDecimal5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText1 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText2 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText3 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText4 As Global.System.Nullable(Of Date),  _
                    ByVal Original_CustomText5 As Global.System.Nullable(Of Date),  _
                    ByVal Original_Party_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_RecordStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_Co_ID, Original_Voucher_ID, Original_VoucherDetail_ID, COA_ID, Narration, DebitAmount, CreditAmount, Stamp_User_Id, Stamp_DateTime, Upload_DateTime, CustomDate1, CustomDate2, CustomDate3, CustomDate4, CustomDate5, CustomDecimal1, CustomDecimal2, CustomDecimal3, CustomDecimal4, CustomDecimal5, CustomText1, CustomText2, CustomText3, CustomText4, CustomText5, Party_ID, RecordStatus_ID, Original_Co_ID, Original_Voucher_ID, Original_VoucherDetail_ID, Original_COA_ID, Original_Narration, Original_DebitAmount, Original_CreditAmount, Original_Stamp_User_Id, Original_Stamp_DateTime, Original_Upload_DateTime, Original_CustomDate1, Original_CustomDate2, Original_CustomDate3, Original_CustomDate4, Original_CustomDate5, Original_CustomDecimal1, Original_CustomDecimal2, Original_CustomDecimal3, Original_CustomDecimal4, Original_CustomDecimal5, Original_CustomText1, Original_CustomText2, Original_CustomText3, Original_CustomText4, Original_CustomText5, Original_Party_ID, Original_RecordStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteAll(ByVal Co_Id As Short) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            command.Parameters(0).Value = CType(Co_Id,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewVoucherDetailIDByCoIDVoucherID(ByVal Co_ID As Short, ByVal Voucher_ID As Integer) As Global.System.Nullable(Of Short)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            command.Parameters(0).Value = CType(Co_ID,Short)
            command.Parameters(1).Value = CType(Voucher_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Short)
            Else
                Return New Global.System.Nullable(Of Short)(CType(returnValue,Short))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VoucherTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VoucherType"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("VoucherType_ID", "VoucherType_ID")
            tableMapping.ColumnMappings.Add("VoucherType_Code", "VoucherType_Code")
            tableMapping.ColumnMappings.Add("VoucherType_Desc", "VoucherType_Desc")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("Inactive_From", "Inactive_From")
            tableMapping.ColumnMappings.Add("Inactive_To", "Inactive_To")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Accounting_VoucherType] WHERE (([Co_ID] = @Original_Co_ID) AND ([Vou"& _ 
                "cherType_ID] = @Original_VoucherType_ID) AND ([VoucherType_Code] = @Original_Vou"& _ 
                "cherType_Code) AND ([VoucherType_Desc] = @Original_VoucherType_Desc) AND ([Stamp"& _ 
                "_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTime] = @Original_Stamp_DateT"& _ 
                "ime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Uploa"& _ 
                "d_DateTime] = @Original_Upload_DateTime)) AND ((@IsNull_Inactive_From = 1 AND [I"& _ 
                "nactive_From] IS NULL) OR ([Inactive_From] = @Original_Inactive_From)) AND ((@Is"& _ 
                "Null_Inactive_To = 1 AND [Inactive_To] IS NULL) OR ([Inactive_To] = @Original_In"& _ 
                "active_To)) AND ((@IsNull_RecordStatus_ID = 1 AND [RecordStatus_ID] IS NULL) OR "& _ 
                "([RecordStatus_ID] = @Original_RecordStatus_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherType_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherType_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_From", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_To", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Accounting_VoucherType] ([Co_ID], [VoucherType_ID], [VoucherType_Cod"& _ 
                "e], [VoucherType_Desc], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime], [In"& _ 
                "active_From], [Inactive_To], [RecordStatus_ID]) VALUES (@Co_ID, @VoucherType_ID,"& _ 
                " @VoucherType_Code, @VoucherType_Desc, @Stamp_UserID, @Stamp_DateTime, @Upload_D"& _ 
                "ateTime, @Inactive_From, @Inactive_To, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Voucher"& _ 
                "Type_ID, VoucherType_Code, VoucherType_Desc, Stamp_UserID, Stamp_DateTime, Uploa"& _ 
                "d_DateTime, Inactive_From, Inactive_To, RecordStatus_ID FROM Accounting_VoucherT"& _ 
                "ype WHERE (Co_ID = @Co_ID) AND (VoucherType_ID = @VoucherType_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Accounting_VoucherType] SET [Co_ID] = @Co_ID, [VoucherType_ID] = @Voucher"& _ 
                "Type_ID, [VoucherType_Code] = @VoucherType_Code, [VoucherType_Desc] = @VoucherTy"& _ 
                "pe_Desc, [Stamp_UserID] = @Stamp_UserID, [Stamp_DateTime] = @Stamp_DateTime, [Up"& _ 
                "load_DateTime] = @Upload_DateTime, [Inactive_From] = @Inactive_From, [Inactive_T"& _ 
                "o] = @Inactive_To, [RecordStatus_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Origi"& _ 
                "nal_Co_ID) AND ([VoucherType_ID] = @Original_VoucherType_ID) AND ([VoucherType_C"& _ 
                "ode] = @Original_VoucherType_Code) AND ([VoucherType_Desc] = @Original_VoucherTy"& _ 
                "pe_Desc) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTime] = @"& _ 
                "Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateTime]"& _ 
                " IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ((@IsNull_Inac"& _ 
                "tive_From = 1 AND [Inactive_From] IS NULL) OR ([Inactive_From] = @Original_Inact"& _ 
                "ive_From)) AND ((@IsNull_Inactive_To = 1 AND [Inactive_To] IS NULL) OR ([Inactiv"& _ 
                "e_To] = @Original_Inactive_To)) AND ((@IsNull_RecordStatus_ID = 1 AND [RecordSta"& _ 
                "tus_ID] IS NULL) OR ([RecordStatus_ID] = @Original_RecordStatus_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT C"& _ 
                "o_ID, VoucherType_ID, VoucherType_Code, VoucherType_Desc, Stamp_UserID, Stamp_Da"& _ 
                "teTime, Upload_DateTime, Inactive_From, Inactive_To, RecordStatus_ID FROM Accoun"& _ 
                "ting_VoucherType WHERE (Co_ID = @Co_ID) AND (VoucherType_ID = @VoucherType_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherType_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_VoucherType_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_From", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_To", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(10) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, VoucherType_ID, VoucherType_Code, VoucherType_Desc, Stamp_UserI"& _ 
                "D, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Co_ID, VoucherType_ID, VoucherType_Code, VoucherType_Desc, Stamp_UserI"& _ 
                "D, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID ="& _ 
                " @CO_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     Co_ID, Inactive_From, Inactive_To, RecordStatus_ID, Stamp_DateTime, St"& _ 
                "amp_UserID, Upload_DateTime, VoucherType_Code, VoucherType_Desc, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         VoucherType_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID ="& _ 
                " @Co_ID OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      @Co_ID = 0) AND (Stamp_DateTime > @Stamp_DateT"& _ 
                "ime)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     Co_ID, Inactive_From, Inactive_To, RecordStatus_ID, Stamp_DateTime, St"& _ 
                "amp_UserID, Upload_DateTime, VoucherType_Code, VoucherType_Desc, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         VoucherType_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID ="& _ 
                " @Co_Id) AND (Upload_DateTime > @Upload_DateTime)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_Id", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     Co_ID, VoucherType_ID, VoucherType_Code, VoucherType_Desc, Stamp_UserI"& _ 
                "D, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"Where (Co_ID = @Co"& _ 
                "ID and voucherType_Code = @VoucherTypecode) and RecordStatus_ID <> 4"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherTypecode", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     Co_ID, Inactive_From, Inactive_To, RecordStatus_ID, Stamp_DateTime, St"& _ 
                "amp_UserID, Upload_DateTime, VoucherType_Code, VoucherType_Desc, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         VoucherType_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID ="& _ 
                " @Co_ID) AND (VoucherType_ID = @VoucherType_ID)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT    TOP (1)  Co_ID, VoucherType_ID, VoucherType_Code, VoucherType_Desc, Sta"& _ 
                "mp_UserID, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "    (Co_ID = @Co_ID) AND RecordStatus_ID <> 4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY VoucherType_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"-- R"& _ 
                "ecordStatus_ID = 4  Deleted"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT    TOP (1)  Co_ID, VoucherType_ID, VoucherType_Code, VoucherType_Desc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&", "& _ 
                "Stamp_UserID, Stamp_DateTime, Upload_DateTime, Inactive_From"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&", Inactive_To, Re"& _ 
                "cordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_I"& _ 
                "D) AND RecordStatus_ID <> 4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY VoucherType_ID DESC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"-- RecordStatus_I"& _ 
                "D = 4  Deleted"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT     ISNULL(MAX(VoucherType_ID), 0) + 1 AS VoucherType_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Acc"& _ 
                "ounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT    TOP (1)  Co_ID, VoucherType_ID, VoucherType_Code, VoucherType_Desc, Sta"& _ 
                "mp_UserID, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "    (Co_ID = @CO_ID) AND (VoucherType_ID > @VoucherType_ID) AND RecordStatus_ID "& _ 
                "<> 4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY VoucherType_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"-- RecordStatus_ID = 4 Deleted"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT    TOP (1)  Co_ID, VoucherType_ID, VoucherType_Code, VoucherType_Desc, Sta"& _ 
                "mp_UserID, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_VoucherType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "    (Co_ID = @Co_ID) AND (VoucherType_ID < @VoucherType_ID) AND RecordStatus_ID "& _ 
                "<> 4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY VoucherType_ID DESC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"-- RecordStatus_ID = 4  Deleted"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "VoucherType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllByCoID(ByVal CO_ID As Short) As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CO_ID,Short)
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUpdatedByCoIDDateTime(ByVal Co_ID As Short, ByVal Stamp_DateTime As Date) As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Stamp_DateTime,Date)
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUploadedByCoIDDateTime(ByVal Co_Id As Short, ByVal Upload_DateTime As Global.System.Nullable(Of Date)) As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_Id,Short)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetCoIDVoucherTypeCodeDuplicate(ByVal CoID As Integer, ByVal VoucherTypecode As String) As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            If (VoucherTypecode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VoucherTypecode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherTypecode,String)
            End If
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetCoIDVoucherTypeID(ByVal Co_ID As Short, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFirstByCoID(ByVal Co_ID As Integer) As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetLastByCoID(ByVal Co_ID As Integer) As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function GetNextByCoIDVoucherTypeID1(ByVal dataTable As QuickAccountingDataSet.VoucherTypeDataTable, ByVal CO_ID As Integer, ByVal VoucherType_ID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CO_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetNextByCoIDVoucherTypeID(ByVal CO_ID As Integer, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CO_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPreviousByCoIDVoucherTypeID(ByVal Co_ID As Integer, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.VoucherTypeDataTable = New QuickAccountingDataSet.VoucherTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickAccountingDataSet.VoucherTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickAccountingDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "VoucherType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_VoucherType_ID As Integer, ByVal Original_VoucherType_Code As String, ByVal Original_VoucherType_Desc As String, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_Inactive_From As Global.System.Nullable(Of Date), ByVal Original_Inactive_To As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_VoucherType_ID,Integer)
            If (Original_VoucherType_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VoucherType_Code")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_VoucherType_Code,String)
            End If
            If (Original_VoucherType_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VoucherType_Desc")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_VoucherType_Desc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_From.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Inactive_From.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_To.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Inactive_To.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_RecordStatus_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal VoucherType_ID As Integer, ByVal VoucherType_Code As String, ByVal VoucherType_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal Inactive_From As Global.System.Nullable(Of Date), ByVal Inactive_To As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            If (VoucherType_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VoucherType_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(VoucherType_Code,String)
            End If
            If (VoucherType_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VoucherType_Desc")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(VoucherType_Desc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Inactive_From.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Inactive_From.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Inactive_To.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Inactive_To.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (RecordStatus_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal VoucherType_ID As Integer,  _
                    ByVal VoucherType_Code As String,  _
                    ByVal VoucherType_Desc As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_VoucherType_ID As Integer,  _
                    ByVal Original_VoucherType_Code As String,  _
                    ByVal Original_VoucherType_Desc As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            If (VoucherType_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VoucherType_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(VoucherType_Code,String)
            End If
            If (VoucherType_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("VoucherType_Desc")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(VoucherType_Desc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Inactive_From.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Inactive_From.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Inactive_To.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Inactive_To.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (RecordStatus_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_VoucherType_ID,Integer)
            If (Original_VoucherType_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VoucherType_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_VoucherType_Code,String)
            End If
            If (Original_VoucherType_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_VoucherType_Desc")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_VoucherType_Desc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_From.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Inactive_From.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_To.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Inactive_To.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_RecordStatus_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal VoucherType_Code As String,  _
                    ByVal VoucherType_Desc As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_VoucherType_ID As Integer,  _
                    ByVal Original_VoucherType_Code As String,  _
                    ByVal Original_VoucherType_Desc As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_Co_ID, Original_VoucherType_ID, VoucherType_Code, VoucherType_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, RecordStatus_ID, Original_Co_ID, Original_VoucherType_ID, Original_VoucherType_Code, Original_VoucherType_Desc, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_Inactive_From, Original_Inactive_To, Original_RecordStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewVoucherTypeID(ByVal Co_ID As Short) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            command.Parameters(0).Value = CType(Co_ID,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class COATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "COA"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("COA_ID", "COA_ID")
            tableMapping.ColumnMappings.Add("COA_Code", "COA_Code")
            tableMapping.ColumnMappings.Add("COA_Desc", "COA_Desc")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("Inactive_From", "Inactive_From")
            tableMapping.ColumnMappings.Add("Inactive_To", "Inactive_To")
            tableMapping.ColumnMappings.Add("Parent_COA_ID", "Parent_COA_ID")
            tableMapping.ColumnMappings.Add("Level_No", "Level_No")
            tableMapping.ColumnMappings.Add("FinancialAccountType_ID", "FinancialAccountType_ID")
            tableMapping.ColumnMappings.Add("CashFlowAccount_ID", "CashFlowAccount_ID")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            tableMapping.ColumnMappings.Add("Opening_DebitAmount", "Opening_DebitAmount")
            tableMapping.ColumnMappings.Add("Opening_CreditAmount", "Opening_CreditAmount")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Accounting_COA] WHERE (([Co_ID] = @Original_Co_ID) AND ([COA_ID] = @"& _ 
                "Original_COA_ID) AND ([COA_Code] = @Original_COA_Code) AND ([COA_Desc] = @Origin"& _ 
                "al_COA_Desc) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTime]"& _ 
                " = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateT"& _ 
                "ime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ((@IsNull_"& _ 
                "Inactive_From = 1 AND [Inactive_From] IS NULL) OR ([Inactive_From] = @Original_I"& _ 
                "nactive_From)) AND ((@IsNull_Inactive_To = 1 AND [Inactive_To] IS NULL) OR ([Ina"& _ 
                "ctive_To] = @Original_Inactive_To)) AND ([Parent_COA_ID] = @Original_Parent_COA_"& _ 
                "ID) AND ((@IsNull_Level_No = 1 AND [Level_No] IS NULL) OR ([Level_No] = @Origina"& _ 
                "l_Level_No)) AND ((@IsNull_FinancialAccountType_ID = 1 AND [FinancialAccountType"& _ 
                "_ID] IS NULL) OR ([FinancialAccountType_ID] = @Original_FinancialAccountType_ID)"& _ 
                ") AND ((@IsNull_CashFlowAccount_ID = 1 AND [CashFlowAccount_ID] IS NULL) OR ([Ca"& _ 
                "shFlowAccount_ID] = @Original_CashFlowAccount_ID)) AND ((@IsNull_RecordStatus_ID"& _ 
                " = 1 AND [RecordStatus_ID] IS NULL) OR ([RecordStatus_ID] = @Original_RecordStat"& _ 
                "us_ID)) AND ((@IsNull_Opening_DebitAmount = 1 AND [Opening_DebitAmount] IS NULL)"& _ 
                " OR ([Opening_DebitAmount] = @Original_Opening_DebitAmount)) AND ((@IsNull_Openi"& _ 
                "ng_CreditAmount = 1 AND [Opening_CreditAmount] IS NULL) OR ([Opening_CreditAmoun"& _ 
                "t] = @Original_Opening_CreditAmount)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COA_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COA_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_From", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_To", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Parent_COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Parent_COA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Level_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Level_No", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinancialAccountType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinancialAccountType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CashFlowAccount_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CashFlowAccount_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Opening_DebitAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Opening_DebitAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Opening_DebitAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Opening_DebitAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Opening_CreditAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Opening_CreditAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Opening_CreditAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Opening_CreditAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Accounting_COA] ([Co_ID], [COA_ID], [COA_Code], [COA_Desc], [Stamp_U"& _ 
                "serID], [Stamp_DateTime], [Upload_DateTime], [Inactive_From], [Inactive_To], [Pa"& _ 
                "rent_COA_ID], [Level_No], [FinancialAccountType_ID], [CashFlowAccount_ID], [Reco"& _ 
                "rdStatus_ID], [Opening_DebitAmount], [Opening_CreditAmount]) VALUES (@Co_ID, @CO"& _ 
                "A_ID, @COA_Code, @COA_Desc, @Stamp_UserID, @Stamp_DateTime, @Upload_DateTime, @I"& _ 
                "nactive_From, @Inactive_To, @Parent_COA_ID, @Level_No, @FinancialAccountType_ID,"& _ 
                " @CashFlowAccount_ID, @RecordStatus_ID, @Opening_DebitAmount, @Opening_CreditAmo"& _ 
                "unt);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, COA_ID, COA_Code, COA_Desc, Stamp_UserID, Stamp_DateTime, U"& _ 
                "pload_DateTime, Inactive_From, Inactive_To, Parent_COA_ID, Level_No, FinancialAc"& _ 
                "countType_ID, CashFlowAccount_ID, RecordStatus_ID, Opening_DebitAmount, Opening_"& _ 
                "CreditAmount FROM Accounting_COA WHERE (COA_ID = @COA_ID) AND (Co_ID = @Co_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parent_COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Parent_COA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Level_No", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinancialAccountType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CashFlowAccount_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Opening_DebitAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Opening_DebitAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Opening_CreditAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Opening_CreditAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Accounting_COA] SET [Co_ID] = @Co_ID, [COA_ID] = @COA_ID, [COA_Code] = @C"& _ 
                "OA_Code, [COA_Desc] = @COA_Desc, [Stamp_UserID] = @Stamp_UserID, [Stamp_DateTime"& _ 
                "] = @Stamp_DateTime, [Upload_DateTime] = @Upload_DateTime, [Inactive_From] = @In"& _ 
                "active_From, [Inactive_To] = @Inactive_To, [Parent_COA_ID] = @Parent_COA_ID, [Le"& _ 
                "vel_No] = @Level_No, [FinancialAccountType_ID] = @FinancialAccountType_ID, [Cash"& _ 
                "FlowAccount_ID] = @CashFlowAccount_ID, [RecordStatus_ID] = @RecordStatus_ID, [Op"& _ 
                "ening_DebitAmount] = @Opening_DebitAmount, [Opening_CreditAmount] = @Opening_Cre"& _ 
                "ditAmount WHERE (([Co_ID] = @Original_Co_ID) AND ([COA_ID] = @Original_COA_ID) A"& _ 
                "ND ([COA_Code] = @Original_COA_Code) AND ([COA_Desc] = @Original_COA_Desc) AND ("& _ 
                "[Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTime] = @Original_Stamp"& _ 
                "_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ("& _ 
                "[Upload_DateTime] = @Original_Upload_DateTime)) AND ((@IsNull_Inactive_From = 1 "& _ 
                "AND [Inactive_From] IS NULL) OR ([Inactive_From] = @Original_Inactive_From)) AND"& _ 
                " ((@IsNull_Inactive_To = 1 AND [Inactive_To] IS NULL) OR ([Inactive_To] = @Origi"& _ 
                "nal_Inactive_To)) AND ([Parent_COA_ID] = @Original_Parent_COA_ID) AND ((@IsNull_"& _ 
                "Level_No = 1 AND [Level_No] IS NULL) OR ([Level_No] = @Original_Level_No)) AND ("& _ 
                "(@IsNull_FinancialAccountType_ID = 1 AND [FinancialAccountType_ID] IS NULL) OR ("& _ 
                "[FinancialAccountType_ID] = @Original_FinancialAccountType_ID)) AND ((@IsNull_Ca"& _ 
                "shFlowAccount_ID = 1 AND [CashFlowAccount_ID] IS NULL) OR ([CashFlowAccount_ID] "& _ 
                "= @Original_CashFlowAccount_ID)) AND ((@IsNull_RecordStatus_ID = 1 AND [RecordSt"& _ 
                "atus_ID] IS NULL) OR ([RecordStatus_ID] = @Original_RecordStatus_ID)) AND ((@IsN"& _ 
                "ull_Opening_DebitAmount = 1 AND [Opening_DebitAmount] IS NULL) OR ([Opening_Debi"& _ 
                "tAmount] = @Original_Opening_DebitAmount)) AND ((@IsNull_Opening_CreditAmount = "& _ 
                "1 AND [Opening_CreditAmount] IS NULL) OR ([Opening_CreditAmount] = @Original_Ope"& _ 
                "ning_CreditAmount)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, COA_ID, COA_Code, COA_Desc, Stamp_UserID, S"& _ 
                "tamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, Parent_COA_ID, Level"& _ 
                "_No, FinancialAccountType_ID, CashFlowAccount_ID, RecordStatus_ID, Opening_Debit"& _ 
                "Amount, Opening_CreditAmount FROM Accounting_COA WHERE (COA_ID = @COA_ID) AND (C"& _ 
                "o_ID = @Co_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parent_COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Parent_COA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Level_No", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinancialAccountType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CashFlowAccount_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Opening_DebitAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Opening_DebitAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Opening_CreditAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Opening_CreditAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COA_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_COA_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_From", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_To", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Parent_COA_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Parent_COA_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Level_No", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_No", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Level_No", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinancialAccountType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinancialAccountType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CashFlowAccount_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CashFlowAccount_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Opening_DebitAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Opening_DebitAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Opening_DebitAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Opening_DebitAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Opening_CreditAmount", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Opening_CreditAmount", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Opening_CreditAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Opening_CreditAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(18) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, COA_ID, COA_Code, COA_Desc, Stamp_UserID, Stamp_DateTime, Uploa"& _ 
                "d_DateTime, Inactive_From, Inactive_To, Parent_COA_ID, Level_No, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         FinancialAccountType_ID, CashFlowAccount_ID, RecordStatus_ID, Opening_D"& _ 
                "ebitAmount, Opening_CreditAmount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_COA"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&", Co_ID, FinancialAccount"& _ 
                "Type_ID, Inactive_From, Inactive_To"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&", Level_No, Opening_CreditAmount, Opening_"& _ 
                "DebitAmount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&", Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&","& _ 
                " Upload_DateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Accounting_COA"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Co_ID = @CO_ID) AND (Level_No "& _ 
                "<= @Level_No) AND (RecordStatus_ID <> 4)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Level_No", Global.System.Data.SqlDbType.TinyInt, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (COA_Code LIKE @CoaCode) AND (Co_ID = @CoID) OR ("& _ 
                "Co_ID = @CoID) AND (COA_Desc LIKE @COA_Desc)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoaCode", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_Desc", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (Co_ID = @Co_ID OR @Co_ID = 0) AND (Stamp_DateTim"& _ 
                "e > @Stamp_DateTime)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (Co_ID = @Co_Id) AND (Upload_DateTime > @Upload_D"& _ 
                "ateTime)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_Id", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (Co_ID = @CoID) AND (COA_Code LIKE @COACode)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COACode", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (Co_ID = @Co_ID)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (Co_ID = @CoID) AND (COA_Code = @COACode)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COACode", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (Co_ID = @Co_ID) AND (COA_ID = @COA_ID)"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (Co_ID = @Co_ID) AND (COA_ID = @COA_ID)"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (Co_ID = @CoID) AND (COA_Code = @COACode)"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COACode", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(11) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(11).Connection = Me.Connection
            Me._commandCollection(11).CommandText = "SELECT TOP (1) COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAc"& _ 
                "countType_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Openin"& _ 
                "g_DebitAmount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upl"& _ 
                "oad_DateTime FROM Accounting_COA WHERE (Co_ID = @CO_ID) AND (RecordStatus_ID <> "& _ 
                "4) ORDER BY COA_Code"
            Me._commandCollection(11).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(11).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(12) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(12).Connection = Me.Connection
            Me._commandCollection(12).CommandText = "SELECT TOP (1) COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAc"& _ 
                "countType_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Openin"& _ 
                "g_DebitAmount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upl"& _ 
                "oad_DateTime FROM Accounting_COA WHERE (Co_ID = @CO_ID) AND (RecordStatus_ID <> "& _ 
                "4) ORDER BY COA_Code DESC"
            Me._commandCollection(12).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(12).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(13).Connection = Me.Connection
            Me._commandCollection(13).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (COA_Code = @COACode) AND (Co_ID = @CoID)"
            Me._commandCollection(13).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COACode", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(13).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(14).Connection = Me.Connection
            Me._commandCollection(14).CommandText = "SELECT COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAccountTyp"& _ 
                "e_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Opening_DebitA"& _ 
                "mount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_Date"& _ 
                "Time FROM Accounting_COA WHERE (COA_Code LIKE @CoaCode) AND (Co_ID = @CoID) OR ("& _ 
                "Co_ID = @CoID) AND (COA_Desc LIKE @COA_Desc)"
            Me._commandCollection(14).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoaCode", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_Desc", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(14).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(15).Connection = Me.Connection
            Me._commandCollection(15).CommandText = "SELECT MAX(COA_Code) FROM Accounting_COA WHERE Level_No = @Level_No and CO_ID=@Co"& _ 
                "Id"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" AND SUBSTRING(COA_Code, 1, CONVERT(INT, @Length)) = @ParentString"
            Me._commandCollection(15).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Level_No", Global.System.Data.SqlDbType.TinyInt, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Level_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoId", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Length", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(15).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParentString", Global.System.Data.SqlDbType.VarChar, 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(16) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(16).Connection = Me.Connection
            Me._commandCollection(16).CommandText = "SELECT     ISNULL(MAX(COA_ID), 0) + 1 AS COA_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_COA"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE     (CO_ID = @CO_ID)"
            Me._commandCollection(16).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(16).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(17) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(17).Connection = Me.Connection
            Me._commandCollection(17).CommandText = "SELECT TOP (1) COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAc"& _ 
                "countType_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Openin"& _ 
                "g_DebitAmount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upl"& _ 
                "oad_DateTime FROM Accounting_COA WHERE (Co_ID = @Co_ID) AND (COA_Code > @COA_Cod"& _ 
                "e) AND (RecordStatus_ID <> 4) ORDER BY COA_Code"
            Me._commandCollection(17).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(17).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(17).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_Code", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(18) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(18).Connection = Me.Connection
            Me._commandCollection(18).CommandText = "SELECT TOP (1) COA_Code, COA_Desc, COA_ID, CashFlowAccount_ID, Co_ID, FinancialAc"& _ 
                "countType_ID, Inactive_From, Inactive_To, Level_No, Opening_CreditAmount, Openin"& _ 
                "g_DebitAmount, Parent_COA_ID, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upl"& _ 
                "oad_DateTime FROM Accounting_COA WHERE (Co_ID = @CO_ID) AND (COA_Code < @COA_Cod"& _ 
                "e) AND (RecordStatus_ID <> 4) ORDER BY COA_Code DESC"
            Me._commandCollection(18).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(18).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(18).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COA_Code", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "COA_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllByCoIDUptoLevelNo(ByVal CO_ID As Integer, ByVal Level_No As Global.System.Nullable(Of Integer)) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CO_ID,Integer)
            If (Level_No.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Level_No.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllLikeCoaCodeCoaDesc(ByVal CoaCode As String, ByVal COA_Desc As String, ByVal CoID As Integer) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CoaCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CoaCode")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoaCode,String)
            End If
            If (COA_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COA_Desc")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COA_Desc,String)
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(CoID,Integer)
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUpdatedByCoIDDateTime(ByVal Co_ID As Short, ByVal Stamp_DateTime As Date) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Stamp_DateTime,Date)
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUploadedByCoIDDateTime(ByVal Co_Id As Short, ByVal Upload_DateTime As Global.System.Nullable(Of Date)) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_Id,Short)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCOACodeChilds(ByVal CoID As Integer, ByVal COACode As String) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            If (COACode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COACode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COACode,String)
            End If
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoID(ByVal Co_ID As Short) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Short)
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDCOACode(ByVal CoID As Integer, ByVal COACode As String) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            If (COACode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COACode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COACode,String)
            End If
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDCoaID(ByVal Co_ID As Integer, ByVal COA_ID As Integer) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(COA_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetCOAIDbyCoaCode(ByVal CoID As Integer, ByVal COACode As String) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            If (COACode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COACode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COACode,String)
            End If
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFirst(ByVal CO_ID As Integer) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(11)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CO_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetLast(ByVal CO_ID As Integer) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(12)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CO_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetMatchingCOACodeRow(ByVal COACode As String, ByVal CoID As Integer) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(13)
            If (COACode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COACode")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(COACode,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(CoID,Integer)
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetMatchingTextRow(ByVal CoaCode As String, ByVal COA_Desc As String, ByVal CoID As Integer) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(14)
            If (CoaCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CoaCode")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoaCode,String)
            End If
            If (COA_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COA_Desc")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COA_Desc,String)
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(CoID,Integer)
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetNextByCoIdCoaId(ByVal Co_ID As Integer, ByVal COA_Code As String) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(17)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            If (COA_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COA_Code")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COA_Code,String)
            End If
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPreviousByCoIdCoaCode(ByVal CO_ID As Integer, ByVal COA_Code As String) As QuickAccountingDataSet.COADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(18)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CO_ID,Integer)
            If (COA_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COA_Code")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(COA_Code,String)
            End If
            Dim dataTable As QuickAccountingDataSet.COADataTable = New QuickAccountingDataSet.COADataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickAccountingDataSet.COADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickAccountingDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "COA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_COA_ID As Integer,  _
                    ByVal Original_COA_Code As String,  _
                    ByVal Original_COA_Desc As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Original_Parent_COA_ID As Integer,  _
                    ByVal Original_Level_No As Global.System.Nullable(Of Byte),  _
                    ByVal Original_FinancialAccountType_ID As Global.System.Nullable(Of Short),  _
                    ByVal Original_CashFlowAccount_ID As Global.System.Nullable(Of Short),  _
                    ByVal Original_RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Opening_DebitAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Opening_CreditAmount As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_COA_ID,Integer)
            If (Original_COA_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COA_Code")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_COA_Code,String)
            End If
            If (Original_COA_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COA_Desc")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_COA_Desc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_From.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Inactive_From.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_To.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Inactive_To.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Parent_COA_ID,Integer)
            If (Original_Level_No.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Level_No.Value,Byte)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_FinancialAccountType_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_FinancialAccountType_ID.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_CashFlowAccount_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CashFlowAccount_ID.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_RecordStatus_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Opening_DebitAmount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Opening_DebitAmount.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_Opening_CreditAmount.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Opening_CreditAmount.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Co_ID As Short,  _
                    ByVal COA_ID As Integer,  _
                    ByVal COA_Code As String,  _
                    ByVal COA_Desc As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Parent_COA_ID As Integer,  _
                    ByVal Level_No As Global.System.Nullable(Of Byte),  _
                    ByVal FinancialAccountType_ID As Global.System.Nullable(Of Short),  _
                    ByVal CashFlowAccount_ID As Global.System.Nullable(Of Short),  _
                    ByVal RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Opening_DebitAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Opening_CreditAmount As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(COA_ID,Integer)
            If (COA_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COA_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(COA_Code,String)
            End If
            If (COA_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COA_Desc")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(COA_Desc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Inactive_From.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Inactive_From.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Inactive_To.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Inactive_To.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Parent_COA_ID,Integer)
            If (Level_No.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Level_No.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (FinancialAccountType_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(FinancialAccountType_ID.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CashFlowAccount_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CashFlowAccount_ID.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RecordStatus_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Opening_DebitAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Opening_DebitAmount.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Opening_CreditAmount.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Opening_CreditAmount.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal COA_ID As Integer,  _
                    ByVal COA_Code As String,  _
                    ByVal COA_Desc As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Parent_COA_ID As Integer,  _
                    ByVal Level_No As Global.System.Nullable(Of Byte),  _
                    ByVal FinancialAccountType_ID As Global.System.Nullable(Of Short),  _
                    ByVal CashFlowAccount_ID As Global.System.Nullable(Of Short),  _
                    ByVal RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Opening_DebitAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Opening_CreditAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_COA_ID As Integer,  _
                    ByVal Original_COA_Code As String,  _
                    ByVal Original_COA_Desc As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Original_Parent_COA_ID As Integer,  _
                    ByVal Original_Level_No As Global.System.Nullable(Of Byte),  _
                    ByVal Original_FinancialAccountType_ID As Global.System.Nullable(Of Short),  _
                    ByVal Original_CashFlowAccount_ID As Global.System.Nullable(Of Short),  _
                    ByVal Original_RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Opening_DebitAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Opening_CreditAmount As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(COA_ID,Integer)
            If (COA_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COA_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(COA_Code,String)
            End If
            If (COA_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("COA_Desc")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(COA_Desc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Inactive_From.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Inactive_From.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Inactive_To.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Inactive_To.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Parent_COA_ID,Integer)
            If (Level_No.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Level_No.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (FinancialAccountType_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(FinancialAccountType_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CashFlowAccount_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CashFlowAccount_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (RecordStatus_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Opening_DebitAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Opening_DebitAmount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Opening_CreditAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Opening_CreditAmount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_COA_ID,Integer)
            If (Original_COA_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COA_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_COA_Code,String)
            End If
            If (Original_COA_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_COA_Desc")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_COA_Desc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_From.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Inactive_From.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_To.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Inactive_To.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Parent_COA_ID,Integer)
            If (Original_Level_No.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Level_No.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_FinancialAccountType_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_FinancialAccountType_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_CashFlowAccount_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_CashFlowAccount_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_RecordStatus_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_RecordStatus_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_Opening_DebitAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Opening_DebitAmount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_Opening_CreditAmount.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Opening_CreditAmount.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal COA_Code As String,  _
                    ByVal COA_Desc As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Parent_COA_ID As Integer,  _
                    ByVal Level_No As Global.System.Nullable(Of Byte),  _
                    ByVal FinancialAccountType_ID As Global.System.Nullable(Of Short),  _
                    ByVal CashFlowAccount_ID As Global.System.Nullable(Of Short),  _
                    ByVal RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Opening_DebitAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Opening_CreditAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_COA_ID As Integer,  _
                    ByVal Original_COA_Code As String,  _
                    ByVal Original_COA_Desc As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Original_Parent_COA_ID As Integer,  _
                    ByVal Original_Level_No As Global.System.Nullable(Of Byte),  _
                    ByVal Original_FinancialAccountType_ID As Global.System.Nullable(Of Short),  _
                    ByVal Original_CashFlowAccount_ID As Global.System.Nullable(Of Short),  _
                    ByVal Original_RecordStatus_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Opening_DebitAmount As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_Opening_CreditAmount As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(Original_Co_ID, Original_COA_ID, COA_Code, COA_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, Inactive_From, Inactive_To, Parent_COA_ID, Level_No, FinancialAccountType_ID, CashFlowAccount_ID, RecordStatus_ID, Opening_DebitAmount, Opening_CreditAmount, Original_Co_ID, Original_COA_ID, Original_COA_Code, Original_COA_Desc, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_Inactive_From, Original_Inactive_To, Original_Parent_COA_ID, Original_Level_No, Original_FinancialAccountType_ID, Original_CashFlowAccount_ID, Original_RecordStatus_ID, Original_Opening_DebitAmount, Original_Opening_CreditAmount)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCOACodeByCoIDCOAID(ByVal Co_ID As Integer, ByVal COA_ID As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(9)
            command.Parameters(0).Value = CType(Co_ID,Integer)
            command.Parameters(1).Value = CType(COA_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetMaxCOACodeByStringPattern1(ByVal Level_No As Global.System.Nullable(Of Integer), ByVal CoId As Integer, ByVal Length As Decimal, ByVal ParentString As String) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(15)
            If (Level_No.HasValue = true) Then
                command.Parameters(0).Value = CType(Level_No.Value,Integer)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            command.Parameters(1).Value = CType(CoId,Integer)
            command.Parameters(2).Value = CType(Length,Decimal)
            If (ParentString Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ParentString")
            Else
                command.Parameters(3).Value = CType(ParentString,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewCoaIdByCoId(ByVal CO_ID As Short) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(16)
            command.Parameters(0).Value = CType(CO_ID,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FinancialAccountTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FinancialAccountType"
            tableMapping.ColumnMappings.Add("FinancialAccountType_ID", "FinancialAccountType_ID")
            tableMapping.ColumnMappings.Add("FinancialAccountType_Desc", "FinancialAccountType_Desc")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Accounting_FinancialAccountType] WHERE (([Co_ID] = @Original_Co_ID) "& _ 
                "AND ([FinancialAccountType_ID] = @Original_FinancialAccountType_ID) AND ([Financ"& _ 
                "ialAccountType_Desc] = @Original_FinancialAccountType_Desc) AND ((@IsNull_Stamp_"& _ 
                "UserID = 1 AND [Stamp_UserID] IS NULL) OR ([Stamp_UserID] = @Original_Stamp_User"& _ 
                "ID)) AND ((@IsNull_Stamp_DateTime = 1 AND [Stamp_DateTime] IS NULL) OR ([Stamp_D"& _ 
                "ateTime] = @Original_Stamp_DateTime)) AND ((@IsNull_Upload_DateTime = 1 AND [Upl"& _ 
                "oad_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ("& _ 
                "(@IsNull_RecordStatus_ID = 1 AND [RecordStatus_ID] IS NULL) OR ([RecordStatus_ID"& _ 
                "] = @Original_RecordStatus_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinancialAccountType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinancialAccountType_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stamp_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Accounting_FinancialAccountType] ([Co_ID], [FinancialAccountType_ID]"& _ 
                ", [FinancialAccountType_Desc], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTim"& _ 
                "e], [RecordStatus_ID]) VALUES (@Co_ID, @FinancialAccountType_ID, @FinancialAccou"& _ 
                "ntType_Desc, @Stamp_UserID, @Stamp_DateTime, @Upload_DateTime, @RecordStatus_ID)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, FinancialAccountType_ID, FinancialAccountType_Desc, Stamp_UserI"& _ 
                "D, Stamp_DateTime, Upload_DateTime, RecordStatus_ID FROM Accounting_FinancialAcc"& _ 
                "ountType WHERE (Co_ID = @Co_ID) AND (FinancialAccountType_ID = @FinancialAccount"& _ 
                "Type_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinancialAccountType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinancialAccountType_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Accounting_FinancialAccountType] SET [Co_ID] = @Co_ID, [FinancialAccountT"& _ 
                "ype_ID] = @FinancialAccountType_ID, [FinancialAccountType_Desc] = @FinancialAcco"& _ 
                "untType_Desc, [Stamp_UserID] = @Stamp_UserID, [Stamp_DateTime] = @Stamp_DateTime"& _ 
                ", [Upload_DateTime] = @Upload_DateTime, [RecordStatus_ID] = @RecordStatus_ID WHE"& _ 
                "RE (([Co_ID] = @Original_Co_ID) AND ([FinancialAccountType_ID] = @Original_Finan"& _ 
                "cialAccountType_ID) AND ([FinancialAccountType_Desc] = @Original_FinancialAccoun"& _ 
                "tType_Desc) AND ((@IsNull_Stamp_UserID = 1 AND [Stamp_UserID] IS NULL) OR ([Stam"& _ 
                "p_UserID] = @Original_Stamp_UserID)) AND ((@IsNull_Stamp_DateTime = 1 AND [Stamp"& _ 
                "_DateTime] IS NULL) OR ([Stamp_DateTime] = @Original_Stamp_DateTime)) AND ((@IsN"& _ 
                "ull_Upload_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @"& _ 
                "Original_Upload_DateTime)) AND ((@IsNull_RecordStatus_ID = 1 AND [RecordStatus_I"& _ 
                "D] IS NULL) OR ([RecordStatus_ID] = @Original_RecordStatus_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID,"& _ 
                " FinancialAccountType_ID, FinancialAccountType_Desc, Stamp_UserID, Stamp_DateTim"& _ 
                "e, Upload_DateTime, RecordStatus_ID FROM Accounting_FinancialAccountType WHERE ("& _ 
                "Co_ID = @Co_ID) AND (FinancialAccountType_ID = @FinancialAccountType_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinancialAccountType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinancialAccountType_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinancialAccountType_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinancialAccountType_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stamp_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Co_ID, FinancialAccountType_ID, FinancialAccountType_Desc, Stamp_UserID, S"& _ 
                "tamp_DateTime, Upload_DateTime, RecordStatus_ID FROM Accounting_FinancialAccount"& _ 
                "Type"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT    TOP (1)  Co_ID, FinancialAccountType_ID, FinancialAccountType_Desc, Sta"& _ 
                "mp_UserID,                                       Stamp_DateTime, Upload_DateTime"& _ 
                ", RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_FinancialAccountType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co"& _ 
                "_ID = @Co_ID) and (RecordStatus_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY FinancialAccountType_ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT    TOP (1)  Co_ID, FinancialAccountType_ID, FinancialAccountType_Desc, Sta"& _ 
                "mp_UserID,                                       Stamp_DateTime, Upload_DateTime"& _ 
                ", RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_FinancialAccountType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co"& _ 
                "_ID = @Co_ID) and (RecordStatus_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY FinancialAccountType_ID Des"& _ 
                "c"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     ISNULL(MAX(FinancialAccountType_ID), 0) + 1 "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_"& _ 
                "FinancialAccountType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CO_ID = @CO_ID)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT    TOP (1)  Co_ID, FinancialAccountType_ID, FinancialAccountType_Desc, Sta"& _ 
                "mp_UserID,                                         Stamp_DateTime, Upload_DateTi"& _ 
                "me, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_FinancialAccountType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     ("& _ 
                "Co_ID = @Co_ID) AND (FinancialAccountType_ID > @VoucherType_ID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "     AND (RecordStatus_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY FinancialAccountType_ID "
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT    TOP (1)  Co_ID, FinancialAccountType_ID, FinancialAccountType_Desc, Sta"& _ 
                "mp_UserID,                                         Stamp_DateTime, Upload_DateTi"& _ 
                "me, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_FinancialAccountType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     ("& _ 
                "Co_ID = @Co_ID) AND (FinancialAccountType_ID < @VoucherType_ID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "     AND (RecordStatus_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY FinancialAccountType_ID DESC"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "FinancialAccountType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickAccountingDataSet.FinancialAccountTypeDataTable = New QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFirstByCoID(ByVal Co_ID As Integer) As QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.FinancialAccountTypeDataTable = New QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetLastByCoID(ByVal Co_ID As Integer) As QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.FinancialAccountTypeDataTable = New QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetNextByCoIDFinancialAccountTypeID(ByVal Co_ID As Integer, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.FinancialAccountTypeDataTable = New QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPreviousByCoIDFinancialAccountTypeId(ByVal Co_ID As Integer, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.FinancialAccountTypeDataTable = New QuickAccountingDataSet.FinancialAccountTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickAccountingDataSet.FinancialAccountTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickAccountingDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FinancialAccountType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewFinancialAccountTypeIDByCoID(ByVal CO_ID As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(CO_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CashFlowAccountTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CashFlowAccount"
            tableMapping.ColumnMappings.Add("CashFlowAccount_ID", "CashFlowAccount_ID")
            tableMapping.ColumnMappings.Add("CashFlowAccount_Desc", "CashFlowAccount_Desc")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Accounting_CashFlowAccount] WHERE (([Co_ID] = @Original_Co_ID) AND ("& _ 
                "[CashFlowAccount_ID] = @Original_CashFlowAccount_ID) AND ([CashFlowAccount_Desc]"& _ 
                " = @Original_CashFlowAccount_Desc) AND ((@IsNull_Stamp_UserID = 1 AND [Stamp_Use"& _ 
                "rID] IS NULL) OR ([Stamp_UserID] = @Original_Stamp_UserID)) AND ((@IsNull_Stamp_"& _ 
                "DateTime = 1 AND [Stamp_DateTime] IS NULL) OR ([Stamp_DateTime] = @Original_Stam"& _ 
                "p_DateTime)) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateTime] IS NULL) OR"& _ 
                " ([Upload_DateTime] = @Original_Upload_DateTime)) AND ((@IsNull_RecordStatus_ID "& _ 
                "= 1 AND [RecordStatus_ID] IS NULL) OR ([RecordStatus_ID] = @Original_RecordStatu"& _ 
                "s_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CashFlowAccount_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CashFlowAccount_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stamp_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Accounting_CashFlowAccount] ([Co_ID], [CashFlowAccount_ID], [CashFlo"& _ 
                "wAccount_Desc], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime], [RecordStat"& _ 
                "us_ID]) VALUES (@Co_ID, @CashFlowAccount_ID, @CashFlowAccount_Desc, @Stamp_UserI"& _ 
                "D, @Stamp_DateTime, @Upload_DateTime, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, CashFlow"& _ 
                "Account_ID, CashFlowAccount_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime,"& _ 
                " RecordStatus_ID FROM Accounting_CashFlowAccount WHERE (CashFlowAccount_ID = @Ca"& _ 
                "shFlowAccount_ID) AND (Co_ID = @Co_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CashFlowAccount_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CashFlowAccount_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Accounting_CashFlowAccount] SET [Co_ID] = @Co_ID, [CashFlowAccount_ID] = "& _ 
                "@CashFlowAccount_ID, [CashFlowAccount_Desc] = @CashFlowAccount_Desc, [Stamp_User"& _ 
                "ID] = @Stamp_UserID, [Stamp_DateTime] = @Stamp_DateTime, [Upload_DateTime] = @Up"& _ 
                "load_DateTime, [RecordStatus_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Original_"& _ 
                "Co_ID) AND ([CashFlowAccount_ID] = @Original_CashFlowAccount_ID) AND ([CashFlowA"& _ 
                "ccount_Desc] = @Original_CashFlowAccount_Desc) AND ((@IsNull_Stamp_UserID = 1 AN"& _ 
                "D [Stamp_UserID] IS NULL) OR ([Stamp_UserID] = @Original_Stamp_UserID)) AND ((@I"& _ 
                "sNull_Stamp_DateTime = 1 AND [Stamp_DateTime] IS NULL) OR ([Stamp_DateTime] = @O"& _ 
                "riginal_Stamp_DateTime)) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateTime]"& _ 
                " IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ((@IsNull_Reco"& _ 
                "rdStatus_ID = 1 AND [RecordStatus_ID] IS NULL) OR ([RecordStatus_ID] = @Original"& _ 
                "_RecordStatus_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, CashFlowAccount_ID, CashFlowAccount_Desc, St"& _ 
                "amp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID FROM Accounting_Cas"& _ 
                "hFlowAccount WHERE (CashFlowAccount_ID = @CashFlowAccount_ID) AND (Co_ID = @Co_I"& _ 
                "D)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CashFlowAccount_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CashFlowAccount_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CashFlowAccount_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CashFlowAccount_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Stamp_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Co_ID, CashFlowAccount_ID, CashFlowAccount_Desc, Stamp_UserID, Stamp_DateT"& _ 
                "ime, Upload_DateTime, RecordStatus_ID FROM Accounting_CashFlowAccount"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT    TOP (1)  Co_ID, CashFlowAccount_ID, CashFlowAccount_Desc, Stamp_UserID,"& _ 
                "                                       Stamp_DateTime, Upload_DateTime, RecordSt"& _ 
                "atus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_CashFlowAccount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID) a"& _ 
                "nd (RecordStatus_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY CashFlowAccount_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT    TOP (1)  Co_ID, CashFlowAccount_ID, CashFlowAccount_Desc, Stamp_UserID,"& _ 
                "                                       Stamp_DateTime, Upload_DateTime, RecordSt"& _ 
                "atus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_CashFlowAccount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID) a"& _ 
                "nd (RecordStatus_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY CashFlowAccount_ID Desc"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     ISNULL(MAX(CashFlowAccount_ID), 0) + 1 "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_CashF"& _ 
                "lowAccount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CO_ID = @CO_ID)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT    TOP (1)  Co_ID, CashFlowAccount_ID, CashFlowAccount_Desc, Stamp_UserID,"& _ 
                "                                         Stamp_DateTime, Upload_DateTime, Record"& _ 
                "Status_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_CashFlowAccount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID)"& _ 
                " AND (CashFlowAccount_ID > @VoucherType_ID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    AND (RecordStat"& _ 
                "us_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY CashFlowAccount_ID "
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT    TOP (1)  Co_ID, CashFlowAccount_ID, CashFlowAccount_Desc, Stamp_UserID,"& _ 
                "                                         Stamp_DateTime, Upload_DateTime, Record"& _ 
                "Status_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Accounting_CashFlowAccount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID)"& _ 
                " AND (CashFlowAccount_ID < @VoucherType_ID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    AND (RecordStat"& _ 
                "us_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY CashFlowAccount_ID DESC"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VoucherType_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "CashFlowAccount_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickAccountingDataSet.CashFlowAccountDataTable = New QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFirstByCoID(ByVal Co_ID As Integer) As QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.CashFlowAccountDataTable = New QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetLastByCoID(ByVal Co_ID As Integer) As QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.CashFlowAccountDataTable = New QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetNextByCoIDCashFlowAccountID(ByVal Co_ID As Integer, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.CashFlowAccountDataTable = New QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPreviousByCoIDCashFlowAccountID(ByVal Co_ID As Integer, ByVal VoucherType_ID As Integer) As QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(VoucherType_ID,Integer)
            Dim dataTable As QuickAccountingDataSet.CashFlowAccountDataTable = New QuickAccountingDataSet.CashFlowAccountDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickAccountingDataSet.CashFlowAccountDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickAccountingDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CashFlowAccount")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewCashFlowAccountIDByCoID(ByVal CO_ID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(CO_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
End Namespace
