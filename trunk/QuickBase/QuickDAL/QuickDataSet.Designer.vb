'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3615
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("QuickERP"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class QuickERP
    Inherits Global.System.Data.DataSet
    
    Private tableTransferPattern1_del As TransferPattern1_delDataTable
    
    Private tableTransferPattern2_del As TransferPattern2_delDataTable
    
    Private tabledel_User As del_UserDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TransferPattern1_del")) Is Nothing) Then
                MyBase.Tables.Add(New TransferPattern1_delDataTable(ds.Tables("TransferPattern1_del")))
            End If
            If (Not (ds.Tables("TransferPattern2_del")) Is Nothing) Then
                MyBase.Tables.Add(New TransferPattern2_delDataTable(ds.Tables("TransferPattern2_del")))
            End If
            If (Not (ds.Tables("del_User")) Is Nothing) Then
                MyBase.Tables.Add(New del_UserDataTable(ds.Tables("del_User")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TransferPattern1_del() As TransferPattern1_delDataTable
        Get
            Return Me.tableTransferPattern1_del
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TransferPattern2_del() As TransferPattern2_delDataTable
        Get
            Return Me.tableTransferPattern2_del
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property del_User() As del_UserDataTable
        Get
            Return Me.tabledel_User
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As QuickERP = CType(MyBase.Clone,QuickERP)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TransferPattern1_del")) Is Nothing) Then
                MyBase.Tables.Add(New TransferPattern1_delDataTable(ds.Tables("TransferPattern1_del")))
            End If
            If (Not (ds.Tables("TransferPattern2_del")) Is Nothing) Then
                MyBase.Tables.Add(New TransferPattern2_delDataTable(ds.Tables("TransferPattern2_del")))
            End If
            If (Not (ds.Tables("del_User")) Is Nothing) Then
                MyBase.Tables.Add(New del_UserDataTable(ds.Tables("del_User")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTransferPattern1_del = CType(MyBase.Tables("TransferPattern1_del"),TransferPattern1_delDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTransferPattern1_del) Is Nothing) Then
                Me.tableTransferPattern1_del.InitVars
            End If
        End If
        Me.tableTransferPattern2_del = CType(MyBase.Tables("TransferPattern2_del"),TransferPattern2_delDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTransferPattern2_del) Is Nothing) Then
                Me.tableTransferPattern2_del.InitVars
            End If
        End If
        Me.tabledel_User = CType(MyBase.Tables("del_User"),del_UserDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledel_User) Is Nothing) Then
                Me.tabledel_User.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "QuickERP"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/QuickERP.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTransferPattern1_del = New TransferPattern1_delDataTable
        MyBase.Tables.Add(Me.tableTransferPattern1_del)
        Me.tableTransferPattern2_del = New TransferPattern2_delDataTable
        MyBase.Tables.Add(Me.tableTransferPattern2_del)
        Me.tabledel_User = New del_UserDataTable
        MyBase.Tables.Add(Me.tabledel_User)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTransferPattern1_del() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTransferPattern2_del() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedel_User() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As QuickERP = New QuickERP
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub TransferPattern1_delRowChangeEventHandler(ByVal sender As Object, ByVal e As TransferPattern1_delRowChangeEvent)
    
    Public Delegate Sub TransferPattern2_delRowChangeEventHandler(ByVal sender As Object, ByVal e As TransferPattern2_delRowChangeEvent)
    
    Public Delegate Sub del_UserRowChangeEventHandler(ByVal sender As Object, ByVal e As del_UserRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TransferPattern1_delDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnTransfer_ID As Global.System.Data.DataColumn
        
        Private columnTransfer_StartDateTime As Global.System.Data.DataColumn
        
        Private columnTransfer_EndDateTime As Global.System.Data.DataColumn
        
        Private columnTable_Name As Global.System.Data.DataColumn
        
        Private columnRecord_Co_ID As Global.System.Data.DataColumn
        
        Private columnRecord_ID As Global.System.Data.DataColumn
        
        Private columnRecord_Stamp_DateTime As Global.System.Data.DataColumn
        
        Private columnTransfer_Detail_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TransferPattern1_del"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Transfer_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransfer_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Transfer_StartDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransfer_StartDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Transfer_EndDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransfer_EndDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Table_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTable_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Record_Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecord_Co_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Record_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecord_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Record_Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecord_Stamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Transfer_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransfer_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TransferPattern1_delRow
            Get
                Return CType(Me.Rows(index),TransferPattern1_delRow)
            End Get
        End Property
        
        Public Event TransferPattern1_delRowChanging As TransferPattern1_delRowChangeEventHandler
        
        Public Event TransferPattern1_delRowChanged As TransferPattern1_delRowChangeEventHandler
        
        Public Event TransferPattern1_delRowDeleting As TransferPattern1_delRowChangeEventHandler
        
        Public Event TransferPattern1_delRowDeleted As TransferPattern1_delRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTransferPattern1_delRow(ByVal row As TransferPattern1_delRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTransferPattern1_delRow(ByVal Co_ID As Short, ByVal Transfer_ID As Integer, ByVal Transfer_StartDateTime As Date, ByVal Transfer_EndDateTime As Date, ByVal Table_Name As String, ByVal Record_Co_ID As Short, ByVal Record_ID As Integer, ByVal Record_Stamp_DateTime As Date, ByVal Transfer_Detail_ID As Integer) As TransferPattern1_delRow
            Dim rowTransferPattern1_delRow As TransferPattern1_delRow = CType(Me.NewRow,TransferPattern1_delRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Transfer_ID, Transfer_StartDateTime, Transfer_EndDateTime, Table_Name, Record_Co_ID, Record_ID, Record_Stamp_DateTime, Transfer_Detail_ID}
            rowTransferPattern1_delRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTransferPattern1_delRow)
            Return rowTransferPattern1_delRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDTransfer_IDTransfer_Detail_ID(ByVal Co_ID As Short, ByVal Transfer_ID As Integer, ByVal Transfer_Detail_ID As Integer) As TransferPattern1_delRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Transfer_ID, Transfer_Detail_ID}),TransferPattern1_delRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TransferPattern1_delDataTable = CType(MyBase.Clone,TransferPattern1_delDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TransferPattern1_delDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnTransfer_ID = MyBase.Columns("Transfer_ID")
            Me.columnTransfer_StartDateTime = MyBase.Columns("Transfer_StartDateTime")
            Me.columnTransfer_EndDateTime = MyBase.Columns("Transfer_EndDateTime")
            Me.columnTable_Name = MyBase.Columns("Table_Name")
            Me.columnRecord_Co_ID = MyBase.Columns("Record_Co_ID")
            Me.columnRecord_ID = MyBase.Columns("Record_ID")
            Me.columnRecord_Stamp_DateTime = MyBase.Columns("Record_Stamp_DateTime")
            Me.columnTransfer_Detail_ID = MyBase.Columns("Transfer_Detail_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnTransfer_ID = New Global.System.Data.DataColumn("Transfer_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransfer_ID)
            Me.columnTransfer_StartDateTime = New Global.System.Data.DataColumn("Transfer_StartDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransfer_StartDateTime)
            Me.columnTransfer_EndDateTime = New Global.System.Data.DataColumn("Transfer_EndDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransfer_EndDateTime)
            Me.columnTable_Name = New Global.System.Data.DataColumn("Table_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTable_Name)
            Me.columnRecord_Co_ID = New Global.System.Data.DataColumn("Record_Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecord_Co_ID)
            Me.columnRecord_ID = New Global.System.Data.DataColumn("Record_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecord_ID)
            Me.columnRecord_Stamp_DateTime = New Global.System.Data.DataColumn("Record_Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecord_Stamp_DateTime)
            Me.columnTransfer_Detail_ID = New Global.System.Data.DataColumn("Transfer_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransfer_Detail_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnTransfer_ID, Me.columnTransfer_Detail_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnTransfer_ID.AllowDBNull = false
            Me.columnTransfer_StartDateTime.AllowDBNull = false
            Me.columnTable_Name.AllowDBNull = false
            Me.columnTable_Name.MaxLength = 50
            Me.columnRecord_Co_ID.AllowDBNull = false
            Me.columnRecord_ID.AllowDBNull = false
            Me.columnRecord_Stamp_DateTime.AllowDBNull = false
            Me.columnTransfer_Detail_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTransferPattern1_delRow() As TransferPattern1_delRow
            Return CType(Me.NewRow,TransferPattern1_delRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TransferPattern1_delRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TransferPattern1_delRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TransferPattern1_delRowChangedEvent) Is Nothing) Then
                RaiseEvent TransferPattern1_delRowChanged(Me, New TransferPattern1_delRowChangeEvent(CType(e.Row,TransferPattern1_delRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TransferPattern1_delRowChangingEvent) Is Nothing) Then
                RaiseEvent TransferPattern1_delRowChanging(Me, New TransferPattern1_delRowChangeEvent(CType(e.Row,TransferPattern1_delRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TransferPattern1_delRowDeletedEvent) Is Nothing) Then
                RaiseEvent TransferPattern1_delRowDeleted(Me, New TransferPattern1_delRowChangeEvent(CType(e.Row,TransferPattern1_delRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TransferPattern1_delRowDeletingEvent) Is Nothing) Then
                RaiseEvent TransferPattern1_delRowDeleting(Me, New TransferPattern1_delRowChangeEvent(CType(e.Row,TransferPattern1_delRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTransferPattern1_delRow(ByVal row As TransferPattern1_delRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickERP = New QuickERP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TransferPattern1_delDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TransferPattern2_delDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnTransfer_ID As Global.System.Data.DataColumn
        
        Private columnTransfer_Detail_ID As Global.System.Data.DataColumn
        
        Private columnTransfer_StartDateTime As Global.System.Data.DataColumn
        
        Private columnTransfer_EndDateTime As Global.System.Data.DataColumn
        
        Private columnTable_Name As Global.System.Data.DataColumn
        
        Private columnRecord_Co_ID As Global.System.Data.DataColumn
        
        Private columnRecord_ID As Global.System.Data.DataColumn
        
        Private columnRecord_Detail_ID As Global.System.Data.DataColumn
        
        Private columnRecord_Stamp_DateTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TransferPattern2_del"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Transfer_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransfer_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Transfer_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransfer_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Transfer_StartDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransfer_StartDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Transfer_EndDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTransfer_EndDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Table_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTable_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Record_Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecord_Co_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Record_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecord_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Record_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecord_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Record_Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecord_Stamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TransferPattern2_delRow
            Get
                Return CType(Me.Rows(index),TransferPattern2_delRow)
            End Get
        End Property
        
        Public Event TransferPattern2_delRowChanging As TransferPattern2_delRowChangeEventHandler
        
        Public Event TransferPattern2_delRowChanged As TransferPattern2_delRowChangeEventHandler
        
        Public Event TransferPattern2_delRowDeleting As TransferPattern2_delRowChangeEventHandler
        
        Public Event TransferPattern2_delRowDeleted As TransferPattern2_delRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTransferPattern2_delRow(ByVal row As TransferPattern2_delRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTransferPattern2_delRow(ByVal Co_ID As Short, ByVal Transfer_ID As Integer, ByVal Transfer_Detail_ID As Integer, ByVal Transfer_StartDateTime As Date, ByVal Transfer_EndDateTime As Date, ByVal Table_Name As String, ByVal Record_Co_ID As Short, ByVal Record_ID As Integer, ByVal Record_Detail_ID As Integer, ByVal Record_Stamp_DateTime As Date) As TransferPattern2_delRow
            Dim rowTransferPattern2_delRow As TransferPattern2_delRow = CType(Me.NewRow,TransferPattern2_delRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Transfer_ID, Transfer_Detail_ID, Transfer_StartDateTime, Transfer_EndDateTime, Table_Name, Record_Co_ID, Record_ID, Record_Detail_ID, Record_Stamp_DateTime}
            rowTransferPattern2_delRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTransferPattern2_delRow)
            Return rowTransferPattern2_delRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDTransfer_IDTransfer_Detail_ID(ByVal Co_ID As Short, ByVal Transfer_ID As Integer, ByVal Transfer_Detail_ID As Integer) As TransferPattern2_delRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Transfer_ID, Transfer_Detail_ID}),TransferPattern2_delRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TransferPattern2_delDataTable = CType(MyBase.Clone,TransferPattern2_delDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TransferPattern2_delDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnTransfer_ID = MyBase.Columns("Transfer_ID")
            Me.columnTransfer_Detail_ID = MyBase.Columns("Transfer_Detail_ID")
            Me.columnTransfer_StartDateTime = MyBase.Columns("Transfer_StartDateTime")
            Me.columnTransfer_EndDateTime = MyBase.Columns("Transfer_EndDateTime")
            Me.columnTable_Name = MyBase.Columns("Table_Name")
            Me.columnRecord_Co_ID = MyBase.Columns("Record_Co_ID")
            Me.columnRecord_ID = MyBase.Columns("Record_ID")
            Me.columnRecord_Detail_ID = MyBase.Columns("Record_Detail_ID")
            Me.columnRecord_Stamp_DateTime = MyBase.Columns("Record_Stamp_DateTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnTransfer_ID = New Global.System.Data.DataColumn("Transfer_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransfer_ID)
            Me.columnTransfer_Detail_ID = New Global.System.Data.DataColumn("Transfer_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransfer_Detail_ID)
            Me.columnTransfer_StartDateTime = New Global.System.Data.DataColumn("Transfer_StartDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransfer_StartDateTime)
            Me.columnTransfer_EndDateTime = New Global.System.Data.DataColumn("Transfer_EndDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTransfer_EndDateTime)
            Me.columnTable_Name = New Global.System.Data.DataColumn("Table_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTable_Name)
            Me.columnRecord_Co_ID = New Global.System.Data.DataColumn("Record_Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecord_Co_ID)
            Me.columnRecord_ID = New Global.System.Data.DataColumn("Record_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecord_ID)
            Me.columnRecord_Detail_ID = New Global.System.Data.DataColumn("Record_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecord_Detail_ID)
            Me.columnRecord_Stamp_DateTime = New Global.System.Data.DataColumn("Record_Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecord_Stamp_DateTime)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnTransfer_ID, Me.columnTransfer_Detail_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnTransfer_ID.AllowDBNull = false
            Me.columnTransfer_Detail_ID.AllowDBNull = false
            Me.columnTransfer_StartDateTime.AllowDBNull = false
            Me.columnTable_Name.AllowDBNull = false
            Me.columnTable_Name.MaxLength = 50
            Me.columnRecord_Co_ID.AllowDBNull = false
            Me.columnRecord_ID.AllowDBNull = false
            Me.columnRecord_Detail_ID.AllowDBNull = false
            Me.columnRecord_Stamp_DateTime.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTransferPattern2_delRow() As TransferPattern2_delRow
            Return CType(Me.NewRow,TransferPattern2_delRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TransferPattern2_delRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TransferPattern2_delRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TransferPattern2_delRowChangedEvent) Is Nothing) Then
                RaiseEvent TransferPattern2_delRowChanged(Me, New TransferPattern2_delRowChangeEvent(CType(e.Row,TransferPattern2_delRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TransferPattern2_delRowChangingEvent) Is Nothing) Then
                RaiseEvent TransferPattern2_delRowChanging(Me, New TransferPattern2_delRowChangeEvent(CType(e.Row,TransferPattern2_delRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TransferPattern2_delRowDeletedEvent) Is Nothing) Then
                RaiseEvent TransferPattern2_delRowDeleted(Me, New TransferPattern2_delRowChangeEvent(CType(e.Row,TransferPattern2_delRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TransferPattern2_delRowDeletingEvent) Is Nothing) Then
                RaiseEvent TransferPattern2_delRowDeleting(Me, New TransferPattern2_delRowChangeEvent(CType(e.Row,TransferPattern2_delRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTransferPattern2_delRow(ByVal row As TransferPattern2_delRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickERP = New QuickERP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TransferPattern2_delDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class del_UserDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnUser_ID As Global.System.Data.DataColumn
        
        Private columnUser_Name As Global.System.Data.DataColumn
        
        Private columnUser_Desc As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnInactive_From As Global.System.Data.DataColumn
        
        Private columnInactive_To As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "del_User"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property User_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUser_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property User_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUser_Name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property User_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUser_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Inactive_FromColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactive_From
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Inactive_ToColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInactive_To
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As del_UserRow
            Get
                Return CType(Me.Rows(index),del_UserRow)
            End Get
        End Property
        
        Public Event del_UserRowChanging As del_UserRowChangeEventHandler
        
        Public Event del_UserRowChanged As del_UserRowChangeEventHandler
        
        Public Event del_UserRowDeleting As del_UserRowChangeEventHandler
        
        Public Event del_UserRowDeleted As del_UserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Adddel_UserRow(ByVal row As del_UserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Adddel_UserRow(ByVal Co_ID As Short, ByVal User_ID As Integer, ByVal User_Name As String, ByVal User_Desc As String, ByVal Password As String, ByVal Inactive_From As Date, ByVal Inactive_To As Date, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date) As del_UserRow
            Dim rowdel_UserRow As del_UserRow = CType(Me.NewRow,del_UserRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, User_ID, User_Name, User_Desc, Password, Inactive_From, Inactive_To, Stamp_UserID, Stamp_DateTime, Upload_DateTime}
            rowdel_UserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdel_UserRow)
            Return rowdel_UserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUser_IDCo_ID(ByVal User_ID As Integer, ByVal Co_ID As Short) As del_UserRow
            Return CType(Me.Rows.Find(New Object() {User_ID, Co_ID}),del_UserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As del_UserDataTable = CType(MyBase.Clone,del_UserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New del_UserDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnUser_ID = MyBase.Columns("User_ID")
            Me.columnUser_Name = MyBase.Columns("User_Name")
            Me.columnUser_Desc = MyBase.Columns("User_Desc")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnInactive_From = MyBase.Columns("Inactive_From")
            Me.columnInactive_To = MyBase.Columns("Inactive_To")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnUser_ID = New Global.System.Data.DataColumn("User_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUser_ID)
            Me.columnUser_Name = New Global.System.Data.DataColumn("User_Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUser_Name)
            Me.columnUser_Desc = New Global.System.Data.DataColumn("User_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUser_Desc)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnInactive_From = New Global.System.Data.DataColumn("Inactive_From", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactive_From)
            Me.columnInactive_To = New Global.System.Data.DataColumn("Inactive_To", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInactive_To)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUser_ID, Me.columnCo_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnUser_ID.AllowDBNull = false
            Me.columnUser_Name.AllowDBNull = false
            Me.columnUser_Name.MaxLength = 50
            Me.columnUser_Desc.MaxLength = 50
            Me.columnPassword.MaxLength = 50
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newdel_UserRow() As del_UserRow
            Return CType(Me.NewRow,del_UserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New del_UserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(del_UserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.del_UserRowChangedEvent) Is Nothing) Then
                RaiseEvent del_UserRowChanged(Me, New del_UserRowChangeEvent(CType(e.Row,del_UserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.del_UserRowChangingEvent) Is Nothing) Then
                RaiseEvent del_UserRowChanging(Me, New del_UserRowChangeEvent(CType(e.Row,del_UserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.del_UserRowDeletedEvent) Is Nothing) Then
                RaiseEvent del_UserRowDeleted(Me, New del_UserRowChangeEvent(CType(e.Row,del_UserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.del_UserRowDeletingEvent) Is Nothing) Then
                RaiseEvent del_UserRowDeleting(Me, New del_UserRowChangeEvent(CType(e.Row,del_UserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removedel_UserRow(ByVal row As del_UserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickERP = New QuickERP
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "del_UserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TransferPattern1_delRow
        Inherits Global.System.Data.DataRow
        
        Private tableTransferPattern1_del As TransferPattern1_delDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTransferPattern1_del = CType(Me.Table,TransferPattern1_delDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableTransferPattern1_del.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableTransferPattern1_del.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transfer_ID() As Integer
            Get
                Return CType(Me(Me.tableTransferPattern1_del.Transfer_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTransferPattern1_del.Transfer_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transfer_StartDateTime() As Date
            Get
                Return CType(Me(Me.tableTransferPattern1_del.Transfer_StartDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableTransferPattern1_del.Transfer_StartDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transfer_EndDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTransferPattern1_del.Transfer_EndDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Transfer_EndDateTime' in table 'TransferPattern1_del' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransferPattern1_del.Transfer_EndDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Table_Name() As String
            Get
                Return CType(Me(Me.tableTransferPattern1_del.Table_NameColumn),String)
            End Get
            Set
                Me(Me.tableTransferPattern1_del.Table_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Record_Co_ID() As Short
            Get
                Return CType(Me(Me.tableTransferPattern1_del.Record_Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableTransferPattern1_del.Record_Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Record_ID() As Integer
            Get
                Return CType(Me(Me.tableTransferPattern1_del.Record_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTransferPattern1_del.Record_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Record_Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableTransferPattern1_del.Record_Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableTransferPattern1_del.Record_Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transfer_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableTransferPattern1_del.Transfer_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTransferPattern1_del.Transfer_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransfer_EndDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableTransferPattern1_del.Transfer_EndDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransfer_EndDateTimeNull()
            Me(Me.tableTransferPattern1_del.Transfer_EndDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TransferPattern2_delRow
        Inherits Global.System.Data.DataRow
        
        Private tableTransferPattern2_del As TransferPattern2_delDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTransferPattern2_del = CType(Me.Table,TransferPattern2_delDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableTransferPattern2_del.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transfer_ID() As Integer
            Get
                Return CType(Me(Me.tableTransferPattern2_del.Transfer_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Transfer_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transfer_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableTransferPattern2_del.Transfer_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Transfer_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transfer_StartDateTime() As Date
            Get
                Return CType(Me(Me.tableTransferPattern2_del.Transfer_StartDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Transfer_StartDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Transfer_EndDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTransferPattern2_del.Transfer_EndDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Transfer_EndDateTime' in table 'TransferPattern2_del' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Transfer_EndDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Table_Name() As String
            Get
                Return CType(Me(Me.tableTransferPattern2_del.Table_NameColumn),String)
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Table_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Record_Co_ID() As Short
            Get
                Return CType(Me(Me.tableTransferPattern2_del.Record_Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Record_Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Record_ID() As Integer
            Get
                Return CType(Me(Me.tableTransferPattern2_del.Record_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Record_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Record_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableTransferPattern2_del.Record_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Record_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Record_Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableTransferPattern2_del.Record_Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableTransferPattern2_del.Record_Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTransfer_EndDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableTransferPattern2_del.Transfer_EndDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTransfer_EndDateTimeNull()
            Me(Me.tableTransferPattern2_del.Transfer_EndDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class del_UserRow
        Inherits Global.System.Data.DataRow
        
        Private tabledel_User As del_UserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledel_User = CType(Me.Table,del_UserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tabledel_User.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tabledel_User.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property User_ID() As Integer
            Get
                Return CType(Me(Me.tabledel_User.User_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabledel_User.User_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property User_Name() As String
            Get
                Return CType(Me(Me.tabledel_User.User_NameColumn),String)
            End Get
            Set
                Me(Me.tabledel_User.User_NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property User_Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tabledel_User.User_DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'User_Desc' in table 'del_User' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledel_User.User_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Password() As String
            Get
                Try 
                    Return CType(Me(Me.tabledel_User.PasswordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Password' in table 'del_User' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledel_User.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactive_From() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledel_User.Inactive_FromColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactive_From' in table 'del_User' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledel_User.Inactive_FromColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inactive_To() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledel_User.Inactive_ToColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Inactive_To' in table 'del_User' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledel_User.Inactive_ToColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tabledel_User.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tabledel_User.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tabledel_User.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tabledel_User.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledel_User.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'del_User' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledel_User.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUser_DescNull() As Boolean
            Return Me.IsNull(Me.tabledel_User.User_DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUser_DescNull()
            Me(Me.tabledel_User.User_DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tabledel_User.PasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasswordNull()
            Me(Me.tabledel_User.PasswordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactive_FromNull() As Boolean
            Return Me.IsNull(Me.tabledel_User.Inactive_FromColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactive_FromNull()
            Me(Me.tabledel_User.Inactive_FromColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInactive_ToNull() As Boolean
            Return Me.IsNull(Me.tabledel_User.Inactive_ToColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInactive_ToNull()
            Me(Me.tabledel_User.Inactive_ToColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tabledel_User.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tabledel_User.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TransferPattern1_delRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TransferPattern1_delRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TransferPattern1_delRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TransferPattern1_delRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TransferPattern2_delRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TransferPattern2_delRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TransferPattern2_delRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TransferPattern2_delRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class del_UserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As del_UserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As del_UserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As del_UserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace QuickERPTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TransferPattern1_delTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TransferPattern1_del"
            tableMapping.ColumnMappings.Add("Transfer_ID", "Transfer_ID")
            tableMapping.ColumnMappings.Add("Transfer_StartDateTime", "Transfer_StartDateTime")
            tableMapping.ColumnMappings.Add("Transfer_EndDateTime", "Transfer_EndDateTime")
            tableMapping.ColumnMappings.Add("Table_Name", "Table_Name")
            tableMapping.ColumnMappings.Add("Record_Co_ID", "Record_Co_ID")
            tableMapping.ColumnMappings.Add("Record_ID", "Record_ID")
            tableMapping.ColumnMappings.Add("Record_Stamp_DateTime", "Record_Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Transfer_Detail_ID", "Transfer_Detail_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Transfer_Pattern1] WHERE (([Co_ID] = @Original_Co_ID) AND ([Transfer"& _ 
                "_ID] = @Original_Transfer_ID) AND ([Transfer_Detail_ID] = @Original_Transfer_Det"& _ 
                "ail_ID) AND ([Transfer_StartDateTime] = @Original_Transfer_StartDateTime) AND (("& _ 
                "@IsNull_Transfer_EndDateTime = 1 AND [Transfer_EndDateTime] IS NULL) OR ([Transf"& _ 
                "er_EndDateTime] = @Original_Transfer_EndDateTime)) AND ([Table_Name] = @Original"& _ 
                "_Table_Name) AND ([Record_Co_ID] = @Original_Record_Co_ID) AND ([Record_ID] = @O"& _ 
                "riginal_Record_ID) AND ([Record_Stamp_DateTime] = @Original_Record_Stamp_DateTim"& _ 
                "e))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_StartDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_StartDateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Transfer_EndDateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_EndDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Table_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Transfer_Pattern1] ([Co_ID], [Transfer_ID], [Transfer_Detail_ID], [T"& _ 
                "ransfer_StartDateTime], [Transfer_EndDateTime], [Table_Name], [Record_Co_ID], [R"& _ 
                "ecord_ID], [Record_Stamp_DateTime]) VALUES (@Co_ID, @Transfer_ID, @Transfer_Deta"& _ 
                "il_ID, @Transfer_StartDateTime, @Transfer_EndDateTime, @Table_Name, @Record_Co_I"& _ 
                "D, @Record_ID, @Record_Stamp_DateTime)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_StartDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_StartDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_EndDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Table_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Transfer_Pattern1] SET [Co_ID] = @Co_ID, [Transfer_ID] = @Transfer_ID, [T"& _ 
                "ransfer_Detail_ID] = @Transfer_Detail_ID, [Transfer_StartDateTime] = @Transfer_S"& _ 
                "tartDateTime, [Transfer_EndDateTime] = @Transfer_EndDateTime, [Table_Name] = @Ta"& _ 
                "ble_Name, [Record_Co_ID] = @Record_Co_ID, [Record_ID] = @Record_ID, [Record_Stam"& _ 
                "p_DateTime] = @Record_Stamp_DateTime WHERE (([Co_ID] = @Original_Co_ID) AND ([Tr"& _ 
                "ansfer_ID] = @Original_Transfer_ID) AND ([Transfer_Detail_ID] = @Original_Transf"& _ 
                "er_Detail_ID) AND ([Transfer_StartDateTime] = @Original_Transfer_StartDateTime) "& _ 
                "AND ((@IsNull_Transfer_EndDateTime = 1 AND [Transfer_EndDateTime] IS NULL) OR (["& _ 
                "Transfer_EndDateTime] = @Original_Transfer_EndDateTime)) AND ([Table_Name] = @Or"& _ 
                "iginal_Table_Name) AND ([Record_Co_ID] = @Original_Record_Co_ID) AND ([Record_ID"& _ 
                "] = @Original_Record_ID) AND ([Record_Stamp_DateTime] = @Original_Record_Stamp_D"& _ 
                "ateTime))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_StartDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_StartDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_EndDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Table_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_StartDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_StartDateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Transfer_EndDateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_EndDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Table_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Co_ID, Transfer_ID, Transfer_Detail_ID, Transfer_StartDateTime, Transfer_E"& _ 
                "ndDateTime, Table_Name, Record_Co_ID, Record_ID, Record_Stamp_DateTime FROM Tran"& _ 
                "sfer_Pattern1"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Co_ID, Record_Co_ID, Record_ID, Record_Stamp_DateTime, Table_Name, Tra"& _ 
                "nsfer_Detail_ID, Transfer_EndDateTime, Transfer_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Tran"& _ 
                "sfer_StartDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Transfer_Pattern1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Table_Name = @Tab"& _ 
                "le_Name) AND (Record_Co_ID = @Record_Co_ID) AND (Record_ID = @Record_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Table_Name", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Co_ID, Record_Co_ID, Record_ID, Record_Stamp_DateTime, Table_Name, Transfe"& _ 
                "r_Detail_ID, Transfer_EndDateTime, Transfer_ID, Transfer_StartDateTime FROM Tran"& _ 
                "sfer_Pattern1 WHERE (Table_Name = @Table_Name) AND (Record_Co_ID = @Record_Co_ID"& _ 
                ") AND (Record_ID = @Record_ID) AND (Record_Stamp_DateTime = @Record_Stamp_DateTi"& _ 
                "me)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Table_Name", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     ISNULL(MAX(Transfer_Detail_ID), 0) + 1 AS NewID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Transfer"& _ 
                "_Pattern1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Co_ID = @Co_ID) AND (Transfer_ID = @Transfer_ID)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickERP.TransferPattern1_delDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickERP.TransferPattern1_delDataTable = New QuickERP.TransferPattern1_delDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByRecordIDs(ByVal Table_Name As String, ByVal Record_Co_ID As Integer, ByVal Record_ID As Integer) As QuickERP.TransferPattern1_delDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Table_Name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Table_Name,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Record_Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Record_ID,Integer)
            Dim dataTable As QuickERP.TransferPattern1_delDataTable = New QuickERP.TransferPattern1_delDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByRecordIDsAndDateTime(ByVal Table_Name As String, ByVal Record_Co_ID As Integer, ByVal Record_ID As Integer, ByVal Record_Stamp_DateTime As Date) As QuickERP.TransferPattern1_delDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Table_Name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Table_Name,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Record_Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Record_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(Record_Stamp_DateTime,Date)
            Dim dataTable As QuickERP.TransferPattern1_delDataTable = New QuickERP.TransferPattern1_delDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickERP.TransferPattern1_delDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickERP) As Integer
            Return Me.Adapter.Update(dataSet, "TransferPattern1_del")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Transfer_ID As Integer, ByVal Original_Transfer_Detail_ID As Integer, ByVal Original_Transfer_StartDateTime As Date, ByVal Original_Transfer_EndDateTime As Global.System.Nullable(Of Date), ByVal Original_Table_Name As String, ByVal Original_Record_Co_ID As Short, ByVal Original_Record_ID As Integer, ByVal Original_Record_Stamp_DateTime As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Transfer_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Transfer_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Transfer_StartDateTime,Date)
            If (Original_Transfer_EndDateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Transfer_EndDateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Table_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Table_Name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Record_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Record_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Record_Stamp_DateTime,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Transfer_ID As Integer, ByVal Transfer_Detail_ID As Integer, ByVal Transfer_StartDateTime As Date, ByVal Transfer_EndDateTime As Global.System.Nullable(Of Date), ByVal Table_Name As String, ByVal Record_Co_ID As Short, ByVal Record_ID As Integer, ByVal Record_Stamp_DateTime As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Transfer_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Transfer_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Transfer_StartDateTime,Date)
            If (Transfer_EndDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Transfer_EndDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Table_Name")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Table_Name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Record_Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Record_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Record_Stamp_DateTime,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Transfer_ID As Integer,  _
                    ByVal Transfer_Detail_ID As Integer,  _
                    ByVal Transfer_StartDateTime As Date,  _
                    ByVal Transfer_EndDateTime As Global.System.Nullable(Of Date),  _
                    ByVal Table_Name As String,  _
                    ByVal Record_Co_ID As Short,  _
                    ByVal Record_ID As Integer,  _
                    ByVal Record_Stamp_DateTime As Date,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Transfer_ID As Integer,  _
                    ByVal Original_Transfer_Detail_ID As Integer,  _
                    ByVal Original_Transfer_StartDateTime As Date,  _
                    ByVal Original_Transfer_EndDateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Table_Name As String,  _
                    ByVal Original_Record_Co_ID As Short,  _
                    ByVal Original_Record_ID As Integer,  _
                    ByVal Original_Record_Stamp_DateTime As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Transfer_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Transfer_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Transfer_StartDateTime,Date)
            If (Transfer_EndDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Transfer_EndDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Table_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Table_Name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Record_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Record_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Record_Stamp_DateTime,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Transfer_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Transfer_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Transfer_StartDateTime,Date)
            If (Original_Transfer_EndDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Transfer_EndDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Table_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Table_Name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Record_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Record_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Record_Stamp_DateTime,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Transfer_StartDateTime As Date, ByVal Transfer_EndDateTime As Global.System.Nullable(Of Date), ByVal Table_Name As String, ByVal Record_Co_ID As Short, ByVal Record_ID As Integer, ByVal Record_Stamp_DateTime As Date, ByVal Original_Co_ID As Short, ByVal Original_Transfer_ID As Integer, ByVal Original_Transfer_Detail_ID As Integer, ByVal Original_Transfer_StartDateTime As Date, ByVal Original_Transfer_EndDateTime As Global.System.Nullable(Of Date), ByVal Original_Table_Name As String, ByVal Original_Record_Co_ID As Short, ByVal Original_Record_ID As Integer, ByVal Original_Record_Stamp_DateTime As Date) As Integer
            Return Me.Update(Original_Co_ID, Original_Transfer_ID, Original_Transfer_Detail_ID, Transfer_StartDateTime, Transfer_EndDateTime, Table_Name, Record_Co_ID, Record_ID, Record_Stamp_DateTime, Original_Co_ID, Original_Transfer_ID, Original_Transfer_Detail_ID, Original_Transfer_StartDateTime, Original_Transfer_EndDateTime, Original_Table_Name, Original_Record_Co_ID, Original_Record_ID, Original_Record_Stamp_DateTime)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNextTransferPatternDetailIDByCoIDAndTransferID(ByVal Co_ID As Integer, ByVal Transfer_ID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(Co_ID,Integer)
            command.Parameters(1).Value = CType(Transfer_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TransferPattern2_delTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TransferPattern2_del"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Transfer_ID", "Transfer_ID")
            tableMapping.ColumnMappings.Add("Transfer_Detail_ID", "Transfer_Detail_ID")
            tableMapping.ColumnMappings.Add("Transfer_StartDateTime", "Transfer_StartDateTime")
            tableMapping.ColumnMappings.Add("Transfer_EndDateTime", "Transfer_EndDateTime")
            tableMapping.ColumnMappings.Add("Table_Name", "Table_Name")
            tableMapping.ColumnMappings.Add("Record_Co_ID", "Record_Co_ID")
            tableMapping.ColumnMappings.Add("Record_ID", "Record_ID")
            tableMapping.ColumnMappings.Add("Record_Detail_ID", "Record_Detail_ID")
            tableMapping.ColumnMappings.Add("Record_Stamp_DateTime", "Record_Stamp_DateTime")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Transfer_Pattern2] WHERE (([Co_ID] = @Original_Co_ID) AND ([Transfer"& _ 
                "_ID] = @Original_Transfer_ID) AND ([Transfer_Detail_ID] = @Original_Transfer_Det"& _ 
                "ail_ID) AND ([Transfer_StartDateTime] = @Original_Transfer_StartDateTime) AND (("& _ 
                "@IsNull_Transfer_EndDateTime = 1 AND [Transfer_EndDateTime] IS NULL) OR ([Transf"& _ 
                "er_EndDateTime] = @Original_Transfer_EndDateTime)) AND ([Table_Name] = @Original"& _ 
                "_Table_Name) AND ([Record_Co_ID] = @Original_Record_Co_ID) AND ([Record_ID] = @O"& _ 
                "riginal_Record_ID) AND ([Record_Detail_ID] = @Original_Record_Detail_ID) AND ([R"& _ 
                "ecord_Stamp_DateTime] = @Original_Record_Stamp_DateTime))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_StartDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_StartDateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Transfer_EndDateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_EndDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Table_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Transfer_Pattern2] ([Co_ID], [Transfer_ID], [Transfer_Detail_ID], [T"& _ 
                "ransfer_StartDateTime], [Transfer_EndDateTime], [Table_Name], [Record_Co_ID], [R"& _ 
                "ecord_ID], [Record_Detail_ID], [Record_Stamp_DateTime]) VALUES (@Co_ID, @Transfe"& _ 
                "r_ID, @Transfer_Detail_ID, @Transfer_StartDateTime, @Transfer_EndDateTime, @Tabl"& _ 
                "e_Name, @Record_Co_ID, @Record_ID, @Record_Detail_ID, @Record_Stamp_DateTime);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT Co_ID, Transfer_ID, Transfer_Detail_ID, Transfer_StartDateTime, Transfer_"& _ 
                "EndDateTime, Table_Name, Record_Co_ID, Record_ID, Record_Detail_ID, Record_Stamp"& _ 
                "_DateTime FROM Transfer_Pattern2 WHERE (Co_ID = @Co_ID) AND (Transfer_Detail_ID "& _ 
                "= @Transfer_Detail_ID) AND (Transfer_ID = @Transfer_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_StartDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_StartDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_EndDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Table_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Transfer_Pattern2] SET [Co_ID] = @Co_ID, [Transfer_ID] = @Transfer_ID, [T"& _ 
                "ransfer_Detail_ID] = @Transfer_Detail_ID, [Transfer_StartDateTime] = @Transfer_S"& _ 
                "tartDateTime, [Transfer_EndDateTime] = @Transfer_EndDateTime, [Table_Name] = @Ta"& _ 
                "ble_Name, [Record_Co_ID] = @Record_Co_ID, [Record_ID] = @Record_ID, [Record_Deta"& _ 
                "il_ID] = @Record_Detail_ID, [Record_Stamp_DateTime] = @Record_Stamp_DateTime WHE"& _ 
                "RE (([Co_ID] = @Original_Co_ID) AND ([Transfer_ID] = @Original_Transfer_ID) AND "& _ 
                "([Transfer_Detail_ID] = @Original_Transfer_Detail_ID) AND ([Transfer_StartDateTi"& _ 
                "me] = @Original_Transfer_StartDateTime) AND ((@IsNull_Transfer_EndDateTime = 1 A"& _ 
                "ND [Transfer_EndDateTime] IS NULL) OR ([Transfer_EndDateTime] = @Original_Transf"& _ 
                "er_EndDateTime)) AND ([Table_Name] = @Original_Table_Name) AND ([Record_Co_ID] ="& _ 
                " @Original_Record_Co_ID) AND ([Record_ID] = @Original_Record_ID) AND ([Record_De"& _ 
                "tail_ID] = @Original_Record_Detail_ID) AND ([Record_Stamp_DateTime] = @Original_"& _ 
                "Record_Stamp_DateTime));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Transfer_ID, Transfer_Detail_ID, Transfe"& _ 
                "r_StartDateTime, Transfer_EndDateTime, Table_Name, Record_Co_ID, Record_ID, Reco"& _ 
                "rd_Detail_ID, Record_Stamp_DateTime FROM Transfer_Pattern2 WHERE (Co_ID = @Co_ID"& _ 
                ") AND (Transfer_Detail_ID = @Transfer_Detail_ID) AND (Transfer_ID = @Transfer_ID"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_StartDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_StartDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_EndDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Table_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_StartDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_StartDateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Transfer_EndDateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Transfer_EndDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_EndDateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Table_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Transfer_ID, Transfer_Detail_ID, Transfer_StartDateTime, Transf"& _ 
                "er_EndDateTime, Table_Name, Record_Co_ID, Record_ID, Record_Detail_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               Record_Stamp_DateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Transfer_Pattern2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Co_ID, Transfer_ID, Transfer_Detail_ID, Transfer_StartDateTime, Transf"& _ 
                "er_EndDateTime, Table_Name, Record_Co_ID, Record_ID, Record_Detail_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               Record_Stamp_DateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Transfer_Pattern2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     "& _ 
                "(Table_Name = @Table_Name) AND (Record_Co_ID = @Record_Co_ID) AND (Record_ID = @"& _ 
                "Record_ID) AND (Record_Detail_ID = @Record_Detail_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Table_Name", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Detail_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     Co_ID, Transfer_ID, Transfer_Detail_ID, Transfer_StartDateTime, Transf"& _ 
                "er_EndDateTime, Table_Name, Record_Co_ID, Record_ID, Record_Detail_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               Record_Stamp_DateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Transfer_Pattern2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     "& _ 
                "(Table_Name = @Table_Name) AND (Record_Co_ID = @Record_Co_ID) AND (Record_ID = @"& _ 
                "Record_ID) AND (Record_Detail_ID = @Record_Detail_ID) AND (Record_Stamp_DateTime"& _ 
                " = @Record_Stamp_DateTime)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Table_Name", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Table_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Detail_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Record_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Record_Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ISNULL(MAX(Transfer_Detail_ID),0) + 1 As NewID FROM Transfer_Pattern2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE Co_ID = @Co_ID AND Transfer_ID = @Transfer_ID"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Transfer_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Transfer_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickERP.TransferPattern2_delDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickERP.TransferPattern2_delDataTable = New QuickERP.TransferPattern2_delDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByRecordIDs(ByVal Table_Name As String, ByVal Record_Co_ID As Integer, ByVal Record_ID As Integer, ByVal Record_Detail_ID As Integer) As QuickERP.TransferPattern2_delDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Table_Name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Table_Name,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Record_Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Record_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(Record_Detail_ID,Integer)
            Dim dataTable As QuickERP.TransferPattern2_delDataTable = New QuickERP.TransferPattern2_delDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByRecordIDsAndDateTime(ByVal Table_Name As String, ByVal Record_Co_ID As Integer, ByVal Record_ID As Integer, ByVal Record_Detail_ID As Integer, ByVal Record_Stamp_DateTime As Date) As QuickERP.TransferPattern2_delDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Table_Name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Table_Name,String)
            End If
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Record_Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(Record_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(Record_Detail_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(4).Value = CType(Record_Stamp_DateTime,Date)
            Dim dataTable As QuickERP.TransferPattern2_delDataTable = New QuickERP.TransferPattern2_delDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickERP.TransferPattern2_delDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickERP) As Integer
            Return Me.Adapter.Update(dataSet, "TransferPattern2_del")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Transfer_ID As Integer, ByVal Original_Transfer_Detail_ID As Integer, ByVal Original_Transfer_StartDateTime As Date, ByVal Original_Transfer_EndDateTime As Global.System.Nullable(Of Date), ByVal Original_Table_Name As String, ByVal Original_Record_Co_ID As Short, ByVal Original_Record_ID As Integer, ByVal Original_Record_Detail_ID As Integer, ByVal Original_Record_Stamp_DateTime As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Transfer_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Transfer_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Transfer_StartDateTime,Date)
            If (Original_Transfer_EndDateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Transfer_EndDateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Table_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Table_Name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Record_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Record_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Record_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Record_Stamp_DateTime,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Transfer_ID As Integer, ByVal Transfer_Detail_ID As Integer, ByVal Transfer_StartDateTime As Date, ByVal Transfer_EndDateTime As Global.System.Nullable(Of Date), ByVal Table_Name As String, ByVal Record_Co_ID As Short, ByVal Record_ID As Integer, ByVal Record_Detail_ID As Integer, ByVal Record_Stamp_DateTime As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Transfer_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Transfer_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Transfer_StartDateTime,Date)
            If (Transfer_EndDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Transfer_EndDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Table_Name")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Table_Name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Record_Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Record_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Record_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Record_Stamp_DateTime,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Transfer_ID As Integer,  _
                    ByVal Transfer_Detail_ID As Integer,  _
                    ByVal Transfer_StartDateTime As Date,  _
                    ByVal Transfer_EndDateTime As Global.System.Nullable(Of Date),  _
                    ByVal Table_Name As String,  _
                    ByVal Record_Co_ID As Short,  _
                    ByVal Record_ID As Integer,  _
                    ByVal Record_Detail_ID As Integer,  _
                    ByVal Record_Stamp_DateTime As Date,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Transfer_ID As Integer,  _
                    ByVal Original_Transfer_Detail_ID As Integer,  _
                    ByVal Original_Transfer_StartDateTime As Date,  _
                    ByVal Original_Transfer_EndDateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Table_Name As String,  _
                    ByVal Original_Record_Co_ID As Short,  _
                    ByVal Original_Record_ID As Integer,  _
                    ByVal Original_Record_Detail_ID As Integer,  _
                    ByVal Original_Record_Stamp_DateTime As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Transfer_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Transfer_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Transfer_StartDateTime,Date)
            If (Transfer_EndDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Transfer_EndDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Table_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Table_Name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Record_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Record_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Record_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Record_Stamp_DateTime,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Transfer_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Transfer_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Transfer_StartDateTime,Date)
            If (Original_Transfer_EndDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Transfer_EndDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_Table_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Table_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Table_Name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Record_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Record_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Record_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Record_Stamp_DateTime,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Transfer_StartDateTime As Date,  _
                    ByVal Transfer_EndDateTime As Global.System.Nullable(Of Date),  _
                    ByVal Table_Name As String,  _
                    ByVal Record_Co_ID As Short,  _
                    ByVal Record_ID As Integer,  _
                    ByVal Record_Detail_ID As Integer,  _
                    ByVal Record_Stamp_DateTime As Date,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Transfer_ID As Integer,  _
                    ByVal Original_Transfer_Detail_ID As Integer,  _
                    ByVal Original_Transfer_StartDateTime As Date,  _
                    ByVal Original_Transfer_EndDateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Table_Name As String,  _
                    ByVal Original_Record_Co_ID As Short,  _
                    ByVal Original_Record_ID As Integer,  _
                    ByVal Original_Record_Detail_ID As Integer,  _
                    ByVal Original_Record_Stamp_DateTime As Date) As Integer
            Return Me.Update(Original_Co_ID, Original_Transfer_ID, Original_Transfer_Detail_ID, Transfer_StartDateTime, Transfer_EndDateTime, Table_Name, Record_Co_ID, Record_ID, Record_Detail_ID, Record_Stamp_DateTime, Original_Co_ID, Original_Transfer_ID, Original_Transfer_Detail_ID, Original_Transfer_StartDateTime, Original_Transfer_EndDateTime, Original_Table_Name, Original_Record_Co_ID, Original_Record_ID, Original_Record_Detail_ID, Original_Record_Stamp_DateTime)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNextTransferPatternDetailIDByCoIDAndTransferID(ByVal Co_ID As Integer, ByVal Transfer_ID As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(Co_ID,Integer)
            command.Parameters(1).Value = CType(Transfer_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class del_UserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "del_User"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("User_ID", "User_ID")
            tableMapping.ColumnMappings.Add("User_Name", "User_Name")
            tableMapping.ColumnMappings.Add("User_Desc", "User_Desc")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("Inactive_From", "Inactive_From")
            tableMapping.ColumnMappings.Add("Inactive_To", "Inactive_To")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Sec_User] WHERE (([Co_ID] = @Original_Co_ID) AND ([User_ID] = @Origi"& _ 
                "nal_User_ID) AND ([User_Name] = @Original_User_Name) AND ((@IsNull_User_Desc = 1"& _ 
                " AND [User_Desc] IS NULL) OR ([User_Desc] = @Original_User_Desc)) AND ((@IsNull_"& _ 
                "Password = 1 AND [Password] IS NULL) OR ([Password] = @Original_Password)) AND ("& _ 
                "(@IsNull_Inactive_From = 1 AND [Inactive_From] IS NULL) OR ([Inactive_From] = @O"& _ 
                "riginal_Inactive_From)) AND ((@IsNull_Inactive_To = 1 AND [Inactive_To] IS NULL)"& _ 
                " OR ([Inactive_To] = @Original_Inactive_To)) AND ([Stamp_UserID] = @Original_Sta"& _ 
                "mp_UserID) AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Uploa"& _ 
                "d_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_"& _ 
                "Upload_DateTime)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_User_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_User_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_User_Desc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Desc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_User_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Password", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_From", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_To", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Sec_User] ([Co_ID], [User_ID], [User_Name], [User_Desc], [Password],"& _ 
                " [Inactive_From], [Inactive_To], [Stamp_UserID], [Stamp_DateTime], [Upload_DateT"& _ 
                "ime]) VALUES (@Co_ID, @User_ID, @User_Name, @User_Desc, @Password, @Inactive_Fro"& _ 
                "m, @Inactive_To, @Stamp_UserID, @Stamp_DateTime, @Upload_DateTime);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_I"& _ 
                "D, User_ID, User_Name, User_Desc, Password, Inactive_From, Inactive_To, Stamp_Us"& _ 
                "erID, Stamp_DateTime, Upload_DateTime FROM Sec_User WHERE (Co_ID = @Co_ID) AND ("& _ 
                "User_ID = @User_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Sec_User] SET [Co_ID] = @Co_ID, [User_ID] = @User_ID, [User_Name] = @User"& _ 
                "_Name, [User_Desc] = @User_Desc, [Password] = @Password, [Inactive_From] = @Inac"& _ 
                "tive_From, [Inactive_To] = @Inactive_To, [Stamp_UserID] = @Stamp_UserID, [Stamp_"& _ 
                "DateTime] = @Stamp_DateTime, [Upload_DateTime] = @Upload_DateTime WHERE (([Co_ID"& _ 
                "] = @Original_Co_ID) AND ([User_ID] = @Original_User_ID) AND ([User_Name] = @Ori"& _ 
                "ginal_User_Name) AND ((@IsNull_User_Desc = 1 AND [User_Desc] IS NULL) OR ([User_"& _ 
                "Desc] = @Original_User_Desc)) AND ((@IsNull_Password = 1 AND [Password] IS NULL)"& _ 
                " OR ([Password] = @Original_Password)) AND ((@IsNull_Inactive_From = 1 AND [Inac"& _ 
                "tive_From] IS NULL) OR ([Inactive_From] = @Original_Inactive_From)) AND ((@IsNul"& _ 
                "l_Inactive_To = 1 AND [Inactive_To] IS NULL) OR ([Inactive_To] = @Original_Inact"& _ 
                "ive_To)) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTime] = @"& _ 
                "Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateTime]"& _ 
                " IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, U"& _ 
                "ser_ID, User_Name, User_Desc, Password, Inactive_From, Inactive_To, Stamp_UserID"& _ 
                ", Stamp_DateTime, Upload_DateTime FROM Sec_User WHERE (Co_ID = @Co_ID) AND (User"& _ 
                "_ID = @User_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_User_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_User_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_User_Desc", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Desc", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_User_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Desc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Password", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_From", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_From", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_From", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Inactive_To", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Inactive_To", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Inactive_To", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(10) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, User_ID, User_Name, User_Desc, Password, Inactive_From, Inactiv"& _ 
                "e_To, Stamp_UserID, Stamp_DateTime, Upload_DateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Sec_User"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Co_ID, User_ID, User_Name, User_Desc, Password, Inactive_From, Inactiv"& _ 
                "e_To, Stamp_UserID, Stamp_DateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Sec_User"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Co_ID = @Co_ID"& _ 
                " OR @Co_ID = 0) AND Stamp_DateTime > @Stamp_DateTime"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Co_ID, Inactive_From, Inactive_To, Password, Stamp_DateTime, Stamp_UserID,"& _ 
                " Upload_DateTime, User_Desc, User_ID, User_Name FROM Sec_User WHERE (Co_ID = @Co"& _ 
                "_Id) AND (Upload_DateTime > @Upload_DateTime)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_Id", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT Co_ID, Inactive_From, Inactive_To, Password, Stamp_DateTime, Stamp_UserID,"& _ 
                " User_Desc, User_ID, User_Name FROM Sec_User WHERE Co_ID = @Co_ID AND (User_ID ="& _ 
                " @User_ID)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "User_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT Co_ID, Inactive_From, Inactive_To, Password, Stamp_DateTime, Stamp_UserID,"& _ 
                " Upload_DateTime, User_Desc, User_ID, User_Name FROM Sec_User WHERE (User_ID = @"& _ 
                "User_ID)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "User_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT Co_ID, Inactive_From, Inactive_To, Password, Stamp_DateTime, Stamp_UserID,"& _ 
                " Upload_DateTime, User_Desc, User_ID, User_Name FROM Sec_User WHERE (User_Name ="& _ 
                " @User_Name)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_Name", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "User_Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT TOP (1) Co_ID, Inactive_From, Inactive_To, Password, Stamp_DateTime, Stamp"& _ 
                "_UserID, Upload_DateTime, User_Desc, User_ID, User_Name FROM Sec_User WHERE (Co_"& _ 
                "ID = @Co_ID) OR (@Co_ID = 0) ORDER BY User_ID"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT TOP (1) Co_ID, Inactive_From, Inactive_To, Password, Stamp_DateTime, Stamp"& _ 
                "_UserID, Upload_DateTime, User_Desc, User_ID, User_Name FROM Sec_User WHERE (Co_"& _ 
                "ID = @Co_ID) OR (@Co_ID = 0) ORDER BY User_ID DESC"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT TOP (1) Co_ID, Inactive_From, Inactive_To, Password, Stamp_DateTime, Stamp"& _ 
                "_UserID, Upload_DateTime, User_Desc, User_ID, User_Name FROM Sec_User WHERE (Co_"& _ 
                "ID = @Co_ID OR @Co_ID = 0) AND (User_ID > @User_ID) ORDER BY User_ID"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "User_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT TOP (1) Co_ID, Inactive_From, Inactive_To, Password, Stamp_DateTime, Stamp"& _ 
                "_UserID, Upload_DateTime, User_Desc, User_ID, User_Name FROM Sec_User WHERE (Co_"& _ 
                "ID = @Co_ID OR @Co_ID = 0) AND (User_ID < @User_ID) ORDER BY User_ID DESC"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@User_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "User_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT COUNT(*) FROM Sec_User"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function FillAll(ByVal dataTable As QuickERP.del_UserDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillAllUpdatedByCoIDDateTime(ByVal dataTable As QuickERP.del_UserDataTable, ByVal Co_ID As Integer, ByVal Stamp_DateTime As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Stamp_DateTime,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUpdatedByCoIDDateTime(ByVal Co_ID As Integer, ByVal Stamp_DateTime As Date) As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Stamp_DateTime,Date)
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillAllUploadedByCoIDDateTime(ByVal dataTable As QuickERP.del_UserDataTable, ByVal Co_Id As Integer, ByVal Upload_DateTime As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_Id,Integer)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllUploadedByCoIDDateTime(ByVal Co_Id As Integer, ByVal Upload_DateTime As Global.System.Nullable(Of Date)) As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_Id,Integer)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByCoIDUserID(ByVal dataTable As QuickERP.del_UserDataTable, ByVal Co_ID As Integer, ByVal User_ID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(User_ID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDUserID(ByVal Co_ID As Integer, ByVal User_ID As Integer) As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(User_ID,Integer)
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByUserID(ByVal dataTable As QuickERP.del_UserDataTable, ByVal User_ID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(User_ID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByUserID(ByVal User_ID As Integer) As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(User_ID,Integer)
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByUserName(ByVal dataTable As QuickERP.del_UserDataTable, ByVal User_Name As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (User_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("User_Name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(User_Name,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByUserName(ByVal User_Name As String) As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (User_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("User_Name")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(User_Name,String)
            End If
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillFirstByCoID(ByVal dataTable As QuickERP.del_UserDataTable, ByVal Co_ID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFirstByCoID(ByVal Co_ID As Integer) As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillLastByCoID(ByVal dataTable As QuickERP.del_UserDataTable, ByVal Co_ID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetLastByCoID(ByVal Co_ID As Integer) As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillNextByCoIDUserID(ByVal dataTable As QuickERP.del_UserDataTable, ByVal Co_ID As Integer, ByVal User_ID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(User_ID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetNextByCoIDUserID(ByVal Co_ID As Integer, ByVal User_ID As Integer) As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(User_ID,Integer)
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillPreviousByCoIDUserID(ByVal dataTable As QuickERP.del_UserDataTable, ByVal Co_ID As Integer, ByVal User_ID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(User_ID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPreviousByCoIDUserID(ByVal Co_ID As Integer, ByVal User_ID As Integer) As QuickERP.del_UserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(User_ID,Integer)
            Dim dataTable As QuickERP.del_UserDataTable = New QuickERP.del_UserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickERP.del_UserDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickERP) As Integer
            Return Me.Adapter.Update(dataSet, "del_User")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_User_ID As Integer, ByVal Original_User_Name As String, ByVal Original_User_Desc As String, ByVal Original_Password As String, ByVal Original_Inactive_From As Global.System.Nullable(Of Date), ByVal Original_Inactive_To As Global.System.Nullable(Of Date), ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_User_ID,Integer)
            If (Original_User_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_User_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_User_Name,String)
            End If
            If (Original_User_Desc Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_User_Desc,String)
            End If
            If (Original_Password Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Password,String)
            End If
            If (Original_Inactive_From.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Inactive_From.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_To.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Inactive_To.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal User_ID As Integer, ByVal User_Name As String, ByVal User_Desc As String, ByVal Password As String, ByVal Inactive_From As Global.System.Nullable(Of Date), ByVal Inactive_To As Global.System.Nullable(Of Date), ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(User_ID,Integer)
            If (User_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("User_Name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(User_Name,String)
            End If
            If (User_Desc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(User_Desc,String)
            End If
            If (Password Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Password,String)
            End If
            If (Inactive_From.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Inactive_From.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Inactive_To.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Inactive_To.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal User_ID As Integer,  _
                    ByVal User_Name As String,  _
                    ByVal User_Desc As String,  _
                    ByVal Password As String,  _
                    ByVal Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_User_ID As Integer,  _
                    ByVal Original_User_Name As String,  _
                    ByVal Original_User_Desc As String,  _
                    ByVal Original_Password As String,  _
                    ByVal Original_Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(User_ID,Integer)
            If (User_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("User_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(User_Name,String)
            End If
            If (User_Desc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(User_Desc,String)
            End If
            If (Password Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Password,String)
            End If
            If (Inactive_From.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Inactive_From.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Inactive_To.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Inactive_To.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_User_ID,Integer)
            If (Original_User_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_User_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_User_Name,String)
            End If
            If (Original_User_Desc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_User_Desc,String)
            End If
            If (Original_Password Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Password,String)
            End If
            If (Original_Inactive_From.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Inactive_From.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_Inactive_To.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Inactive_To.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal User_Name As String,  _
                    ByVal User_Desc As String,  _
                    ByVal Password As String,  _
                    ByVal Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_User_ID As Integer,  _
                    ByVal Original_User_Name As String,  _
                    ByVal Original_User_Desc As String,  _
                    ByVal Original_Password As String,  _
                    ByVal Original_Inactive_From As Global.System.Nullable(Of Date),  _
                    ByVal Original_Inactive_To As Global.System.Nullable(Of Date),  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(Original_Co_ID, Original_User_ID, User_Name, User_Desc, Password, Inactive_From, Inactive_To, Stamp_UserID, Stamp_DateTime, Upload_DateTime, Original_Co_ID, Original_User_ID, Original_User_Name, Original_User_Desc, Original_Password, Original_Inactive_From, Original_Inactive_To, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetCount() As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(10)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
End Namespace
