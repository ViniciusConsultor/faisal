IF NOT EXISTS (SELECT O.[NAME] FROM sysobjects o WHERE o.[Name] ='Dwh_TimeDimension')
	CREATE TABLE Dwh_TimeDimension
		(
		TimeDimensionID INT NULL,
		YearNumber SMALLINT NULL,
		MonthNumber SMALLINT NULL,
		DayOfMonth SMALLINT NULL,
		DayOfWeek SMALLINT NULL,
		WeekOfYear SMALLINT NULL,
		QuarterNumber SMALLINT NULL,
		IsWeekend BIT NULL,
		IsHoliday BIT NULL,
		IsSeason BIT NULL
		)
go
IF NOT EXISTS (SELECT O.[NAME] FROM sysobjects o WHERE o.[Name] ='Dwh_COADimension')
	CREATE TABLE Dwh_COADimension
		(
		TimeDimensionID INT NULL,
		COA_ID INT NULL,
		COA_Desc VARCHAR(250) NULL
		)
go
IF NOT EXISTS (SELECT O.[NAME] FROM sysobjects o WHERE o.[Name] ='Dwh_AccountsFacts')
	CREATE TABLE Dwh_AccountsFacts
		(
		TimeDimensionID INT NULL,
		COADimensionID INT NULL,
		DebitAmount DECIMAL NULL,
		CreditAmount DECIMAL NULL,
		BalanceAmount SMALLINT NULL
		)
go
IF NOT EXISTS (SELECT C.[NAME] FROM sysobjects o INNER JOIN syscolumns c ON o.id=c.id WHERE o.[Name] ='Accounting_Voucher' AND c.[Name]='DocumentStatus_ID')
	ALTER TABLE Accounting_Voucher ADD DocumentStatus_ID INT NULL
go
IF EXISTS (SELECT o.[NAME] FROM sysobjects o WHERE o.[Name] ='SpPartyLedgerWithAging')
	DROP PROCEDURE SpPartyLedgerWithAging
go
create procedure [spPartyLedgerWithAging]
	@Co_ID AS INT,
	@AgingCalculationDate AS DATETIME
As

DECLARE @CurrentRecID INT
DECLARE @RecID INT
DECLARE @SrNo INT
DECLARE @PayedAmount INT
DECLARE @RowWiseBalance FLOAT
DECLARE @Amount AS FLOAT
DECLARE @OldBalance AS FLOAT
DECLARE @CurrentPartyID AS INT
DECLARE @TotalDebit AS FLOAT
DECLARE @AgingDays AS INT

DECLARE @Aging TABLE(
	[RecID] INT IDENTITY,
	SrNo INT,
	Co_ID INT,
	Party_ID INT,
	Party_Desc VARCHAR(250),
	[voucher_No]   [INT],
	[VoucherDate] [DateTime],
	[Remarks] [varchar](100),
	[Source_DocumentType_ID] SMALLINT,
	[Qty] [Int],
	[Amount] FLOAT,
	[Balance] FLOAT NULL,
	[AgingDays] SMALLINT NULL,
	[Sales] [Float]	,
	[SalesReturn] [Float],
	[Purchase] [Float] ,
	[PurchaseReturn] [Float] ,
	[Receipt] [Float] ,
	Others FLOAT,
	[OldBalance] [Float])

INSERT INTO @Aging 
	SELECT	0 AS SrNo
			, Co_ID
			, Party_ID
			, Party_Desc
			, [voucher_No]
			, [voucher_Date]
			, [Remarks]
			, [Source_DocumentType_ID]
			, [Qty]
			, [Amount]
			, NULL
			, NULL
			, [Sales]
			, [SalesReturn]
			, [Purchase]
			, [PurchaseReturn]
			, [Receipt]
			, Others
			, NULL
	FROM
	( 
	SELECT Av.Co_Id, Av.Remarks, Av.Source_DocumentType_ID
		, Av.source_id, Voucher_Date, Av.Voucher_ID
		, Voucher_No, party.party_Id, party.Party_Desc, AVD.Coa_ID, Qty
		, (DebitAmount - CreditAmount) AS Amount
		, Case Av.Source_DocumentType_ID WHEN 1  THEN DebitAmount - CreditAmount else 0 End AS Sales
		, Case Av.Source_DocumentType_ID WHEN 2  THEN DebitAmount - CreditAmount else 0 End AS SalesReturn
		, Case Av.Source_DocumentType_ID WHEN 3  THEN DebitAmount - CreditAmount else 0 End AS Purchase
		, Case Av.Source_DocumentType_ID WHEN 4  THEN DebitAmount - CreditAmount else 0 End AS PurchaseReturn
		, Case Av.Source_DocumentType_ID WHEN 13 THEN DebitAmount - CreditAmount else 0 End AS Receipt
		, Case ISNULL(Av.Source_DocumentType_ID, 0) WHEN 0 THEN DebitAmount - CreditAmount else 0 End AS Others
		, 0 AS OldBalance
	FROM Accounting_Voucher AS AV
		inner join Accounting_voucher_Detail AS AVD on av.co_id = avd.co_id and AV.voucher_id = AVD.Voucher_Id
		inner join party on party.Coa_ID = AVD.coa_id and party.Co_ID = AVD.Co_id
		Left outer JOin
				(
				Select I.Co_ID, I.DocumentType_ID, I.Inventory_ID,
					(Sum(Inventory_Qty_Size01) +
					 Sum(Inventory_Qty_Size02) +
					 Sum(Inventory_Qty_Size03) +
					 Sum(Inventory_Qty_Size04) +
					 Sum(Inventory_Qty_Size05) +
					 Sum(Inventory_Qty_Size06) +
					 Sum(Inventory_Qty_Size07) +
					 Sum(Inventory_Qty_Size08) +
					 Sum(Inventory_Qty_Size09) +
					 Sum(Inventory_Qty_Size10) +
					 Sum(Inventory_Qty_Size11) +
					 Sum(Inventory_Qty_Size12) +
					 Sum(Inventory_Qty_Size13))	as Qty
				FROM Inventory AS I
					INNER join Inventory_Detail AS Id on Id.inventory_ID = I.Inventory_ID and Id.Co_Id = I.Co_Id And Id.RecordStatus_ID <> 4
				where I.Co_ID = @Co_ID
				group by I.Co_id ,I.DocumentType_id, I.Inventory_id
				) AS Inven ON Inven.Inventory_ID = Av.Source_id and Inven.Co_id = Av.Co_id 
							AND Inven.DocumentType_id = Av.Source_DocumentType_ID

	WHERE AV.Co_id = @Co_ID
	) AS a
order by Party_ID, Voucher_Date

	SET @RowWiseBalance = 0
	SET @CurrentRecID = 1
	SET @CurrentPartyID = 0

	WHILE (@CurrentRecID <= (SELECT COUNT(*) FROM @Aging))  
	Begin
		IF @CurrentPartyID <> (SELECT Party_ID FROM @Aging WHERE RecID = @CurrentRecID)
			BEGIN
			SET @RowWiseBalance = 0
			SET @CurrentPartyID = (SELECT Party_ID FROM @Aging WHERE RecID = @CurrentRecID)
			SET @OldBalance = 0
			SET @PayedAmount = (SELECT SUM(Amount) FROM @Aging WHERE Party_ID = @CurrentPartyID AND Amount < 0)
			SET @TotalDebit = 0
			SET @AgingDays = 0
			SET @SrNo = 1
			END

		Select @Amount = Amount From @Aging where RecID = @CurrentRecID

		IF (@Amount > 0) SET @TotalDebit = @TotalDebit + @Amount
		IF ((@TotalDebit + @PayedAmount) > 0)
			SET @OldBalance = @TotalDebit + @PayedAmount
		IF ((@TotalDebit + @PayedAmount) > 0) 
			SELECT @AgingDays = DATEDIFF(dd, VoucherDate, @AgingCalculationDate) FROM @Aging WHERE RecID = @CurrentRecID
		SET @RowWiseBalance = @RowWiseBalance + @Amount
		Update @Aging SET SrNo = @SrNo
			, Balance = @RowWiseBalance
			, AgingDays = @AgingDays
			, OldBalance = @OldBalance
		Where RecId =  @CurrentRecID

		SET @CurrentRecID = @CurrentRecID + 1
		SET @SrNo = @SrNo + 1
	End

Select * from @Aging
GO
-- =============================================
-- Author:		Faisal
-- Create date: 23-Nov-2008
-- Description:	This trigger updates the ItemSummary table for stock, total purchased, total sold etc.
-- =============================================
-- ------------ Modification History -----------
-- Author	Date		Details
-- ------   ----        -------
-- Faisal	24-Jan-2009	Table name is changed from Inv_Stock to Inv_ItemSummary so the trigger
--						is changed accordingly. Summary_Type field will now hold the different
--						summary types, such as "Stock", "Purchased", "Sold". Trigger is also
--						changed from trigUpdateStock to trigUpdateItemSummaryStock. Because
--						this trigger will only hold code for stock.
-- Faisal	07-Feb-2009	Deleted was being checked when record is inserted. It is corrected now.
-- Faisal	01-Mar-2009	Added Comment header.
--						This trigger was inserting and updating always regardless of document type.
-- Faisal	16-May-2009 Incorporated warehouse_id in inventory tables.
-- Faisal	28-Jun-2010	Incase of record status 4 (deleted) factor set to 0 so that it does not
--						affect stock.
-- ---------------------------------------------
ALTER TRIGGER [trigUpdateItemSummaryStock]
   ON  [Inventory_Detail] 
   AFTER INSERT,DELETE,UPDATE
AS 
DECLARE @Factor AS INT
DECLARE @CoId AS INT
DECLARE @ItemID AS INT

	IF (SELECT Count(*) FROM Deleted) > 0
		BEGIN
		SET @Factor = 0
		IF (SELECT RecordStatus_ID FROM Deleted) = 4 --Deleted
			SET @Factor = 0	--Don't affect stock if record status was deleted because when it was deleted transaction was reveresed now nothing is required.
		IF (SELECT DocumentType_ID FROM Deleted) = 2 OR (SELECT DocumentType_ID FROM Deleted) = 3
			--For Purchase and Sales Return
			SET @Factor = -1
		ELSE IF (SELECT DocumentType_ID FROM Deleted) = 1 OR (SELECT DocumentType_ID FROM Deleted) = 4
				--For Purchase Return and Sales
				SET @Factor = 1
		IF @Factor <> 0 
			BEGIN
			IF (SELECT Count(*) FROM Inv_ItemSummary WHERE Co_Id = (Select Co_Id FROM Deleted) AND Source_First_Id = (Select Item_Id From Deleted) AND Source_DocumentType_ID = 15 AND Warehouse_ID = (Select Warehouse_ID From Deleted)) > 0 
				BEGIN
				UPDATE Inv_ItemSummary 
					SET ItemSummary_Size01 = ItemSummary_Size01 + (Select Inventory_Qty_Size01 FROM Deleted) * @Factor
					, ItemSummary_Size02 = ItemSummary_Size02 + (Select Inventory_Qty_Size02 FROM Deleted) * @Factor
					, ItemSummary_Size03 = ItemSummary_Size03 + (Select Inventory_Qty_Size03 FROM Deleted) * @Factor
					, ItemSummary_Size04 = ItemSummary_Size04 + (Select Inventory_Qty_Size04 FROM Deleted) * @Factor
					, ItemSummary_Size05 = ItemSummary_Size05 + (Select Inventory_Qty_Size05 FROM Deleted) * @Factor
					, ItemSummary_Size06 = ItemSummary_Size06 + (Select Inventory_Qty_Size06 FROM Deleted) * @Factor
					, ItemSummary_Size07 = ItemSummary_Size07 + (Select Inventory_Qty_Size07 FROM Deleted) * @Factor
					, ItemSummary_Size08 = ItemSummary_Size08 + (Select Inventory_Qty_Size08 FROM Deleted) * @Factor
					, ItemSummary_Size09 = ItemSummary_Size09 + (Select Inventory_Qty_Size09 FROM Deleted) * @Factor
					, ItemSummary_Size10 = ItemSummary_Size10 + (Select Inventory_Qty_Size10 FROM Deleted) * @Factor
					, ItemSummary_Size11 = ItemSummary_Size11 + (Select Inventory_Qty_Size11 FROM Deleted) * @Factor
					, ItemSummary_Size12 = ItemSummary_Size12 + (Select Inventory_Qty_Size12 FROM Deleted) * @Factor
					, ItemSummary_Size13 = ItemSummary_Size13 + (Select Inventory_Qty_Size13 FROM Deleted) * @Factor
					, Stamp_DateTime = GetDate()
				WHERE  Co_Id = (Select Co_Id FROM Deleted) AND Source_First_Id = (Select Item_Id From Deleted)
						AND Source_DocumentType_ID = 15 AND Warehouse_ID = (Select Warehouse_ID From Deleted)
				END
			ELSE
				BEGIN
				Select @CoId=Co_Id, @ItemID=Item_Id FROM Deleted
				EXEC spRecalculateItemSummary @CoId, @ItemID, 15

				INSERT INTO [Inv_ItemSummary]
				   ([Co_ID], [Source_First_ID], [Source_Second_ID], [Source_DocumentType_ID], [Warehouse_ID]
				   ,[ItemSummary_Size01], [ItemSummary_Size02], [ItemSummary_Size03]
				   ,[ItemSummary_Size04], [ItemSummary_Size05], [ItemSummary_Size06]
				   ,[ItemSummary_Size07], [ItemSummary_Size08], [ItemSummary_Size09]
				   ,[ItemSummary_Size10], [ItemSummary_Size11], [ItemSummary_Size12]
				   ,[ItemSummary_Size13], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime])
				SELECT Co_Id, Item_Id, 0, 15, [Warehouse_ID]		--Stock
					,Inventory_Qty_Size01 * @Factor, Inventory_Qty_Size02 * @Factor, Inventory_Qty_Size03 * @Factor
					, Inventory_Qty_Size04 * @Factor, Inventory_Qty_Size05 * @Factor, Inventory_Qty_Size06 * @Factor
					, Inventory_Qty_Size07 * @Factor, Inventory_Qty_Size08 * @Factor, Inventory_Qty_Size09 * @Factor
					, Inventory_Qty_Size10 * @Factor, Inventory_Qty_Size11 * @Factor, Inventory_Qty_Size12 * @Factor
					, Inventory_Qty_Size13 * @Factor, [Stamp_UserID], [Stamp_DateTime], NULL
					FROM Deleted
				END
			END
		END

-- Add the values if inserted

	IF (SELECT Count(*) FROM Inserted) > 0
		BEGIN
		SET @Factor = 0
		IF (SELECT RecordStatus_ID FROM Inserted) = 4 --Deleted
			SET @Factor = 0	--No need to update either insert/update because record is deleted. For update deleted portion should have reversed the stock effect.
		ELSE IF (SELECT DocumentType_ID FROM Inserted) = 2 OR (SELECT DocumentType_ID FROM Inserted) = 3
			--For Purchase and Sales Return
			SET @Factor = 1
		ELSE IF (SELECT DocumentType_ID FROM Inserted) = 1 OR (SELECT DocumentType_ID FROM Inserted) = 4
				--For Purchase Return and Sales
				SET @Factor = -1
		IF @Factor <> 0 
			BEGIN
			IF (SELECT Count(*) FROM Inv_ItemSummary WHERE Co_Id = (Select Co_Id FROM Inserted) AND Source_First_Id = (Select Item_Id From Inserted) AND Source_DocumentType_ID = 15 AND Warehouse_ID = (Select Warehouse_ID From Inserted)) > 0 
				BEGIN
				UPDATE Inv_ItemSummary 
					SET ItemSummary_Size01 = ItemSummary_Size01 + (Select Inventory_Qty_Size01 FROM Inserted) * @Factor
					, ItemSummary_Size02 = ItemSummary_Size02 + (Select Inventory_Qty_Size02 FROM Inserted) * @Factor
					, ItemSummary_Size03 = ItemSummary_Size03 + (Select Inventory_Qty_Size03 FROM Inserted) * @Factor
					, ItemSummary_Size04 = ItemSummary_Size04 + (Select Inventory_Qty_Size04 FROM Inserted) * @Factor
					, ItemSummary_Size05 = ItemSummary_Size05 + (Select Inventory_Qty_Size05 FROM Inserted) * @Factor
					, ItemSummary_Size06 = ItemSummary_Size06 + (Select Inventory_Qty_Size06 FROM Inserted) * @Factor
					, ItemSummary_Size07 = ItemSummary_Size07 + (Select Inventory_Qty_Size07 FROM Inserted) * @Factor
					, ItemSummary_Size08 = ItemSummary_Size08 + (Select Inventory_Qty_Size08 FROM Inserted) * @Factor
					, ItemSummary_Size09 = ItemSummary_Size09 + (Select Inventory_Qty_Size09 FROM Inserted) * @Factor
					, ItemSummary_Size10 = ItemSummary_Size10 + (Select Inventory_Qty_Size10 FROM Inserted) * @Factor
					, ItemSummary_Size11 = ItemSummary_Size11 + (Select Inventory_Qty_Size11 FROM Inserted) * @Factor
					, ItemSummary_Size12 = ItemSummary_Size12 + (Select Inventory_Qty_Size12 FROM Inserted) * @Factor
					, ItemSummary_Size13 = ItemSummary_Size13 + (Select Inventory_Qty_Size13 FROM Inserted) * @Factor
					, Stamp_DateTime = GetDate()
				WHERE  Co_Id = (Select Co_Id FROM Inserted) AND Source_First_Id = (Select Item_Id From Inserted)
					AND Source_DocumentType_ID = 15 AND Warehouse_ID = (Select Warehouse_ID From Inserted)
				END
			ELSE
				BEGIN
				INSERT INTO [Inv_ItemSummary]
				   ([Co_ID], [Source_First_ID], [Source_Second_ID], [Source_DocumentType_ID], [Warehouse_ID]
				   ,[ItemSummary_Size01], [ItemSummary_Size02], [ItemSummary_Size03]
				   ,[ItemSummary_Size04], [ItemSummary_Size05], [ItemSummary_Size06]
				   ,[ItemSummary_Size07], [ItemSummary_Size08], [ItemSummary_Size09]
				   ,[ItemSummary_Size10], [ItemSummary_Size11], [ItemSummary_Size12]
				   ,[ItemSummary_Size13], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime])
				SELECT Co_Id, Item_Id, 0, 15, [Warehouse_ID]		--Stock
					, Inventory_Qty_Size01 * @Factor, Inventory_Qty_Size02 * @Factor, Inventory_Qty_Size03 * @Factor
					, Inventory_Qty_Size04 * @Factor, Inventory_Qty_Size05 * @Factor, Inventory_Qty_Size06 * @Factor
					, Inventory_Qty_Size07 * @Factor, Inventory_Qty_Size08 * @Factor, Inventory_Qty_Size09 * @Factor
					, Inventory_Qty_Size10 * @Factor, Inventory_Qty_Size11 * @Factor, Inventory_Qty_Size12 * @Factor
					, Inventory_Qty_Size13 * @Factor, [Stamp_UserID], [Stamp_DateTime], NULL
					FROM Inserted
				END
			END
		END
GO
-- =============================================
-- Author:		Faisal
-- Create date: 07-Feb-2009
-- Description:	This trigger updates the ItemSummary table for Purchased Items info
-- =============================================
-- ------------ Modification History -----------
-- Author	Date		Details
-- ------   ----        -------
-- Faisal	01-Mar-2009	Added Comment header.
--						This trigger was inserting and updating always regardless of document type.
-- Faisal	16-May-2009 Incorporated warehouse_id in inventory tables.
-- Faisal	28-Jun-2010	Incase of record status 4 (deleted) factor set to 0 so that it does not
--						affect stock.
-- ---------------------------------------------
ALTER TRIGGER [trigUpdateItemSummaryPurchased]
   ON  [Inventory_Detail] 
   AFTER INSERT,DELETE,UPDATE
AS 
DECLARE @Factor AS INT

	IF (SELECT Count(*) FROM Deleted) > 0 AND (SELECT DocumentType_ID FROM Deleted) = 3
		BEGIN
		IF (SELECT RecordStatus_ID FROM Deleted) = 4	-- Deleted
			SET @Factor = 0		-- If record is deleted then there is no need to affect summary.
		ELSE
			SET @Factor = -1	--For Purchase
		--FOR SUMMARY TYPE Purchased
		IF (SELECT Count(*) FROM Inv_ItemSummary WHERE Co_Id = (Select Co_Id FROM Deleted) AND Source_First_Id = (Select Item_Id From Deleted) AND Source_DocumentType_ID = 16 AND Warehouse_ID = (Select Warehouse_ID From Deleted)) > 0 
			BEGIN
			UPDATE Inv_ItemSummary 
				SET ItemSummary_Size01 = ItemSummary_Size01 + (Select Inventory_Qty_Size01 FROM Deleted) * @Factor
				, ItemSummary_Size02 = ItemSummary_Size02 + (Select Inventory_Qty_Size02 FROM Deleted) * @Factor
				, ItemSummary_Size03 = ItemSummary_Size03 + (Select Inventory_Qty_Size03 FROM Deleted) * @Factor
				, ItemSummary_Size04 = ItemSummary_Size04 + (Select Inventory_Qty_Size04 FROM Deleted) * @Factor
				, ItemSummary_Size05 = ItemSummary_Size05 + (Select Inventory_Qty_Size05 FROM Deleted) * @Factor
				, ItemSummary_Size06 = ItemSummary_Size06 + (Select Inventory_Qty_Size06 FROM Deleted) * @Factor
				, ItemSummary_Size07 = ItemSummary_Size07 + (Select Inventory_Qty_Size07 FROM Deleted) * @Factor
				, ItemSummary_Size08 = ItemSummary_Size08 + (Select Inventory_Qty_Size08 FROM Deleted) * @Factor
				, ItemSummary_Size09 = ItemSummary_Size09 + (Select Inventory_Qty_Size09 FROM Deleted) * @Factor
				, ItemSummary_Size10 = ItemSummary_Size10 + (Select Inventory_Qty_Size10 FROM Deleted) * @Factor
				, ItemSummary_Size11 = ItemSummary_Size11 + (Select Inventory_Qty_Size11 FROM Deleted) * @Factor
				, ItemSummary_Size12 = ItemSummary_Size12 + (Select Inventory_Qty_Size12 FROM Deleted) * @Factor
				, ItemSummary_Size13 = ItemSummary_Size13 + (Select Inventory_Qty_Size13 FROM Deleted) * @Factor
				, Stamp_DateTime = GetDate()
			WHERE  Co_Id = (Select Co_Id FROM Deleted) AND Source_First_Id = (Select Item_Id From Deleted)
					AND Source_DocumentType_ID = 16 AND Warehouse_ID = (Select Warehouse_ID From Deleted)
			END
		ELSE
			BEGIN
			INSERT INTO [Inv_ItemSummary]
			   ([Co_ID], [Source_First_ID], [Source_Second_ID], [Source_DocumentType_ID], [Warehouse_ID]
			   ,[ItemSummary_Size01], [ItemSummary_Size02], [ItemSummary_Size03]
			   ,[ItemSummary_Size04], [ItemSummary_Size05], [ItemSummary_Size06]
			   ,[ItemSummary_Size07], [ItemSummary_Size08], [ItemSummary_Size09]
			   ,[ItemSummary_Size10], [ItemSummary_Size11], [ItemSummary_Size12]
			   ,[ItemSummary_Size13], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime])
			SELECT Co_Id, Item_Id, 0, 16, [Warehouse_ID]		--Purchased
				,Inventory_Qty_Size01 * @Factor, Inventory_Qty_Size02 * @Factor, Inventory_Qty_Size03 * @Factor
				, Inventory_Qty_Size04 * @Factor, Inventory_Qty_Size05 * @Factor, Inventory_Qty_Size06 * @Factor
				, Inventory_Qty_Size07 * @Factor, Inventory_Qty_Size08 * @Factor, Inventory_Qty_Size09 * @Factor
				, Inventory_Qty_Size10 * @Factor, Inventory_Qty_Size11 * @Factor, Inventory_Qty_Size12 * @Factor
				, Inventory_Qty_Size13 * @Factor, [Stamp_UserID], [Stamp_DateTime], NULL
				FROM Deleted
			END
		END

-- Add the values if inserted

	IF (SELECT Count(*) FROM Inserted) > 0 AND (SELECT DocumentType_ID FROM Inserted) = 3	--Purchase
		BEGIN
		IF (SELECT RecordStatus_ID FROM Deleted) = 4	-- Deleted
			SET @Factor = 0		-- If record is deleted then there is no need to affect summary.
		ELSE
			SET @Factor = 1
		--FOR SUMMARY TYPE Purchased
		IF (SELECT Count(*) FROM Inv_ItemSummary WHERE Co_Id = (Select Co_Id FROM Inserted) AND Source_First_Id = (Select Item_Id From Inserted) AND Source_DocumentType_ID = 16 AND Warehouse_ID = (Select Warehouse_ID From Inserted)) > 0 
			BEGIN
			UPDATE Inv_ItemSummary 
				SET ItemSummary_Size01 = ItemSummary_Size01 + (Select Inventory_Qty_Size01 FROM Inserted) * @Factor
				, ItemSummary_Size02 = ItemSummary_Size02 + (Select Inventory_Qty_Size02 FROM Inserted) * @Factor
				, ItemSummary_Size03 = ItemSummary_Size03 + (Select Inventory_Qty_Size03 FROM Inserted) * @Factor
				, ItemSummary_Size04 = ItemSummary_Size04 + (Select Inventory_Qty_Size04 FROM Inserted) * @Factor
				, ItemSummary_Size05 = ItemSummary_Size05 + (Select Inventory_Qty_Size05 FROM Inserted) * @Factor
				, ItemSummary_Size06 = ItemSummary_Size06 + (Select Inventory_Qty_Size06 FROM Inserted) * @Factor
				, ItemSummary_Size07 = ItemSummary_Size07 + (Select Inventory_Qty_Size07 FROM Inserted) * @Factor
				, ItemSummary_Size08 = ItemSummary_Size08 + (Select Inventory_Qty_Size08 FROM Inserted) * @Factor
				, ItemSummary_Size09 = ItemSummary_Size09 + (Select Inventory_Qty_Size09 FROM Inserted) * @Factor
				, ItemSummary_Size10 = ItemSummary_Size10 + (Select Inventory_Qty_Size10 FROM Inserted) * @Factor
				, ItemSummary_Size11 = ItemSummary_Size11 + (Select Inventory_Qty_Size11 FROM Inserted) * @Factor
				, ItemSummary_Size12 = ItemSummary_Size12 + (Select Inventory_Qty_Size12 FROM Inserted) * @Factor
				, ItemSummary_Size13 = ItemSummary_Size13 + (Select Inventory_Qty_Size13 FROM Inserted) * @Factor
				, Stamp_DateTime = GetDate()
			WHERE  Co_Id = (Select Co_Id FROM Inserted) AND Source_First_Id = (Select Item_Id From Inserted)
				AND Source_DocumentType_ID = 16 AND Warehouse_ID = (Select Warehouse_ID From Inserted)	--Purchased
			END
		ELSE
			BEGIN
			INSERT INTO [Inv_ItemSummary]
			   ([Co_ID], [Source_First_ID], [Source_Second_ID], [Source_DocumentType_ID], [Warehouse_ID]
			   ,[ItemSummary_Size01], [ItemSummary_Size02], [ItemSummary_Size03]
			   ,[ItemSummary_Size04], [ItemSummary_Size05], [ItemSummary_Size06]
			   ,[ItemSummary_Size07], [ItemSummary_Size08], [ItemSummary_Size09]
			   ,[ItemSummary_Size10], [ItemSummary_Size11], [ItemSummary_Size12]
			   ,[ItemSummary_Size13], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime])
			SELECT Co_Id, Item_Id, 0, 16, [Warehouse_ID]		--Purchased
				, Inventory_Qty_Size01 * @Factor, Inventory_Qty_Size02 * @Factor, Inventory_Qty_Size03 * @Factor
				, Inventory_Qty_Size04 * @Factor, Inventory_Qty_Size05 * @Factor, Inventory_Qty_Size06 * @Factor
				, Inventory_Qty_Size07 * @Factor, Inventory_Qty_Size08 * @Factor, Inventory_Qty_Size09 * @Factor
				, Inventory_Qty_Size10 * @Factor, Inventory_Qty_Size11 * @Factor, Inventory_Qty_Size12 * @Factor
				, Inventory_Qty_Size13 * @Factor, [Stamp_UserID], [Stamp_DateTime], NULL
				FROM Inserted
			END
		END
GO
-- =============================================
-- Author:		Faisal
-- Create date: 07-Feb-2009
-- Description:	This trigger updates the ItemSummary table for Sold Items info
-- =============================================
-- ------------ Modification History -----------
-- Author	Date		Details
-- ------   ----        -------
-- Faisal	01-Mar-2009	Added Comment header.
--						This trigger was inserting and updating always regardless of document type.
-- Faisal	16-May-2009 Incorporated warehouse_id in inventory tables.
-- ---------------------------------------------
ALTER TRIGGER [trigUpdateItemSummarySold]
   ON  [Inventory_Detail] 
   AFTER INSERT,DELETE,UPDATE
AS 
DECLARE @Factor AS INT
	
	IF (SELECT Count(*) FROM Deleted) > 0 AND (SELECT DocumentType_ID FROM Deleted) = 1	--Sales
		BEGIN
		IF (SELECT RecordStatus_ID FROM Deleted) = 4	-- Deleted
			SET @Factor = 0		-- If record is deleted then there is no need to affect summary.
		ELSE
			SET @Factor = -1	--For Sold
		--FOR SUMMARY TYPE Sold
		IF (SELECT Count(*) FROM Inv_ItemSummary WHERE Co_Id = (Select Co_Id FROM Deleted) AND Source_First_Id = (Select Item_Id From Deleted) AND Source_DocumentType_ID = 17 AND Warehouse_ID = (Select Warehouse_ID From Deleted)) > 0 
			BEGIN
			UPDATE Inv_ItemSummary 
				SET ItemSummary_Size01 = ItemSummary_Size01 + (Select Inventory_Qty_Size01 FROM Deleted) * @Factor
				, ItemSummary_Size02 = ItemSummary_Size02 + (Select Inventory_Qty_Size02 FROM Deleted) * @Factor
				, ItemSummary_Size03 = ItemSummary_Size03 + (Select Inventory_Qty_Size03 FROM Deleted) * @Factor
				, ItemSummary_Size04 = ItemSummary_Size04 + (Select Inventory_Qty_Size04 FROM Deleted) * @Factor
				, ItemSummary_Size05 = ItemSummary_Size05 + (Select Inventory_Qty_Size05 FROM Deleted) * @Factor
				, ItemSummary_Size06 = ItemSummary_Size06 + (Select Inventory_Qty_Size06 FROM Deleted) * @Factor
				, ItemSummary_Size07 = ItemSummary_Size07 + (Select Inventory_Qty_Size07 FROM Deleted) * @Factor
				, ItemSummary_Size08 = ItemSummary_Size08 + (Select Inventory_Qty_Size08 FROM Deleted) * @Factor
				, ItemSummary_Size09 = ItemSummary_Size09 + (Select Inventory_Qty_Size09 FROM Deleted) * @Factor
				, ItemSummary_Size10 = ItemSummary_Size10 + (Select Inventory_Qty_Size10 FROM Deleted) * @Factor
				, ItemSummary_Size11 = ItemSummary_Size11 + (Select Inventory_Qty_Size11 FROM Deleted) * @Factor
				, ItemSummary_Size12 = ItemSummary_Size12 + (Select Inventory_Qty_Size12 FROM Deleted) * @Factor
				, ItemSummary_Size13 = ItemSummary_Size13 + (Select Inventory_Qty_Size13 FROM Deleted) * @Factor
				, Stamp_DateTime = GetDate()
			WHERE  Co_Id = (Select Co_Id FROM Deleted) AND Source_First_Id = (Select Item_Id From Deleted)
					AND Source_DocumentType_ID = 17 AND Warehouse_ID = (Select Warehouse_ID From Deleted)
			END
		ELSE
			BEGIN
			INSERT INTO [Inv_ItemSummary]
			   ([Co_ID], [Source_First_ID], [Source_Second_ID], [Source_DocumentType_ID], [Warehouse_ID]
			   ,[ItemSummary_Size01], [ItemSummary_Size02], [ItemSummary_Size03]
			   ,[ItemSummary_Size04], [ItemSummary_Size05], [ItemSummary_Size06]
			   ,[ItemSummary_Size07], [ItemSummary_Size08], [ItemSummary_Size09]
			   ,[ItemSummary_Size10], [ItemSummary_Size11], [ItemSummary_Size12]
			   ,[ItemSummary_Size13], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime])
			SELECT Co_Id, Item_Id, 0, 17, [Warehouse_ID]		--Sold
				,Inventory_Qty_Size01 * @Factor, Inventory_Qty_Size02 * @Factor, Inventory_Qty_Size03 * @Factor
				, Inventory_Qty_Size04 * @Factor, Inventory_Qty_Size05 * @Factor, Inventory_Qty_Size06 * @Factor
				, Inventory_Qty_Size07 * @Factor, Inventory_Qty_Size08 * @Factor, Inventory_Qty_Size09 * @Factor
				, Inventory_Qty_Size10 * @Factor, Inventory_Qty_Size11 * @Factor, Inventory_Qty_Size12 * @Factor
				, Inventory_Qty_Size13 * @Factor, [Stamp_UserID], [Stamp_DateTime], NULL
				FROM Deleted
			END
		END

-- Add the values if inserted

	IF (SELECT Count(*) FROM Inserted) > 0 AND (SELECT DocumentType_ID FROM Inserted) = 1	--Sales
		BEGIN
		IF (SELECT RecordStatus_ID FROM Deleted) = 4	-- Deleted
			SET @Factor = 0		-- If record is deleted then there is no need to affect summary.
		ELSE
			SET @Factor = 1	
		--FOR SUMMARY TYPE Sold
		IF (SELECT Count(*) FROM Inv_ItemSummary WHERE Co_Id = (Select Co_Id FROM Inserted) AND Source_First_Id = (Select Item_Id From Inserted) AND Source_DocumentType_ID = 17 AND Warehouse_ID = (Select Warehouse_ID From Inserted)) > 0 
			BEGIN
			UPDATE Inv_ItemSummary 
				SET ItemSummary_Size01 = ItemSummary_Size01 + (Select Inventory_Qty_Size01 FROM Inserted) * @Factor
				, ItemSummary_Size02 = ItemSummary_Size02 + (Select Inventory_Qty_Size02 FROM Inserted) * @Factor
				, ItemSummary_Size03 = ItemSummary_Size03 + (Select Inventory_Qty_Size03 FROM Inserted) * @Factor
				, ItemSummary_Size04 = ItemSummary_Size04 + (Select Inventory_Qty_Size04 FROM Inserted) * @Factor
				, ItemSummary_Size05 = ItemSummary_Size05 + (Select Inventory_Qty_Size05 FROM Inserted) * @Factor
				, ItemSummary_Size06 = ItemSummary_Size06 + (Select Inventory_Qty_Size06 FROM Inserted) * @Factor
				, ItemSummary_Size07 = ItemSummary_Size07 + (Select Inventory_Qty_Size07 FROM Inserted) * @Factor
				, ItemSummary_Size08 = ItemSummary_Size08 + (Select Inventory_Qty_Size08 FROM Inserted) * @Factor
				, ItemSummary_Size09 = ItemSummary_Size09 + (Select Inventory_Qty_Size09 FROM Inserted) * @Factor
				, ItemSummary_Size10 = ItemSummary_Size10 + (Select Inventory_Qty_Size10 FROM Inserted) * @Factor
				, ItemSummary_Size11 = ItemSummary_Size11 + (Select Inventory_Qty_Size11 FROM Inserted) * @Factor
				, ItemSummary_Size12 = ItemSummary_Size12 + (Select Inventory_Qty_Size12 FROM Inserted) * @Factor
				, ItemSummary_Size13 = ItemSummary_Size13 + (Select Inventory_Qty_Size13 FROM Inserted) * @Factor
				, Stamp_DateTime = GetDate()
			WHERE  Co_Id = (Select Co_Id FROM Inserted) AND Source_First_Id = (Select Item_Id From Inserted)
				AND Source_DocumentType_ID = 17 AND Warehouse_ID = (Select Warehouse_ID From Inserted)
			END
		ELSE
			BEGIN
			INSERT INTO [Inv_ItemSummary]
			   ([Co_ID], [Source_First_ID], [Source_Second_ID], [Source_DocumentType_ID], [Warehouse_ID]
			   ,[ItemSummary_Size01], [ItemSummary_Size02], [ItemSummary_Size03]
			   ,[ItemSummary_Size04], [ItemSummary_Size05], [ItemSummary_Size06]
			   ,[ItemSummary_Size07], [ItemSummary_Size08], [ItemSummary_Size09]
			   ,[ItemSummary_Size10], [ItemSummary_Size11], [ItemSummary_Size12]
			   ,[ItemSummary_Size13], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime])
			SELECT Co_Id, Item_Id, 0, 17, [Warehouse_ID]		--Purchased
				, Inventory_Qty_Size01 * @Factor, Inventory_Qty_Size02 * @Factor, Inventory_Qty_Size03 * @Factor
				, Inventory_Qty_Size04 * @Factor, Inventory_Qty_Size05 * @Factor, Inventory_Qty_Size06 * @Factor
				, Inventory_Qty_Size07 * @Factor, Inventory_Qty_Size08 * @Factor, Inventory_Qty_Size09 * @Factor
				, Inventory_Qty_Size10 * @Factor, Inventory_Qty_Size11 * @Factor, Inventory_Qty_Size12 * @Factor
				, Inventory_Qty_Size13 * @Factor, [Stamp_UserID], [Stamp_DateTime], NULL
				FROM Inserted
			END
		END
go
DELETE FROM Inv_ItemSummary
go
exec [spRecalculateItemSummary] 0, 0, 16		--Purchased
go
exec [spRecalculateItemSummary] 0, 0, 16		--Sold
go
exec [spRecalculateItemSummary] 0, 0, 15		--Stock