'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3623
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("QuickProductionDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class QuickProductionDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableProductionProcess As ProductionProcessDataTable
    
    Private tableProductionProcessWorkFlow As ProductionProcessWorkFlowDataTable
    
    Private tableFormula As FormulaDataTable
    
    Private tableFormulaDetail As FormulaDetailDataTable
    
    Private tableOrder As OrderDataTable
    
    Private tableOrderDetail As OrderDetailDataTable
    
    Private tableOrderBatch As OrderBatchDataTable
    
    Private tableOrderBatchDetail As OrderBatchDetailDataTable
    
    Private tableProcessProduction As ProcessProductionDataTable
    
    Private tableProcessProductionDetail As ProcessProductionDetailDataTable
    
    Private tableProcessBalance As ProcessBalanceDataTable
    
    Private relationFK_Production_ProcessWorkFlow_Production_Process1 As Global.System.Data.DataRelation
    
    Private relationFK_Production_ProcessWorkFlow_Production_Process2 As Global.System.Data.DataRelation
    
    Private relationFK_Production_Formula_Formula_Detail As Global.System.Data.DataRelation
    
    Private relationFK_Production_Formula_Order_Detail As Global.System.Data.DataRelation
    
    Private relationFK_Production_Order_Order_Detail As Global.System.Data.DataRelation
    
    Private relationFK_Production_Order_OrderBatch As Global.System.Data.DataRelation
    
    Private relationFK_Production_OrderBatch_OrderBatch_Detail As Global.System.Data.DataRelation
    
    Private relationFK_Order_ProcessProduction As Global.System.Data.DataRelation
    
    Private relationFK_OrderBatch_ProcessProduction As Global.System.Data.DataRelation
    
    Private relationFK_ProcessProduction_ProcessProduction_Detail As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ProductionProcess")) Is Nothing) Then
                MyBase.Tables.Add(New ProductionProcessDataTable(ds.Tables("ProductionProcess")))
            End If
            If (Not (ds.Tables("ProductionProcessWorkFlow")) Is Nothing) Then
                MyBase.Tables.Add(New ProductionProcessWorkFlowDataTable(ds.Tables("ProductionProcessWorkFlow")))
            End If
            If (Not (ds.Tables("Formula")) Is Nothing) Then
                MyBase.Tables.Add(New FormulaDataTable(ds.Tables("Formula")))
            End If
            If (Not (ds.Tables("FormulaDetail")) Is Nothing) Then
                MyBase.Tables.Add(New FormulaDetailDataTable(ds.Tables("FormulaDetail")))
            End If
            If (Not (ds.Tables("Order")) Is Nothing) Then
                MyBase.Tables.Add(New OrderDataTable(ds.Tables("Order")))
            End If
            If (Not (ds.Tables("OrderDetail")) Is Nothing) Then
                MyBase.Tables.Add(New OrderDetailDataTable(ds.Tables("OrderDetail")))
            End If
            If (Not (ds.Tables("OrderBatch")) Is Nothing) Then
                MyBase.Tables.Add(New OrderBatchDataTable(ds.Tables("OrderBatch")))
            End If
            If (Not (ds.Tables("OrderBatchDetail")) Is Nothing) Then
                MyBase.Tables.Add(New OrderBatchDetailDataTable(ds.Tables("OrderBatchDetail")))
            End If
            If (Not (ds.Tables("ProcessProduction")) Is Nothing) Then
                MyBase.Tables.Add(New ProcessProductionDataTable(ds.Tables("ProcessProduction")))
            End If
            If (Not (ds.Tables("ProcessProductionDetail")) Is Nothing) Then
                MyBase.Tables.Add(New ProcessProductionDetailDataTable(ds.Tables("ProcessProductionDetail")))
            End If
            If (Not (ds.Tables("ProcessBalance")) Is Nothing) Then
                MyBase.Tables.Add(New ProcessBalanceDataTable(ds.Tables("ProcessBalance")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProductionProcess() As ProductionProcessDataTable
        Get
            Return Me.tableProductionProcess
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProductionProcessWorkFlow() As ProductionProcessWorkFlowDataTable
        Get
            Return Me.tableProductionProcessWorkFlow
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Formula() As FormulaDataTable
        Get
            Return Me.tableFormula
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FormulaDetail() As FormulaDetailDataTable
        Get
            Return Me.tableFormulaDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Order() As OrderDataTable
        Get
            Return Me.tableOrder
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrderDetail() As OrderDetailDataTable
        Get
            Return Me.tableOrderDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrderBatch() As OrderBatchDataTable
        Get
            Return Me.tableOrderBatch
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrderBatchDetail() As OrderBatchDetailDataTable
        Get
            Return Me.tableOrderBatchDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProcessProduction() As ProcessProductionDataTable
        Get
            Return Me.tableProcessProduction
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProcessProductionDetail() As ProcessProductionDetailDataTable
        Get
            Return Me.tableProcessProductionDetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProcessBalance() As ProcessBalanceDataTable
        Get
            Return Me.tableProcessBalance
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As QuickProductionDataSet = CType(MyBase.Clone,QuickProductionDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ProductionProcess")) Is Nothing) Then
                MyBase.Tables.Add(New ProductionProcessDataTable(ds.Tables("ProductionProcess")))
            End If
            If (Not (ds.Tables("ProductionProcessWorkFlow")) Is Nothing) Then
                MyBase.Tables.Add(New ProductionProcessWorkFlowDataTable(ds.Tables("ProductionProcessWorkFlow")))
            End If
            If (Not (ds.Tables("Formula")) Is Nothing) Then
                MyBase.Tables.Add(New FormulaDataTable(ds.Tables("Formula")))
            End If
            If (Not (ds.Tables("FormulaDetail")) Is Nothing) Then
                MyBase.Tables.Add(New FormulaDetailDataTable(ds.Tables("FormulaDetail")))
            End If
            If (Not (ds.Tables("Order")) Is Nothing) Then
                MyBase.Tables.Add(New OrderDataTable(ds.Tables("Order")))
            End If
            If (Not (ds.Tables("OrderDetail")) Is Nothing) Then
                MyBase.Tables.Add(New OrderDetailDataTable(ds.Tables("OrderDetail")))
            End If
            If (Not (ds.Tables("OrderBatch")) Is Nothing) Then
                MyBase.Tables.Add(New OrderBatchDataTable(ds.Tables("OrderBatch")))
            End If
            If (Not (ds.Tables("OrderBatchDetail")) Is Nothing) Then
                MyBase.Tables.Add(New OrderBatchDetailDataTable(ds.Tables("OrderBatchDetail")))
            End If
            If (Not (ds.Tables("ProcessProduction")) Is Nothing) Then
                MyBase.Tables.Add(New ProcessProductionDataTable(ds.Tables("ProcessProduction")))
            End If
            If (Not (ds.Tables("ProcessProductionDetail")) Is Nothing) Then
                MyBase.Tables.Add(New ProcessProductionDetailDataTable(ds.Tables("ProcessProductionDetail")))
            End If
            If (Not (ds.Tables("ProcessBalance")) Is Nothing) Then
                MyBase.Tables.Add(New ProcessBalanceDataTable(ds.Tables("ProcessBalance")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableProductionProcess = CType(MyBase.Tables("ProductionProcess"),ProductionProcessDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProductionProcess) Is Nothing) Then
                Me.tableProductionProcess.InitVars
            End If
        End If
        Me.tableProductionProcessWorkFlow = CType(MyBase.Tables("ProductionProcessWorkFlow"),ProductionProcessWorkFlowDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProductionProcessWorkFlow) Is Nothing) Then
                Me.tableProductionProcessWorkFlow.InitVars
            End If
        End If
        Me.tableFormula = CType(MyBase.Tables("Formula"),FormulaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFormula) Is Nothing) Then
                Me.tableFormula.InitVars
            End If
        End If
        Me.tableFormulaDetail = CType(MyBase.Tables("FormulaDetail"),FormulaDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFormulaDetail) Is Nothing) Then
                Me.tableFormulaDetail.InitVars
            End If
        End If
        Me.tableOrder = CType(MyBase.Tables("Order"),OrderDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOrder) Is Nothing) Then
                Me.tableOrder.InitVars
            End If
        End If
        Me.tableOrderDetail = CType(MyBase.Tables("OrderDetail"),OrderDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOrderDetail) Is Nothing) Then
                Me.tableOrderDetail.InitVars
            End If
        End If
        Me.tableOrderBatch = CType(MyBase.Tables("OrderBatch"),OrderBatchDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOrderBatch) Is Nothing) Then
                Me.tableOrderBatch.InitVars
            End If
        End If
        Me.tableOrderBatchDetail = CType(MyBase.Tables("OrderBatchDetail"),OrderBatchDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOrderBatchDetail) Is Nothing) Then
                Me.tableOrderBatchDetail.InitVars
            End If
        End If
        Me.tableProcessProduction = CType(MyBase.Tables("ProcessProduction"),ProcessProductionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProcessProduction) Is Nothing) Then
                Me.tableProcessProduction.InitVars
            End If
        End If
        Me.tableProcessProductionDetail = CType(MyBase.Tables("ProcessProductionDetail"),ProcessProductionDetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProcessProductionDetail) Is Nothing) Then
                Me.tableProcessProductionDetail.InitVars
            End If
        End If
        Me.tableProcessBalance = CType(MyBase.Tables("ProcessBalance"),ProcessBalanceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProcessBalance) Is Nothing) Then
                Me.tableProcessBalance.InitVars
            End If
        End If
        Me.relationFK_Production_ProcessWorkFlow_Production_Process1 = Me.Relations("FK_Production_ProcessWorkFlow_Production_Process1")
        Me.relationFK_Production_ProcessWorkFlow_Production_Process2 = Me.Relations("FK_Production_ProcessWorkFlow_Production_Process2")
        Me.relationFK_Production_Formula_Formula_Detail = Me.Relations("FK_Production_Formula_Formula_Detail")
        Me.relationFK_Production_Formula_Order_Detail = Me.Relations("FK_Production_Formula_Order_Detail")
        Me.relationFK_Production_Order_Order_Detail = Me.Relations("FK_Production_Order_Order_Detail")
        Me.relationFK_Production_Order_OrderBatch = Me.Relations("FK_Production_Order_OrderBatch")
        Me.relationFK_Production_OrderBatch_OrderBatch_Detail = Me.Relations("FK_Production_OrderBatch_OrderBatch_Detail")
        Me.relationFK_Order_ProcessProduction = Me.Relations("FK_Order_ProcessProduction")
        Me.relationFK_OrderBatch_ProcessProduction = Me.Relations("FK_OrderBatch_ProcessProduction")
        Me.relationFK_ProcessProduction_ProcessProduction_Detail = Me.Relations("FK_ProcessProduction_ProcessProduction_Detail")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "QuickProductionDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/QuickProductionDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableProductionProcess = New ProductionProcessDataTable
        MyBase.Tables.Add(Me.tableProductionProcess)
        Me.tableProductionProcessWorkFlow = New ProductionProcessWorkFlowDataTable
        MyBase.Tables.Add(Me.tableProductionProcessWorkFlow)
        Me.tableFormula = New FormulaDataTable
        MyBase.Tables.Add(Me.tableFormula)
        Me.tableFormulaDetail = New FormulaDetailDataTable
        MyBase.Tables.Add(Me.tableFormulaDetail)
        Me.tableOrder = New OrderDataTable
        MyBase.Tables.Add(Me.tableOrder)
        Me.tableOrderDetail = New OrderDetailDataTable
        MyBase.Tables.Add(Me.tableOrderDetail)
        Me.tableOrderBatch = New OrderBatchDataTable
        MyBase.Tables.Add(Me.tableOrderBatch)
        Me.tableOrderBatchDetail = New OrderBatchDetailDataTable
        MyBase.Tables.Add(Me.tableOrderBatchDetail)
        Me.tableProcessProduction = New ProcessProductionDataTable
        MyBase.Tables.Add(Me.tableProcessProduction)
        Me.tableProcessProductionDetail = New ProcessProductionDetailDataTable
        MyBase.Tables.Add(Me.tableProcessProductionDetail)
        Me.tableProcessBalance = New ProcessBalanceDataTable
        MyBase.Tables.Add(Me.tableProcessBalance)
        Me.relationFK_Production_ProcessWorkFlow_Production_Process1 = New Global.System.Data.DataRelation("FK_Production_ProcessWorkFlow_Production_Process1", New Global.System.Data.DataColumn() {Me.tableProductionProcess.Co_IDColumn, Me.tableProductionProcess.Process_IDColumn}, New Global.System.Data.DataColumn() {Me.tableProductionProcessWorkFlow.Co_IDColumn, Me.tableProductionProcessWorkFlow.Source_Process_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Production_ProcessWorkFlow_Production_Process1)
        Me.relationFK_Production_ProcessWorkFlow_Production_Process2 = New Global.System.Data.DataRelation("FK_Production_ProcessWorkFlow_Production_Process2", New Global.System.Data.DataColumn() {Me.tableProductionProcess.Co_IDColumn, Me.tableProductionProcess.Process_IDColumn}, New Global.System.Data.DataColumn() {Me.tableProductionProcessWorkFlow.Co_IDColumn, Me.tableProductionProcessWorkFlow.Destination_Process_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Production_ProcessWorkFlow_Production_Process2)
        Me.relationFK_Production_Formula_Formula_Detail = New Global.System.Data.DataRelation("FK_Production_Formula_Formula_Detail", New Global.System.Data.DataColumn() {Me.tableFormula.Co_IDColumn, Me.tableFormula.Formula_IDColumn}, New Global.System.Data.DataColumn() {Me.tableFormulaDetail.Co_IDColumn, Me.tableFormulaDetail.Formula_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Production_Formula_Formula_Detail)
        Me.relationFK_Production_Formula_Order_Detail = New Global.System.Data.DataRelation("FK_Production_Formula_Order_Detail", New Global.System.Data.DataColumn() {Me.tableFormula.Co_IDColumn, Me.tableFormula.Formula_IDColumn}, New Global.System.Data.DataColumn() {Me.tableOrderDetail.Co_IDColumn, Me.tableOrderDetail.Formula_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Production_Formula_Order_Detail)
        Me.relationFK_Production_Order_Order_Detail = New Global.System.Data.DataRelation("FK_Production_Order_Order_Detail", New Global.System.Data.DataColumn() {Me.tableOrder.Co_IDColumn, Me.tableOrder.Order_IDColumn}, New Global.System.Data.DataColumn() {Me.tableOrderDetail.Co_IDColumn, Me.tableOrderDetail.Order_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Production_Order_Order_Detail)
        Me.relationFK_Production_Order_OrderBatch = New Global.System.Data.DataRelation("FK_Production_Order_OrderBatch", New Global.System.Data.DataColumn() {Me.tableOrder.Co_IDColumn, Me.tableOrder.Order_IDColumn}, New Global.System.Data.DataColumn() {Me.tableOrderBatch.Co_IDColumn, Me.tableOrderBatch.Order_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Production_Order_OrderBatch)
        Me.relationFK_Production_OrderBatch_OrderBatch_Detail = New Global.System.Data.DataRelation("FK_Production_OrderBatch_OrderBatch_Detail", New Global.System.Data.DataColumn() {Me.tableOrderBatch.Co_IDColumn, Me.tableOrderBatch.OrderBatch_IDColumn}, New Global.System.Data.DataColumn() {Me.tableOrderBatchDetail.Co_IDColumn, Me.tableOrderBatchDetail.OrderBatch_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Production_OrderBatch_OrderBatch_Detail)
        Me.relationFK_Order_ProcessProduction = New Global.System.Data.DataRelation("FK_Order_ProcessProduction", New Global.System.Data.DataColumn() {Me.tableOrder.Co_IDColumn, Me.tableOrder.Order_IDColumn}, New Global.System.Data.DataColumn() {Me.tableProcessProduction.Co_IDColumn, Me.tableProcessProduction.Order_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_Order_ProcessProduction)
        Me.relationFK_OrderBatch_ProcessProduction = New Global.System.Data.DataRelation("FK_OrderBatch_ProcessProduction", New Global.System.Data.DataColumn() {Me.tableOrderBatch.Co_IDColumn, Me.tableOrderBatch.OrderBatch_IDColumn}, New Global.System.Data.DataColumn() {Me.tableProcessProduction.Co_IDColumn, Me.tableProcessProduction.OrderBatch_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_OrderBatch_ProcessProduction)
        Me.relationFK_ProcessProduction_ProcessProduction_Detail = New Global.System.Data.DataRelation("FK_ProcessProduction_ProcessProduction_Detail", New Global.System.Data.DataColumn() {Me.tableProcessProduction.Co_IDColumn, Me.tableProcessProduction.Production_IDColumn}, New Global.System.Data.DataColumn() {Me.tableProcessProductionDetail.Co_IDColumn, Me.tableProcessProductionDetail.Production_IDColumn}, false)
        Me.Relations.Add(Me.relationFK_ProcessProduction_ProcessProduction_Detail)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProductionProcess() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProductionProcessWorkFlow() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFormula() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFormulaDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOrder() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOrderDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOrderBatch() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOrderBatchDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProcessProduction() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProcessProductionDetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProcessBalance() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As QuickProductionDataSet = New QuickProductionDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ProductionProcessRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductionProcessRowChangeEvent)
    
    Public Delegate Sub ProductionProcessWorkFlowRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductionProcessWorkFlowRowChangeEvent)
    
    Public Delegate Sub FormulaRowChangeEventHandler(ByVal sender As Object, ByVal e As FormulaRowChangeEvent)
    
    Public Delegate Sub FormulaDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As FormulaDetailRowChangeEvent)
    
    Public Delegate Sub OrderRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderRowChangeEvent)
    
    Public Delegate Sub OrderDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderDetailRowChangeEvent)
    
    Public Delegate Sub OrderBatchRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderBatchRowChangeEvent)
    
    Public Delegate Sub OrderBatchDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderBatchDetailRowChangeEvent)
    
    Public Delegate Sub ProcessProductionRowChangeEventHandler(ByVal sender As Object, ByVal e As ProcessProductionRowChangeEvent)
    
    Public Delegate Sub ProcessProductionDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As ProcessProductionDetailRowChangeEvent)
    
    Public Delegate Sub ProcessBalanceRowChangeEventHandler(ByVal sender As Object, ByVal e As ProcessBalanceRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProductionProcessDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnProcess_ID As Global.System.Data.DataColumn
        
        Private columnProcess_Code As Global.System.Data.DataColumn
        
        Private columnProcess_Desc As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProductionProcess"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Process_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcess_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Process_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcess_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Process_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcess_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductionProcessRow
            Get
                Return CType(Me.Rows(index),ProductionProcessRow)
            End Get
        End Property
        
        Public Event ProductionProcessRowChanging As ProductionProcessRowChangeEventHandler
        
        Public Event ProductionProcessRowChanged As ProductionProcessRowChangeEventHandler
        
        Public Event ProductionProcessRowDeleting As ProductionProcessRowChangeEventHandler
        
        Public Event ProductionProcessRowDeleted As ProductionProcessRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProductionProcessRow(ByVal row As ProductionProcessRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProductionProcessRow(ByVal Co_ID As Short, ByVal Process_ID As Short, ByVal Process_Code As String, ByVal Process_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer) As ProductionProcessRow
            Dim rowProductionProcessRow As ProductionProcessRow = CType(Me.NewRow,ProductionProcessRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Process_ID, Process_Code, Process_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID}
            rowProductionProcessRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProductionProcessRow)
            Return rowProductionProcessRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDProcess_ID(ByVal Co_ID As Short, ByVal Process_ID As Short) As ProductionProcessRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Process_ID}),ProductionProcessRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProductionProcessDataTable = CType(MyBase.Clone,ProductionProcessDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProductionProcessDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnProcess_ID = MyBase.Columns("Process_ID")
            Me.columnProcess_Code = MyBase.Columns("Process_Code")
            Me.columnProcess_Desc = MyBase.Columns("Process_Desc")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnProcess_ID = New Global.System.Data.DataColumn("Process_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcess_ID)
            Me.columnProcess_Code = New Global.System.Data.DataColumn("Process_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcess_Code)
            Me.columnProcess_Desc = New Global.System.Data.DataColumn("Process_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcess_Desc)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnProcess_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnProcess_ID.AllowDBNull = false
            Me.columnProcess_Code.AllowDBNull = false
            Me.columnProcess_Code.MaxLength = 50
            Me.columnProcess_Desc.AllowDBNull = false
            Me.columnProcess_Desc.MaxLength = 250
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProductionProcessRow() As ProductionProcessRow
            Return CType(Me.NewRow,ProductionProcessRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProductionProcessRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProductionProcessRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductionProcessRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductionProcessRowChanged(Me, New ProductionProcessRowChangeEvent(CType(e.Row,ProductionProcessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductionProcessRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductionProcessRowChanging(Me, New ProductionProcessRowChangeEvent(CType(e.Row,ProductionProcessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductionProcessRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductionProcessRowDeleted(Me, New ProductionProcessRowChangeEvent(CType(e.Row,ProductionProcessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductionProcessRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductionProcessRowDeleting(Me, New ProductionProcessRowChangeEvent(CType(e.Row,ProductionProcessRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProductionProcessRow(ByVal row As ProductionProcessRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProductionProcessDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProductionProcessWorkFlowDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnProcessWorkFlow_ID As Global.System.Data.DataColumn
        
        Private columnSource_Process_ID As Global.System.Data.DataColumn
        
        Private columnSource_Process_Desc As Global.System.Data.DataColumn
        
        Private columnDestination_Process_ID As Global.System.Data.DataColumn
        
        Private columnDestination_Process_Desc As Global.System.Data.DataColumn
        
        Private columnProcessWorkFlow_Desc As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProductionProcessWorkFlow"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProcessWorkFlow_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcessWorkFlow_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Source_Process_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource_Process_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Source_Process_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource_Process_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Destination_Process_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDestination_Process_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Destination_Process_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDestination_Process_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProcessWorkFlow_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcessWorkFlow_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductionProcessWorkFlowRow
            Get
                Return CType(Me.Rows(index),ProductionProcessWorkFlowRow)
            End Get
        End Property
        
        Public Event ProductionProcessWorkFlowRowChanging As ProductionProcessWorkFlowRowChangeEventHandler
        
        Public Event ProductionProcessWorkFlowRowChanged As ProductionProcessWorkFlowRowChangeEventHandler
        
        Public Event ProductionProcessWorkFlowRowDeleting As ProductionProcessWorkFlowRowChangeEventHandler
        
        Public Event ProductionProcessWorkFlowRowDeleted As ProductionProcessWorkFlowRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProductionProcessWorkFlowRow(ByVal row As ProductionProcessWorkFlowRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProductionProcessWorkFlowRow(ByVal Co_ID As Short, ByVal ProcessWorkFlow_ID As Integer, ByVal Source_Process_ID As Short, ByVal Source_Process_Desc As String, ByVal Destination_Process_ID As Short, ByVal Destination_Process_Desc As String, ByVal ProcessWorkFlow_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer) As ProductionProcessWorkFlowRow
            Dim rowProductionProcessWorkFlowRow As ProductionProcessWorkFlowRow = CType(Me.NewRow,ProductionProcessWorkFlowRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, ProcessWorkFlow_ID, Source_Process_ID, Source_Process_Desc, Destination_Process_ID, Destination_Process_Desc, ProcessWorkFlow_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID}
            rowProductionProcessWorkFlowRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProductionProcessWorkFlowRow)
            Return rowProductionProcessWorkFlowRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDProcessWorkFlow_ID(ByVal Co_ID As Short, ByVal ProcessWorkFlow_ID As Integer) As ProductionProcessWorkFlowRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, ProcessWorkFlow_ID}),ProductionProcessWorkFlowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProductionProcessWorkFlowDataTable = CType(MyBase.Clone,ProductionProcessWorkFlowDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProductionProcessWorkFlowDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnProcessWorkFlow_ID = MyBase.Columns("ProcessWorkFlow_ID")
            Me.columnSource_Process_ID = MyBase.Columns("Source_Process_ID")
            Me.columnSource_Process_Desc = MyBase.Columns("Source_Process_Desc")
            Me.columnDestination_Process_ID = MyBase.Columns("Destination_Process_ID")
            Me.columnDestination_Process_Desc = MyBase.Columns("Destination_Process_Desc")
            Me.columnProcessWorkFlow_Desc = MyBase.Columns("ProcessWorkFlow_Desc")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnProcessWorkFlow_ID = New Global.System.Data.DataColumn("ProcessWorkFlow_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcessWorkFlow_ID)
            Me.columnSource_Process_ID = New Global.System.Data.DataColumn("Source_Process_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource_Process_ID)
            Me.columnSource_Process_Desc = New Global.System.Data.DataColumn("Source_Process_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource_Process_Desc)
            Me.columnDestination_Process_ID = New Global.System.Data.DataColumn("Destination_Process_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDestination_Process_ID)
            Me.columnDestination_Process_Desc = New Global.System.Data.DataColumn("Destination_Process_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDestination_Process_Desc)
            Me.columnProcessWorkFlow_Desc = New Global.System.Data.DataColumn("ProcessWorkFlow_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcessWorkFlow_Desc)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnProcessWorkFlow_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnProcessWorkFlow_ID.AllowDBNull = false
            Me.columnProcessWorkFlow_Desc.AllowDBNull = false
            Me.columnProcessWorkFlow_Desc.MaxLength = 250
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProductionProcessWorkFlowRow() As ProductionProcessWorkFlowRow
            Return CType(Me.NewRow,ProductionProcessWorkFlowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProductionProcessWorkFlowRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProductionProcessWorkFlowRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductionProcessWorkFlowRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductionProcessWorkFlowRowChanged(Me, New ProductionProcessWorkFlowRowChangeEvent(CType(e.Row,ProductionProcessWorkFlowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductionProcessWorkFlowRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductionProcessWorkFlowRowChanging(Me, New ProductionProcessWorkFlowRowChangeEvent(CType(e.Row,ProductionProcessWorkFlowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductionProcessWorkFlowRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductionProcessWorkFlowRowDeleted(Me, New ProductionProcessWorkFlowRowChangeEvent(CType(e.Row,ProductionProcessWorkFlowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductionProcessWorkFlowRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductionProcessWorkFlowRowDeleting(Me, New ProductionProcessWorkFlowRowChangeEvent(CType(e.Row,ProductionProcessWorkFlowRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProductionProcessWorkFlowRow(ByVal row As ProductionProcessWorkFlowRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProductionProcessWorkFlowDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FormulaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnFormula_ID As Global.System.Data.DataColumn
        
        Private columnFormula_Code As Global.System.Data.DataColumn
        
        Private columnFormula_Description As Global.System.Data.DataColumn
        
        Private columnOutput_Item_Detail_ID As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Formula"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Formula_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormula_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Formula_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormula_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Formula_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormula_Description
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Output_Item_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOutput_Item_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FormulaRow
            Get
                Return CType(Me.Rows(index),FormulaRow)
            End Get
        End Property
        
        Public Event FormulaRowChanging As FormulaRowChangeEventHandler
        
        Public Event FormulaRowChanged As FormulaRowChangeEventHandler
        
        Public Event FormulaRowDeleting As FormulaRowChangeEventHandler
        
        Public Event FormulaRowDeleted As FormulaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFormulaRow(ByVal row As FormulaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFormulaRow(ByVal Co_ID As Short, ByVal Formula_ID As Integer, ByVal Formula_Code As String, ByVal Formula_Description As String, ByVal Output_Item_Detail_ID As Integer, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer) As FormulaRow
            Dim rowFormulaRow As FormulaRow = CType(Me.NewRow,FormulaRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Formula_ID, Formula_Code, Formula_Description, Output_Item_Detail_ID, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID}
            rowFormulaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFormulaRow)
            Return rowFormulaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDFormula_ID(ByVal Co_ID As Short, ByVal Formula_ID As Integer) As FormulaRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Formula_ID}),FormulaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FormulaDataTable = CType(MyBase.Clone,FormulaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FormulaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnFormula_ID = MyBase.Columns("Formula_ID")
            Me.columnFormula_Code = MyBase.Columns("Formula_Code")
            Me.columnFormula_Description = MyBase.Columns("Formula_Description")
            Me.columnOutput_Item_Detail_ID = MyBase.Columns("Output_Item_Detail_ID")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnFormula_ID = New Global.System.Data.DataColumn("Formula_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormula_ID)
            Me.columnFormula_Code = New Global.System.Data.DataColumn("Formula_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormula_Code)
            Me.columnFormula_Description = New Global.System.Data.DataColumn("Formula_Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormula_Description)
            Me.columnOutput_Item_Detail_ID = New Global.System.Data.DataColumn("Output_Item_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOutput_Item_Detail_ID)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnFormula_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnFormula_ID.AllowDBNull = false
            Me.columnFormula_Code.AllowDBNull = false
            Me.columnFormula_Code.MaxLength = 50
            Me.columnFormula_Description.AllowDBNull = false
            Me.columnFormula_Description.MaxLength = 500
            Me.columnOutput_Item_Detail_ID.AllowDBNull = false
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFormulaRow() As FormulaRow
            Return CType(Me.NewRow,FormulaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FormulaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FormulaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FormulaRowChangedEvent) Is Nothing) Then
                RaiseEvent FormulaRowChanged(Me, New FormulaRowChangeEvent(CType(e.Row,FormulaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FormulaRowChangingEvent) Is Nothing) Then
                RaiseEvent FormulaRowChanging(Me, New FormulaRowChangeEvent(CType(e.Row,FormulaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FormulaRowDeletedEvent) Is Nothing) Then
                RaiseEvent FormulaRowDeleted(Me, New FormulaRowChangeEvent(CType(e.Row,FormulaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FormulaRowDeletingEvent) Is Nothing) Then
                RaiseEvent FormulaRowDeleting(Me, New FormulaRowChangeEvent(CType(e.Row,FormulaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFormulaRow(ByVal row As FormulaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FormulaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FormulaDetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnFormula_ID As Global.System.Data.DataColumn
        
        Private columnFormula_Detail_ID As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        Private columnInput_Item_Detail_ID As Global.System.Data.DataColumn
        
        Private columnItem_Desc As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FormulaDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Formula_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormula_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Formula_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormula_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Input_Item_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInput_Item_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FormulaDetailRow
            Get
                Return CType(Me.Rows(index),FormulaDetailRow)
            End Get
        End Property
        
        Public Event FormulaDetailRowChanging As FormulaDetailRowChangeEventHandler
        
        Public Event FormulaDetailRowChanged As FormulaDetailRowChangeEventHandler
        
        Public Event FormulaDetailRowDeleting As FormulaDetailRowChangeEventHandler
        
        Public Event FormulaDetailRowDeleted As FormulaDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFormulaDetailRow(ByVal row As FormulaDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFormulaDetailRow(ByVal Co_ID As Short, ByVal Formula_ID As Integer, ByVal Formula_Detail_ID As Integer, ByVal Remarks As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer, ByVal Input_Item_Detail_ID As Integer, ByVal Item_Desc As String, ByVal Quantity As Decimal) As FormulaDetailRow
            Dim rowFormulaDetailRow As FormulaDetailRow = CType(Me.NewRow,FormulaDetailRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Formula_ID, Formula_Detail_ID, Remarks, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Input_Item_Detail_ID, Item_Desc, Quantity}
            rowFormulaDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFormulaDetailRow)
            Return rowFormulaDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDFormula_IDFormula_Detail_ID(ByVal Co_ID As Short, ByVal Formula_ID As Integer, ByVal Formula_Detail_ID As Integer) As FormulaDetailRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Formula_ID, Formula_Detail_ID}),FormulaDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FormulaDetailDataTable = CType(MyBase.Clone,FormulaDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FormulaDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnFormula_ID = MyBase.Columns("Formula_ID")
            Me.columnFormula_Detail_ID = MyBase.Columns("Formula_Detail_ID")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
            Me.columnInput_Item_Detail_ID = MyBase.Columns("Input_Item_Detail_ID")
            Me.columnItem_Desc = MyBase.Columns("Item_Desc")
            Me.columnQuantity = MyBase.Columns("Quantity")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnFormula_ID = New Global.System.Data.DataColumn("Formula_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormula_ID)
            Me.columnFormula_Detail_ID = New Global.System.Data.DataColumn("Formula_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormula_Detail_ID)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.columnInput_Item_Detail_ID = New Global.System.Data.DataColumn("Input_Item_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInput_Item_Detail_ID)
            Me.columnItem_Desc = New Global.System.Data.DataColumn("Item_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Desc)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnFormula_ID, Me.columnFormula_Detail_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnFormula_ID.AllowDBNull = false
            Me.columnFormula_Detail_ID.AllowDBNull = false
            Me.columnRemarks.AllowDBNull = false
            Me.columnRemarks.MaxLength = 500
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
            Me.columnInput_Item_Detail_ID.AllowDBNull = false
            Me.columnItem_Desc.ReadOnly = true
            Me.columnItem_Desc.MaxLength = 250
            Me.columnQuantity.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFormulaDetailRow() As FormulaDetailRow
            Return CType(Me.NewRow,FormulaDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FormulaDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FormulaDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FormulaDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent FormulaDetailRowChanged(Me, New FormulaDetailRowChangeEvent(CType(e.Row,FormulaDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FormulaDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent FormulaDetailRowChanging(Me, New FormulaDetailRowChangeEvent(CType(e.Row,FormulaDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FormulaDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent FormulaDetailRowDeleted(Me, New FormulaDetailRowChangeEvent(CType(e.Row,FormulaDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FormulaDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent FormulaDetailRowDeleting(Me, New FormulaDetailRowChangeEvent(CType(e.Row,FormulaDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFormulaDetailRow(ByVal row As FormulaDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FormulaDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OrderDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnOrder_ID As Global.System.Data.DataColumn
        
        Private columnOrder_No As Global.System.Data.DataColumn
        
        Private columnOrder_Date As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Order"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrderRow
            Get
                Return CType(Me.Rows(index),OrderRow)
            End Get
        End Property
        
        Public Event OrderRowChanging As OrderRowChangeEventHandler
        
        Public Event OrderRowChanged As OrderRowChangeEventHandler
        
        Public Event OrderRowDeleting As OrderRowChangeEventHandler
        
        Public Event OrderRowDeleted As OrderRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOrderRow(ByVal row As OrderRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOrderRow(ByVal Co_ID As Short, ByVal Order_ID As Integer, ByVal Order_No As String, ByVal Order_Date As Date, ByVal Remarks As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer) As OrderRow
            Dim rowOrderRow As OrderRow = CType(Me.NewRow,OrderRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Order_ID, Order_No, Order_Date, Remarks, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID}
            rowOrderRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOrderRow)
            Return rowOrderRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDOrder_ID(ByVal Co_ID As Short, ByVal Order_ID As Integer) As OrderRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Order_ID}),OrderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OrderDataTable = CType(MyBase.Clone,OrderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OrderDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnOrder_ID = MyBase.Columns("Order_ID")
            Me.columnOrder_No = MyBase.Columns("Order_No")
            Me.columnOrder_Date = MyBase.Columns("Order_Date")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnOrder_ID = New Global.System.Data.DataColumn("Order_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_ID)
            Me.columnOrder_No = New Global.System.Data.DataColumn("Order_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_No)
            Me.columnOrder_Date = New Global.System.Data.DataColumn("Order_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Date)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnOrder_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnOrder_ID.AllowDBNull = false
            Me.columnOrder_No.AllowDBNull = false
            Me.columnOrder_No.MaxLength = 50
            Me.columnOrder_Date.AllowDBNull = false
            Me.columnRemarks.MaxLength = 1000
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOrderRow() As OrderRow
            Return CType(Me.NewRow,OrderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OrderRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OrderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrderRowChangedEvent) Is Nothing) Then
                RaiseEvent OrderRowChanged(Me, New OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrderRowChangingEvent) Is Nothing) Then
                RaiseEvent OrderRowChanging(Me, New OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrderRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrderRowDeleted(Me, New OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrderRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrderRowDeleting(Me, New OrderRowChangeEvent(CType(e.Row,OrderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOrderRow(ByVal row As OrderRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OrderDetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnOrder_ID As Global.System.Data.DataColumn
        
        Private columnOrder_Detail_ID As Global.System.Data.DataColumn
        
        Private columnItem_Detail_ID As Global.System.Data.DataColumn
        
        Private columnFormula_ID As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        Private columnItem_Code As Global.System.Data.DataColumn
        
        Private columnItem_Desc As Global.System.Data.DataColumn
        
        Private columnItemSize_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OrderDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Formula_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormula_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemSize_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemSize_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrderDetailRow
            Get
                Return CType(Me.Rows(index),OrderDetailRow)
            End Get
        End Property
        
        Public Event OrderDetailRowChanging As OrderDetailRowChangeEventHandler
        
        Public Event OrderDetailRowChanged As OrderDetailRowChangeEventHandler
        
        Public Event OrderDetailRowDeleting As OrderDetailRowChangeEventHandler
        
        Public Event OrderDetailRowDeleted As OrderDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOrderDetailRow(ByVal row As OrderDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOrderDetailRow(ByVal Co_ID As Short, ByVal Order_ID As Integer, ByVal Order_Detail_ID As Integer, ByVal Item_Detail_ID As Integer, ByVal Formula_ID As Integer, ByVal Quantity As Decimal, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer, ByVal Item_Code As String, ByVal Item_Desc As String, ByVal ItemSize_ID As Integer) As OrderDetailRow
            Dim rowOrderDetailRow As OrderDetailRow = CType(Me.NewRow,OrderDetailRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Order_ID, Order_Detail_ID, Item_Detail_ID, Formula_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Item_Code, Item_Desc, ItemSize_ID}
            rowOrderDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOrderDetailRow)
            Return rowOrderDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDOrder_IDOrder_Detail_ID(ByVal Co_ID As Short, ByVal Order_ID As Integer, ByVal Order_Detail_ID As Integer) As OrderDetailRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Order_ID, Order_Detail_ID}),OrderDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OrderDetailDataTable = CType(MyBase.Clone,OrderDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OrderDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnOrder_ID = MyBase.Columns("Order_ID")
            Me.columnOrder_Detail_ID = MyBase.Columns("Order_Detail_ID")
            Me.columnItem_Detail_ID = MyBase.Columns("Item_Detail_ID")
            Me.columnFormula_ID = MyBase.Columns("Formula_ID")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
            Me.columnItem_Code = MyBase.Columns("Item_Code")
            Me.columnItem_Desc = MyBase.Columns("Item_Desc")
            Me.columnItemSize_ID = MyBase.Columns("ItemSize_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnOrder_ID = New Global.System.Data.DataColumn("Order_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_ID)
            Me.columnOrder_Detail_ID = New Global.System.Data.DataColumn("Order_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_Detail_ID)
            Me.columnItem_Detail_ID = New Global.System.Data.DataColumn("Item_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Detail_ID)
            Me.columnFormula_ID = New Global.System.Data.DataColumn("Formula_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormula_ID)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.columnItem_Code = New Global.System.Data.DataColumn("Item_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Code)
            Me.columnItem_Desc = New Global.System.Data.DataColumn("Item_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Desc)
            Me.columnItemSize_ID = New Global.System.Data.DataColumn("ItemSize_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemSize_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnOrder_ID, Me.columnOrder_Detail_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnOrder_ID.AllowDBNull = false
            Me.columnOrder_Detail_ID.AllowDBNull = false
            Me.columnItem_Detail_ID.AllowDBNull = false
            Me.columnFormula_ID.AllowDBNull = false
            Me.columnQuantity.AllowDBNull = false
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
            Me.columnItem_Code.ReadOnly = true
            Me.columnItem_Code.MaxLength = 250
            Me.columnItem_Desc.ReadOnly = true
            Me.columnItem_Desc.MaxLength = 250
            Me.columnItemSize_ID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOrderDetailRow() As OrderDetailRow
            Return CType(Me.NewRow,OrderDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OrderDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OrderDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrderDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent OrderDetailRowChanged(Me, New OrderDetailRowChangeEvent(CType(e.Row,OrderDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrderDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent OrderDetailRowChanging(Me, New OrderDetailRowChangeEvent(CType(e.Row,OrderDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrderDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrderDetailRowDeleted(Me, New OrderDetailRowChangeEvent(CType(e.Row,OrderDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrderDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrderDetailRowDeleting(Me, New OrderDetailRowChangeEvent(CType(e.Row,OrderDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOrderDetailRow(ByVal row As OrderDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrderDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OrderBatchDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnOrder_ID As Global.System.Data.DataColumn
        
        Private columnOrderBatch_ID As Global.System.Data.DataColumn
        
        Private columnOrderBatch_No As Global.System.Data.DataColumn
        
        Private columnOrderBatch_Date As Global.System.Data.DataColumn
        
        Private columnRemarks As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OrderBatch"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderBatch_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderBatch_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderBatch_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderBatch_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderBatch_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderBatch_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrderBatchRow
            Get
                Return CType(Me.Rows(index),OrderBatchRow)
            End Get
        End Property
        
        Public Event OrderBatchRowChanging As OrderBatchRowChangeEventHandler
        
        Public Event OrderBatchRowChanged As OrderBatchRowChangeEventHandler
        
        Public Event OrderBatchRowDeleting As OrderBatchRowChangeEventHandler
        
        Public Event OrderBatchRowDeleted As OrderBatchRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOrderBatchRow(ByVal row As OrderBatchRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOrderBatchRow(ByVal Co_ID As Short, ByVal Order_ID As Integer, ByVal OrderBatch_ID As Integer, ByVal OrderBatch_No As String, ByVal OrderBatch_Date As Date, ByVal Remarks As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer) As OrderBatchRow
            Dim rowOrderBatchRow As OrderBatchRow = CType(Me.NewRow,OrderBatchRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Order_ID, OrderBatch_ID, OrderBatch_No, OrderBatch_Date, Remarks, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID}
            rowOrderBatchRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOrderBatchRow)
            Return rowOrderBatchRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDOrderBatch_ID(ByVal Co_ID As Short, ByVal OrderBatch_ID As Integer) As OrderBatchRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, OrderBatch_ID}),OrderBatchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OrderBatchDataTable = CType(MyBase.Clone,OrderBatchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OrderBatchDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnOrder_ID = MyBase.Columns("Order_ID")
            Me.columnOrderBatch_ID = MyBase.Columns("OrderBatch_ID")
            Me.columnOrderBatch_No = MyBase.Columns("OrderBatch_No")
            Me.columnOrderBatch_Date = MyBase.Columns("OrderBatch_Date")
            Me.columnRemarks = MyBase.Columns("Remarks")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnOrder_ID = New Global.System.Data.DataColumn("Order_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_ID)
            Me.columnOrderBatch_ID = New Global.System.Data.DataColumn("OrderBatch_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderBatch_ID)
            Me.columnOrderBatch_No = New Global.System.Data.DataColumn("OrderBatch_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderBatch_No)
            Me.columnOrderBatch_Date = New Global.System.Data.DataColumn("OrderBatch_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderBatch_Date)
            Me.columnRemarks = New Global.System.Data.DataColumn("Remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemarks)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnOrderBatch_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnOrder_ID.AllowDBNull = false
            Me.columnOrderBatch_ID.AllowDBNull = false
            Me.columnOrderBatch_No.AllowDBNull = false
            Me.columnOrderBatch_No.MaxLength = 50
            Me.columnOrderBatch_Date.AllowDBNull = false
            Me.columnRemarks.MaxLength = 1000
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOrderBatchRow() As OrderBatchRow
            Return CType(Me.NewRow,OrderBatchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OrderBatchRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OrderBatchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrderBatchRowChangedEvent) Is Nothing) Then
                RaiseEvent OrderBatchRowChanged(Me, New OrderBatchRowChangeEvent(CType(e.Row,OrderBatchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrderBatchRowChangingEvent) Is Nothing) Then
                RaiseEvent OrderBatchRowChanging(Me, New OrderBatchRowChangeEvent(CType(e.Row,OrderBatchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrderBatchRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrderBatchRowDeleted(Me, New OrderBatchRowChangeEvent(CType(e.Row,OrderBatchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrderBatchRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrderBatchRowDeleting(Me, New OrderBatchRowChangeEvent(CType(e.Row,OrderBatchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOrderBatchRow(ByVal row As OrderBatchRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrderBatchDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OrderBatchDetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnOrderBatch_ID As Global.System.Data.DataColumn
        
        Private columnOrderBatch_Detail_ID As Global.System.Data.DataColumn
        
        Private columnItem_Detail_ID As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OrderBatchDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderBatch_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderBatch_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderBatch_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderBatch_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrderBatchDetailRow
            Get
                Return CType(Me.Rows(index),OrderBatchDetailRow)
            End Get
        End Property
        
        Public Event OrderBatchDetailRowChanging As OrderBatchDetailRowChangeEventHandler
        
        Public Event OrderBatchDetailRowChanged As OrderBatchDetailRowChangeEventHandler
        
        Public Event OrderBatchDetailRowDeleting As OrderBatchDetailRowChangeEventHandler
        
        Public Event OrderBatchDetailRowDeleted As OrderBatchDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOrderBatchDetailRow(ByVal row As OrderBatchDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOrderBatchDetailRow(ByVal Co_ID As Short, ByVal OrderBatch_ID As Integer, ByVal OrderBatch_Detail_ID As Integer, ByVal Item_Detail_ID As Integer, ByVal Quantity As Decimal, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer) As OrderBatchDetailRow
            Dim rowOrderBatchDetailRow As OrderBatchDetailRow = CType(Me.NewRow,OrderBatchDetailRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, OrderBatch_ID, OrderBatch_Detail_ID, Item_Detail_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID}
            rowOrderBatchDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOrderBatchDetailRow)
            Return rowOrderBatchDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDOrderBatch_IDOrderBatch_Detail_ID(ByVal Co_ID As Short, ByVal OrderBatch_ID As Integer, ByVal OrderBatch_Detail_ID As Integer) As OrderBatchDetailRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, OrderBatch_ID, OrderBatch_Detail_ID}),OrderBatchDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OrderBatchDetailDataTable = CType(MyBase.Clone,OrderBatchDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OrderBatchDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnOrderBatch_ID = MyBase.Columns("OrderBatch_ID")
            Me.columnOrderBatch_Detail_ID = MyBase.Columns("OrderBatch_Detail_ID")
            Me.columnItem_Detail_ID = MyBase.Columns("Item_Detail_ID")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnOrderBatch_ID = New Global.System.Data.DataColumn("OrderBatch_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderBatch_ID)
            Me.columnOrderBatch_Detail_ID = New Global.System.Data.DataColumn("OrderBatch_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderBatch_Detail_ID)
            Me.columnItem_Detail_ID = New Global.System.Data.DataColumn("Item_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Detail_ID)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnOrderBatch_ID, Me.columnOrderBatch_Detail_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnOrderBatch_ID.AllowDBNull = false
            Me.columnOrderBatch_Detail_ID.AllowDBNull = false
            Me.columnItem_Detail_ID.AllowDBNull = false
            Me.columnQuantity.AllowDBNull = false
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOrderBatchDetailRow() As OrderBatchDetailRow
            Return CType(Me.NewRow,OrderBatchDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OrderBatchDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OrderBatchDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrderBatchDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent OrderBatchDetailRowChanged(Me, New OrderBatchDetailRowChangeEvent(CType(e.Row,OrderBatchDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrderBatchDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent OrderBatchDetailRowChanging(Me, New OrderBatchDetailRowChangeEvent(CType(e.Row,OrderBatchDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrderBatchDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrderBatchDetailRowDeleted(Me, New OrderBatchDetailRowChangeEvent(CType(e.Row,OrderBatchDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrderBatchDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrderBatchDetailRowDeleting(Me, New OrderBatchDetailRowChangeEvent(CType(e.Row,OrderBatchDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOrderBatchDetailRow(ByVal row As OrderBatchDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrderBatchDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProcessProductionDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnProduction_ID As Global.System.Data.DataColumn
        
        Private columnProduction_No As Global.System.Data.DataColumn
        
        Private columnProduction_Date As Global.System.Data.DataColumn
        
        Private columnOrder_ID As Global.System.Data.DataColumn
        
        Private columnOrderBatch_ID As Global.System.Data.DataColumn
        
        Private columnSource_Document_ID As Global.System.Data.DataColumn
        
        Private columnSource_DocumentType_ID As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        Private columnVender_Party_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProcessProduction"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Production_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduction_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Production_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduction_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Production_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduction_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Order_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrder_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderBatch_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderBatch_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Source_Document_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource_Document_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Source_DocumentType_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource_DocumentType_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Vender_Party_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVender_Party_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProcessProductionRow
            Get
                Return CType(Me.Rows(index),ProcessProductionRow)
            End Get
        End Property
        
        Public Event ProcessProductionRowChanging As ProcessProductionRowChangeEventHandler
        
        Public Event ProcessProductionRowChanged As ProcessProductionRowChangeEventHandler
        
        Public Event ProcessProductionRowDeleting As ProcessProductionRowChangeEventHandler
        
        Public Event ProcessProductionRowDeleted As ProcessProductionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProcessProductionRow(ByVal row As ProcessProductionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProcessProductionRow(ByVal Co_ID As Short, ByVal Production_ID As Integer, ByVal Production_No As String, ByVal Production_Date As Date, ByVal Order_ID As Integer, ByVal OrderBatch_ID As Integer, ByVal Source_Document_ID As Integer, ByVal Source_DocumentType_ID As Integer, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer, ByVal Vender_Party_ID As Integer) As ProcessProductionRow
            Dim rowProcessProductionRow As ProcessProductionRow = CType(Me.NewRow,ProcessProductionRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Production_ID, Production_No, Production_Date, Order_ID, OrderBatch_ID, Source_Document_ID, Source_DocumentType_ID, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Vender_Party_ID}
            rowProcessProductionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProcessProductionRow)
            Return rowProcessProductionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDProduction_ID(ByVal Co_ID As Short, ByVal Production_ID As Integer) As ProcessProductionRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Production_ID}),ProcessProductionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProcessProductionDataTable = CType(MyBase.Clone,ProcessProductionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProcessProductionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnProduction_ID = MyBase.Columns("Production_ID")
            Me.columnProduction_No = MyBase.Columns("Production_No")
            Me.columnProduction_Date = MyBase.Columns("Production_Date")
            Me.columnOrder_ID = MyBase.Columns("Order_ID")
            Me.columnOrderBatch_ID = MyBase.Columns("OrderBatch_ID")
            Me.columnSource_Document_ID = MyBase.Columns("Source_Document_ID")
            Me.columnSource_DocumentType_ID = MyBase.Columns("Source_DocumentType_ID")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
            Me.columnVender_Party_ID = MyBase.Columns("Vender_Party_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnProduction_ID = New Global.System.Data.DataColumn("Production_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduction_ID)
            Me.columnProduction_No = New Global.System.Data.DataColumn("Production_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduction_No)
            Me.columnProduction_Date = New Global.System.Data.DataColumn("Production_Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduction_Date)
            Me.columnOrder_ID = New Global.System.Data.DataColumn("Order_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrder_ID)
            Me.columnOrderBatch_ID = New Global.System.Data.DataColumn("OrderBatch_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderBatch_ID)
            Me.columnSource_Document_ID = New Global.System.Data.DataColumn("Source_Document_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource_Document_ID)
            Me.columnSource_DocumentType_ID = New Global.System.Data.DataColumn("Source_DocumentType_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource_DocumentType_ID)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.columnVender_Party_ID = New Global.System.Data.DataColumn("Vender_Party_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVender_Party_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnProduction_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnProduction_ID.AllowDBNull = false
            Me.columnProduction_No.AllowDBNull = false
            Me.columnProduction_No.MaxLength = 50
            Me.columnProduction_Date.AllowDBNull = false
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProcessProductionRow() As ProcessProductionRow
            Return CType(Me.NewRow,ProcessProductionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProcessProductionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProcessProductionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProcessProductionRowChangedEvent) Is Nothing) Then
                RaiseEvent ProcessProductionRowChanged(Me, New ProcessProductionRowChangeEvent(CType(e.Row,ProcessProductionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProcessProductionRowChangingEvent) Is Nothing) Then
                RaiseEvent ProcessProductionRowChanging(Me, New ProcessProductionRowChangeEvent(CType(e.Row,ProcessProductionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProcessProductionRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProcessProductionRowDeleted(Me, New ProcessProductionRowChangeEvent(CType(e.Row,ProcessProductionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProcessProductionRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProcessProductionRowDeleting(Me, New ProcessProductionRowChangeEvent(CType(e.Row,ProcessProductionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProcessProductionRow(ByVal row As ProcessProductionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProcessProductionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProcessProductionDetailDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCo_ID As Global.System.Data.DataColumn
        
        Private columnProduction_ID As Global.System.Data.DataColumn
        
        Private columnProduction_Detail_ID As Global.System.Data.DataColumn
        
        Private columnConsumption_Process_ID As Global.System.Data.DataColumn
        
        Private columnProduction_Process_ID As Global.System.Data.DataColumn
        
        Private columnItem_Detail_ID As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnStamp_UserID As Global.System.Data.DataColumn
        
        Private columnStamp_DateTime As Global.System.Data.DataColumn
        
        Private columnUpload_DateTime As Global.System.Data.DataColumn
        
        Private columnRecordStatus_ID As Global.System.Data.DataColumn
        
        Private columnItemSize_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProcessProductionDetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Co_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCo_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Production_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduction_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Production_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduction_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Consumption_Process_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsumption_Process_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Production_Process_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduction_Process_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_UserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Stamp_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStamp_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Upload_DateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUpload_DateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordStatus_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordStatus_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemSize_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemSize_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProcessProductionDetailRow
            Get
                Return CType(Me.Rows(index),ProcessProductionDetailRow)
            End Get
        End Property
        
        Public Event ProcessProductionDetailRowChanging As ProcessProductionDetailRowChangeEventHandler
        
        Public Event ProcessProductionDetailRowChanged As ProcessProductionDetailRowChangeEventHandler
        
        Public Event ProcessProductionDetailRowDeleting As ProcessProductionDetailRowChangeEventHandler
        
        Public Event ProcessProductionDetailRowDeleted As ProcessProductionDetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProcessProductionDetailRow(ByVal row As ProcessProductionDetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProcessProductionDetailRow(ByVal Co_ID As Short, ByVal Production_ID As Integer, ByVal Production_Detail_ID As Integer, ByVal Consumption_Process_ID As Integer, ByVal Production_Process_ID As Integer, ByVal Item_Detail_ID As Integer, ByVal Quantity As Decimal, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Date, ByVal RecordStatus_ID As Integer, ByVal ItemSize_ID As Integer) As ProcessProductionDetailRow
            Dim rowProcessProductionDetailRow As ProcessProductionDetailRow = CType(Me.NewRow,ProcessProductionDetailRow)
            Dim columnValuesArray() As Object = New Object() {Co_ID, Production_ID, Production_Detail_ID, Consumption_Process_ID, Production_Process_ID, Item_Detail_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, ItemSize_ID}
            rowProcessProductionDetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProcessProductionDetailRow)
            Return rowProcessProductionDetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCo_IDProduction_IDProduction_Detail_ID(ByVal Co_ID As Short, ByVal Production_ID As Integer, ByVal Production_Detail_ID As Integer) As ProcessProductionDetailRow
            Return CType(Me.Rows.Find(New Object() {Co_ID, Production_ID, Production_Detail_ID}),ProcessProductionDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProcessProductionDetailDataTable = CType(MyBase.Clone,ProcessProductionDetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProcessProductionDetailDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCo_ID = MyBase.Columns("Co_ID")
            Me.columnProduction_ID = MyBase.Columns("Production_ID")
            Me.columnProduction_Detail_ID = MyBase.Columns("Production_Detail_ID")
            Me.columnConsumption_Process_ID = MyBase.Columns("Consumption_Process_ID")
            Me.columnProduction_Process_ID = MyBase.Columns("Production_Process_ID")
            Me.columnItem_Detail_ID = MyBase.Columns("Item_Detail_ID")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnStamp_UserID = MyBase.Columns("Stamp_UserID")
            Me.columnStamp_DateTime = MyBase.Columns("Stamp_DateTime")
            Me.columnUpload_DateTime = MyBase.Columns("Upload_DateTime")
            Me.columnRecordStatus_ID = MyBase.Columns("RecordStatus_ID")
            Me.columnItemSize_ID = MyBase.Columns("ItemSize_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCo_ID = New Global.System.Data.DataColumn("Co_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCo_ID)
            Me.columnProduction_ID = New Global.System.Data.DataColumn("Production_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduction_ID)
            Me.columnProduction_Detail_ID = New Global.System.Data.DataColumn("Production_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduction_Detail_ID)
            Me.columnConsumption_Process_ID = New Global.System.Data.DataColumn("Consumption_Process_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsumption_Process_ID)
            Me.columnProduction_Process_ID = New Global.System.Data.DataColumn("Production_Process_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduction_Process_ID)
            Me.columnItem_Detail_ID = New Global.System.Data.DataColumn("Item_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Detail_ID)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnStamp_UserID = New Global.System.Data.DataColumn("Stamp_UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_UserID)
            Me.columnStamp_DateTime = New Global.System.Data.DataColumn("Stamp_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStamp_DateTime)
            Me.columnUpload_DateTime = New Global.System.Data.DataColumn("Upload_DateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUpload_DateTime)
            Me.columnRecordStatus_ID = New Global.System.Data.DataColumn("RecordStatus_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordStatus_ID)
            Me.columnItemSize_ID = New Global.System.Data.DataColumn("ItemSize_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemSize_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCo_ID, Me.columnProduction_ID, Me.columnProduction_Detail_ID}, true))
            Me.columnCo_ID.AllowDBNull = false
            Me.columnProduction_ID.AllowDBNull = false
            Me.columnProduction_Detail_ID.AllowDBNull = false
            Me.columnProduction_Process_ID.AllowDBNull = false
            Me.columnItem_Detail_ID.AllowDBNull = false
            Me.columnQuantity.AllowDBNull = false
            Me.columnStamp_UserID.AllowDBNull = false
            Me.columnStamp_DateTime.AllowDBNull = false
            Me.columnRecordStatus_ID.AllowDBNull = false
            Me.columnItemSize_ID.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProcessProductionDetailRow() As ProcessProductionDetailRow
            Return CType(Me.NewRow,ProcessProductionDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProcessProductionDetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProcessProductionDetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProcessProductionDetailRowChangedEvent) Is Nothing) Then
                RaiseEvent ProcessProductionDetailRowChanged(Me, New ProcessProductionDetailRowChangeEvent(CType(e.Row,ProcessProductionDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProcessProductionDetailRowChangingEvent) Is Nothing) Then
                RaiseEvent ProcessProductionDetailRowChanging(Me, New ProcessProductionDetailRowChangeEvent(CType(e.Row,ProcessProductionDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProcessProductionDetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProcessProductionDetailRowDeleted(Me, New ProcessProductionDetailRowChangeEvent(CType(e.Row,ProcessProductionDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProcessProductionDetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProcessProductionDetailRowDeleting(Me, New ProcessProductionDetailRowChangeEvent(CType(e.Row,ProcessProductionDetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProcessProductionDetailRow(ByVal row As ProcessProductionDetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProcessProductionDetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProcessBalanceDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProcess_ID As Global.System.Data.DataColumn
        
        Private columnProcess_Code As Global.System.Data.DataColumn
        
        Private columnProcess_Desc As Global.System.Data.DataColumn
        
        Private columnItem_ID As Global.System.Data.DataColumn
        
        Private columnItemSize_ID As Global.System.Data.DataColumn
        
        Private columnItemSize_Code As Global.System.Data.DataColumn
        
        Private columnItem_Detail_ID As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnItem_Code As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProcessBalance"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Process_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcess_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Process_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcess_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Process_DescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcess_Desc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemSize_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemSize_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemSize_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemSize_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_Detail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Detail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Item_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProcessBalanceRow
            Get
                Return CType(Me.Rows(index),ProcessBalanceRow)
            End Get
        End Property
        
        Public Event ProcessBalanceRowChanging As ProcessBalanceRowChangeEventHandler
        
        Public Event ProcessBalanceRowChanged As ProcessBalanceRowChangeEventHandler
        
        Public Event ProcessBalanceRowDeleting As ProcessBalanceRowChangeEventHandler
        
        Public Event ProcessBalanceRowDeleted As ProcessBalanceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProcessBalanceRow(ByVal row As ProcessBalanceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProcessBalanceRow(ByVal Process_ID As Short, ByVal Process_Code As String, ByVal Process_Desc As String, ByVal Item_ID As Integer, ByVal ItemSize_ID As Short, ByVal ItemSize_Code As String, ByVal Item_Detail_ID As Integer, ByVal Quantity As Decimal, ByVal Item_Code As String) As ProcessBalanceRow
            Dim rowProcessBalanceRow As ProcessBalanceRow = CType(Me.NewRow,ProcessBalanceRow)
            Dim columnValuesArray() As Object = New Object() {Process_ID, Process_Code, Process_Desc, Item_ID, ItemSize_ID, ItemSize_Code, Item_Detail_ID, Quantity, Item_Code}
            rowProcessBalanceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProcessBalanceRow)
            Return rowProcessBalanceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProcessBalanceDataTable = CType(MyBase.Clone,ProcessBalanceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProcessBalanceDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProcess_ID = MyBase.Columns("Process_ID")
            Me.columnProcess_Code = MyBase.Columns("Process_Code")
            Me.columnProcess_Desc = MyBase.Columns("Process_Desc")
            Me.columnItem_ID = MyBase.Columns("Item_ID")
            Me.columnItemSize_ID = MyBase.Columns("ItemSize_ID")
            Me.columnItemSize_Code = MyBase.Columns("ItemSize_Code")
            Me.columnItem_Detail_ID = MyBase.Columns("Item_Detail_ID")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnItem_Code = MyBase.Columns("Item_Code")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProcess_ID = New Global.System.Data.DataColumn("Process_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcess_ID)
            Me.columnProcess_Code = New Global.System.Data.DataColumn("Process_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcess_Code)
            Me.columnProcess_Desc = New Global.System.Data.DataColumn("Process_Desc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcess_Desc)
            Me.columnItem_ID = New Global.System.Data.DataColumn("Item_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_ID)
            Me.columnItemSize_ID = New Global.System.Data.DataColumn("ItemSize_ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemSize_ID)
            Me.columnItemSize_Code = New Global.System.Data.DataColumn("ItemSize_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemSize_Code)
            Me.columnItem_Detail_ID = New Global.System.Data.DataColumn("Item_Detail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Detail_ID)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnItem_Code = New Global.System.Data.DataColumn("Item_Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Code)
            Me.columnProcess_ID.ReadOnly = true
            Me.columnProcess_Code.ReadOnly = true
            Me.columnProcess_Code.MaxLength = 50
            Me.columnProcess_Desc.ReadOnly = true
            Me.columnProcess_Desc.MaxLength = 250
            Me.columnItem_ID.ReadOnly = true
            Me.columnItemSize_ID.ReadOnly = true
            Me.columnItemSize_Code.ReadOnly = true
            Me.columnItemSize_Code.MaxLength = 10
            Me.columnItem_Detail_ID.ReadOnly = true
            Me.columnQuantity.ReadOnly = true
            Me.columnItem_Code.ReadOnly = true
            Me.columnItem_Code.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProcessBalanceRow() As ProcessBalanceRow
            Return CType(Me.NewRow,ProcessBalanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProcessBalanceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProcessBalanceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProcessBalanceRowChangedEvent) Is Nothing) Then
                RaiseEvent ProcessBalanceRowChanged(Me, New ProcessBalanceRowChangeEvent(CType(e.Row,ProcessBalanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProcessBalanceRowChangingEvent) Is Nothing) Then
                RaiseEvent ProcessBalanceRowChanging(Me, New ProcessBalanceRowChangeEvent(CType(e.Row,ProcessBalanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProcessBalanceRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProcessBalanceRowDeleted(Me, New ProcessBalanceRowChangeEvent(CType(e.Row,ProcessBalanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProcessBalanceRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProcessBalanceRowDeleting(Me, New ProcessBalanceRowChangeEvent(CType(e.Row,ProcessBalanceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProcessBalanceRow(ByVal row As ProcessBalanceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As QuickProductionDataSet = New QuickProductionDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProcessBalanceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProductionProcessRow
        Inherits Global.System.Data.DataRow
        
        Private tableProductionProcess As ProductionProcessDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductionProcess = CType(Me.Table,ProductionProcessDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableProductionProcess.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableProductionProcess.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Process_ID() As Short
            Get
                Return CType(Me(Me.tableProductionProcess.Process_IDColumn),Short)
            End Get
            Set
                Me(Me.tableProductionProcess.Process_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Process_Code() As String
            Get
                Return CType(Me(Me.tableProductionProcess.Process_CodeColumn),String)
            End Get
            Set
                Me(Me.tableProductionProcess.Process_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Process_Desc() As String
            Get
                Return CType(Me(Me.tableProductionProcess.Process_DescColumn),String)
            End Get
            Set
                Me(Me.tableProductionProcess.Process_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableProductionProcess.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProductionProcess.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableProductionProcess.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableProductionProcess.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProductionProcess.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'ProductionProcess' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionProcess.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableProductionProcess.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProductionProcess.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableProductionProcess.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableProductionProcess.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProductionProcessWorkFlowRowsByFK_Production_ProcessWorkFlow_Production_Process1() As ProductionProcessWorkFlowRow()
            If (Me.Table.ChildRelations("FK_Production_ProcessWorkFlow_Production_Process1") Is Nothing) Then
                Return New ProductionProcessWorkFlowRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Production_ProcessWorkFlow_Production_Process1")),ProductionProcessWorkFlowRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProductionProcessWorkFlowRowsByFK_Production_ProcessWorkFlow_Production_Process2() As ProductionProcessWorkFlowRow()
            If (Me.Table.ChildRelations("FK_Production_ProcessWorkFlow_Production_Process2") Is Nothing) Then
                Return New ProductionProcessWorkFlowRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Production_ProcessWorkFlow_Production_Process2")),ProductionProcessWorkFlowRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProductionProcessWorkFlowRow
        Inherits Global.System.Data.DataRow
        
        Private tableProductionProcessWorkFlow As ProductionProcessWorkFlowDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductionProcessWorkFlow = CType(Me.Table,ProductionProcessWorkFlowDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableProductionProcessWorkFlow.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProcessWorkFlow_ID() As Integer
            Get
                Return CType(Me(Me.tableProductionProcessWorkFlow.ProcessWorkFlow_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.ProcessWorkFlow_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Source_Process_ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProductionProcessWorkFlow.Source_Process_IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Source_Process_ID' in table 'ProductionProcessWorkFlow' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.Source_Process_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Source_Process_Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionProcessWorkFlow.Source_Process_DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Source_Process_Desc' in table 'ProductionProcessWorkFlow' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.Source_Process_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Destination_Process_ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProductionProcessWorkFlow.Destination_Process_IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Destination_Process_ID' in table 'ProductionProcessWorkFlow"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.Destination_Process_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Destination_Process_Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionProcessWorkFlow.Destination_Process_DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Destination_Process_Desc' in table 'ProductionProcessWorkFl"& _ 
                            "ow' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.Destination_Process_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProcessWorkFlow_Desc() As String
            Get
                Return CType(Me(Me.tableProductionProcessWorkFlow.ProcessWorkFlow_DescColumn),String)
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.ProcessWorkFlow_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableProductionProcessWorkFlow.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableProductionProcessWorkFlow.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProductionProcessWorkFlow.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'ProductionProcessWorkFlow' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableProductionProcessWorkFlow.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProductionProcessWorkFlow.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductionProcessRowParentByFK_Production_ProcessWorkFlow_Production_Process1() As ProductionProcessRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Production_ProcessWorkFlow_Production_Process1")),ProductionProcessRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Production_ProcessWorkFlow_Production_Process1"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductionProcessRowParentByFK_Production_ProcessWorkFlow_Production_Process2() As ProductionProcessRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Production_ProcessWorkFlow_Production_Process2")),ProductionProcessRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Production_ProcessWorkFlow_Production_Process2"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSource_Process_IDNull() As Boolean
            Return Me.IsNull(Me.tableProductionProcessWorkFlow.Source_Process_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSource_Process_IDNull()
            Me(Me.tableProductionProcessWorkFlow.Source_Process_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSource_Process_DescNull() As Boolean
            Return Me.IsNull(Me.tableProductionProcessWorkFlow.Source_Process_DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSource_Process_DescNull()
            Me(Me.tableProductionProcessWorkFlow.Source_Process_DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDestination_Process_IDNull() As Boolean
            Return Me.IsNull(Me.tableProductionProcessWorkFlow.Destination_Process_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDestination_Process_IDNull()
            Me(Me.tableProductionProcessWorkFlow.Destination_Process_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDestination_Process_DescNull() As Boolean
            Return Me.IsNull(Me.tableProductionProcessWorkFlow.Destination_Process_DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDestination_Process_DescNull()
            Me(Me.tableProductionProcessWorkFlow.Destination_Process_DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableProductionProcessWorkFlow.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableProductionProcessWorkFlow.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FormulaRow
        Inherits Global.System.Data.DataRow
        
        Private tableFormula As FormulaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFormula = CType(Me.Table,FormulaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableFormula.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableFormula.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Formula_ID() As Integer
            Get
                Return CType(Me(Me.tableFormula.Formula_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFormula.Formula_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Formula_Code() As String
            Get
                Return CType(Me(Me.tableFormula.Formula_CodeColumn),String)
            End Get
            Set
                Me(Me.tableFormula.Formula_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Formula_Description() As String
            Get
                Return CType(Me(Me.tableFormula.Formula_DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableFormula.Formula_DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Output_Item_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableFormula.Output_Item_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFormula.Output_Item_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableFormula.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFormula.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableFormula.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableFormula.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFormula.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'Formula' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormula.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableFormula.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFormula.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableFormula.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableFormula.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFormulaDetailRows() As FormulaDetailRow()
            If (Me.Table.ChildRelations("FK_Production_Formula_Formula_Detail") Is Nothing) Then
                Return New FormulaDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Production_Formula_Formula_Detail")),FormulaDetailRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetOrderDetailRows() As OrderDetailRow()
            If (Me.Table.ChildRelations("FK_Production_Formula_Order_Detail") Is Nothing) Then
                Return New OrderDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Production_Formula_Order_Detail")),OrderDetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FormulaDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableFormulaDetail As FormulaDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFormulaDetail = CType(Me.Table,FormulaDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableFormulaDetail.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableFormulaDetail.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Formula_ID() As Integer
            Get
                Return CType(Me(Me.tableFormulaDetail.Formula_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFormulaDetail.Formula_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Formula_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableFormulaDetail.Formula_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFormulaDetail.Formula_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Return CType(Me(Me.tableFormulaDetail.RemarksColumn),String)
            End Get
            Set
                Me(Me.tableFormulaDetail.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableFormulaDetail.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFormulaDetail.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableFormulaDetail.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableFormulaDetail.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFormulaDetail.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'FormulaDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormulaDetail.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableFormulaDetail.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFormulaDetail.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Input_Item_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableFormulaDetail.Input_Item_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFormulaDetail.Input_Item_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableFormulaDetail.Item_DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Desc' in table 'FormulaDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFormulaDetail.Item_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Return CType(Me(Me.tableFormulaDetail.QuantityColumn),Decimal)
            End Get
            Set
                Me(Me.tableFormulaDetail.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_FormulaRowParent() As FormulaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Production_Formula_Formula_Detail")),FormulaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Production_Formula_Formula_Detail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableFormulaDetail.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableFormulaDetail.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_DescNull() As Boolean
            Return Me.IsNull(Me.tableFormulaDetail.Item_DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_DescNull()
            Me(Me.tableFormulaDetail.Item_DescColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OrderRow
        Inherits Global.System.Data.DataRow
        
        Private tableOrder As OrderDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrder = CType(Me.Table,OrderDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableOrder.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableOrder.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_ID() As Integer
            Get
                Return CType(Me(Me.tableOrder.Order_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrder.Order_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_No() As String
            Get
                Return CType(Me(Me.tableOrder.Order_NoColumn),String)
            End Get
            Set
                Me(Me.tableOrder.Order_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_Date() As Date
            Get
                Return CType(Me(Me.tableOrder.Order_DateColumn),Date)
            End Get
            Set
                Me(Me.tableOrder.Order_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrder.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'Order' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrder.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableOrder.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrder.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableOrder.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableOrder.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrder.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'Order' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrder.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableOrder.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrder.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableOrder.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableOrder.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableOrder.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableOrder.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetOrderDetailRows() As OrderDetailRow()
            If (Me.Table.ChildRelations("FK_Production_Order_Order_Detail") Is Nothing) Then
                Return New OrderDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Production_Order_Order_Detail")),OrderDetailRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetOrderBatchRows() As OrderBatchRow()
            If (Me.Table.ChildRelations("FK_Production_Order_OrderBatch") Is Nothing) Then
                Return New OrderBatchRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Production_Order_OrderBatch")),OrderBatchRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProcessProductionRows() As ProcessProductionRow()
            If (Me.Table.ChildRelations("FK_Order_ProcessProduction") Is Nothing) Then
                Return New ProcessProductionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Order_ProcessProduction")),ProcessProductionRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OrderDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableOrderDetail As OrderDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrderDetail = CType(Me.Table,OrderDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableOrderDetail.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableOrderDetail.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderDetail.Order_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderDetail.Order_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderDetail.Order_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderDetail.Order_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderDetail.Item_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderDetail.Item_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Formula_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderDetail.Formula_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderDetail.Formula_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Return CType(Me(Me.tableOrderDetail.QuantityColumn),Decimal)
            End Get
            Set
                Me(Me.tableOrderDetail.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableOrderDetail.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderDetail.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableOrderDetail.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableOrderDetail.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrderDetail.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'OrderDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderDetail.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderDetail.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderDetail.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderDetail.Item_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Code' in table 'OrderDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderDetail.Item_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderDetail.Item_DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Desc' in table 'OrderDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderDetail.Item_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemSize_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrderDetail.ItemSize_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemSize_ID' in table 'OrderDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderDetail.ItemSize_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_FormulaRowParent() As FormulaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Production_Formula_Order_Detail")),FormulaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Production_Formula_Order_Detail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_OrderRowParent() As OrderRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Production_Order_Order_Detail")),OrderRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Production_Order_Order_Detail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableOrderDetail.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableOrderDetail.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_CodeNull() As Boolean
            Return Me.IsNull(Me.tableOrderDetail.Item_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_CodeNull()
            Me(Me.tableOrderDetail.Item_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_DescNull() As Boolean
            Return Me.IsNull(Me.tableOrderDetail.Item_DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_DescNull()
            Me(Me.tableOrderDetail.Item_DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemSize_IDNull() As Boolean
            Return Me.IsNull(Me.tableOrderDetail.ItemSize_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemSize_IDNull()
            Me(Me.tableOrderDetail.ItemSize_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OrderBatchRow
        Inherits Global.System.Data.DataRow
        
        Private tableOrderBatch As OrderBatchDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrderBatch = CType(Me.Table,OrderBatchDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableOrderBatch.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableOrderBatch.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderBatch.Order_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderBatch.Order_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderBatch_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderBatch.OrderBatch_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderBatch.OrderBatch_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderBatch_No() As String
            Get
                Return CType(Me(Me.tableOrderBatch.OrderBatch_NoColumn),String)
            End Get
            Set
                Me(Me.tableOrderBatch.OrderBatch_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderBatch_Date() As Date
            Get
                Return CType(Me(Me.tableOrderBatch.OrderBatch_DateColumn),Date)
            End Get
            Set
                Me(Me.tableOrderBatch.OrderBatch_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderBatch.RemarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remarks' in table 'OrderBatch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderBatch.RemarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableOrderBatch.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderBatch.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableOrderBatch.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableOrderBatch.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrderBatch.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'OrderBatch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderBatch.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderBatch.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderBatch.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_OrderRowParent() As OrderRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Production_Order_OrderBatch")),OrderRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Production_Order_OrderBatch"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarksNull() As Boolean
            Return Me.IsNull(Me.tableOrderBatch.RemarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarksNull()
            Me(Me.tableOrderBatch.RemarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableOrderBatch.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableOrderBatch.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetOrderBatchDetailRows() As OrderBatchDetailRow()
            If (Me.Table.ChildRelations("FK_Production_OrderBatch_OrderBatch_Detail") Is Nothing) Then
                Return New OrderBatchDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Production_OrderBatch_OrderBatch_Detail")),OrderBatchDetailRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProcessProductionRows() As ProcessProductionRow()
            If (Me.Table.ChildRelations("FK_OrderBatch_ProcessProduction") Is Nothing) Then
                Return New ProcessProductionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_OrderBatch_ProcessProduction")),ProcessProductionRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OrderBatchDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableOrderBatchDetail As OrderBatchDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrderBatchDetail = CType(Me.Table,OrderBatchDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableOrderBatchDetail.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableOrderBatchDetail.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderBatch_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderBatchDetail.OrderBatch_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderBatchDetail.OrderBatch_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderBatch_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderBatchDetail.OrderBatch_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderBatchDetail.OrderBatch_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderBatchDetail.Item_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderBatchDetail.Item_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Return CType(Me(Me.tableOrderBatchDetail.QuantityColumn),Decimal)
            End Get
            Set
                Me(Me.tableOrderBatchDetail.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableOrderBatchDetail.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderBatchDetail.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableOrderBatchDetail.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableOrderBatchDetail.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrderBatchDetail.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'OrderBatchDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderBatchDetail.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableOrderBatchDetail.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderBatchDetail.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_OrderBatchRowParent() As OrderBatchRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Production_OrderBatch_OrderBatch_Detail")),OrderBatchRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Production_OrderBatch_OrderBatch_Detail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableOrderBatchDetail.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableOrderBatchDetail.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProcessProductionRow
        Inherits Global.System.Data.DataRow
        
        Private tableProcessProduction As ProcessProductionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProcessProduction = CType(Me.Table,ProcessProductionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableProcessProduction.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableProcessProduction.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_ID() As Integer
            Get
                Return CType(Me(Me.tableProcessProduction.Production_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProcessProduction.Production_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_No() As String
            Get
                Return CType(Me(Me.tableProcessProduction.Production_NoColumn),String)
            End Get
            Set
                Me(Me.tableProcessProduction.Production_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_Date() As Date
            Get
                Return CType(Me(Me.tableProcessProduction.Production_DateColumn),Date)
            End Get
            Set
                Me(Me.tableProcessProduction.Production_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Order_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessProduction.Order_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Order_ID' in table 'ProcessProduction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessProduction.Order_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderBatch_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessProduction.OrderBatch_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderBatch_ID' in table 'ProcessProduction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessProduction.OrderBatch_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Source_Document_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessProduction.Source_Document_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Source_Document_ID' in table 'ProcessProduction' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessProduction.Source_Document_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Source_DocumentType_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessProduction.Source_DocumentType_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Source_DocumentType_ID' in table 'ProcessProduction' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessProduction.Source_DocumentType_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableProcessProduction.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProcessProduction.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableProcessProduction.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableProcessProduction.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProcessProduction.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'ProcessProduction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessProduction.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableProcessProduction.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProcessProduction.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vender_Party_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessProduction.Vender_Party_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vender_Party_ID' in table 'ProcessProduction' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessProduction.Vender_Party_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_OrderRowParent() As OrderRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Order_ProcessProduction")),OrderRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Order_ProcessProduction"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_OrderBatchRowParent() As OrderBatchRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_OrderBatch_ProcessProduction")),OrderBatchRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_OrderBatch_ProcessProduction"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrder_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessProduction.Order_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrder_IDNull()
            Me(Me.tableProcessProduction.Order_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderBatch_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessProduction.OrderBatch_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderBatch_IDNull()
            Me(Me.tableProcessProduction.OrderBatch_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSource_Document_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessProduction.Source_Document_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSource_Document_IDNull()
            Me(Me.tableProcessProduction.Source_Document_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSource_DocumentType_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessProduction.Source_DocumentType_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSource_DocumentType_IDNull()
            Me(Me.tableProcessProduction.Source_DocumentType_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableProcessProduction.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableProcessProduction.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVender_Party_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessProduction.Vender_Party_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVender_Party_IDNull()
            Me(Me.tableProcessProduction.Vender_Party_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProcessProductionDetailRows() As ProcessProductionDetailRow()
            If (Me.Table.ChildRelations("FK_ProcessProduction_ProcessProduction_Detail") Is Nothing) Then
                Return New ProcessProductionDetailRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ProcessProduction_ProcessProduction_Detail")),ProcessProductionDetailRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProcessProductionDetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableProcessProductionDetail As ProcessProductionDetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProcessProductionDetail = CType(Me.Table,ProcessProductionDetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Co_ID() As Short
            Get
                Return CType(Me(Me.tableProcessProductionDetail.Co_IDColumn),Short)
            End Get
            Set
                Me(Me.tableProcessProductionDetail.Co_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_ID() As Integer
            Get
                Return CType(Me(Me.tableProcessProductionDetail.Production_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProcessProductionDetail.Production_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableProcessProductionDetail.Production_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProcessProductionDetail.Production_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Consumption_Process_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessProductionDetail.Consumption_Process_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Consumption_Process_ID' in table 'ProcessProductionDetail' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessProductionDetail.Consumption_Process_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_Process_ID() As Integer
            Get
                Return CType(Me(Me.tableProcessProductionDetail.Production_Process_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProcessProductionDetail.Production_Process_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Detail_ID() As Integer
            Get
                Return CType(Me(Me.tableProcessProductionDetail.Item_Detail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProcessProductionDetail.Item_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Return CType(Me(Me.tableProcessProductionDetail.QuantityColumn),Decimal)
            End Get
            Set
                Me(Me.tableProcessProductionDetail.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_UserID() As Integer
            Get
                Return CType(Me(Me.tableProcessProductionDetail.Stamp_UserIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProcessProductionDetail.Stamp_UserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stamp_DateTime() As Date
            Get
                Return CType(Me(Me.tableProcessProductionDetail.Stamp_DateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableProcessProductionDetail.Stamp_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Upload_DateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProcessProductionDetail.Upload_DateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Upload_DateTime' in table 'ProcessProductionDetail' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessProductionDetail.Upload_DateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordStatus_ID() As Integer
            Get
                Return CType(Me(Me.tableProcessProductionDetail.RecordStatus_IDColumn),Integer)
            End Get
            Set
                Me(Me.tableProcessProductionDetail.RecordStatus_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemSize_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessProductionDetail.ItemSize_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemSize_ID' in table 'ProcessProductionDetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessProductionDetail.ItemSize_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Production_ProcessProductionRowParent() As ProcessProductionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ProcessProduction_ProcessProduction_Detail")),ProcessProductionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ProcessProduction_ProcessProduction_Detail"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsumption_Process_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessProductionDetail.Consumption_Process_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsumption_Process_IDNull()
            Me(Me.tableProcessProductionDetail.Consumption_Process_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUpload_DateTimeNull() As Boolean
            Return Me.IsNull(Me.tableProcessProductionDetail.Upload_DateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUpload_DateTimeNull()
            Me(Me.tableProcessProductionDetail.Upload_DateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemSize_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessProductionDetail.ItemSize_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemSize_IDNull()
            Me(Me.tableProcessProductionDetail.ItemSize_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProcessBalanceRow
        Inherits Global.System.Data.DataRow
        
        Private tableProcessBalance As ProcessBalanceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProcessBalance = CType(Me.Table,ProcessBalanceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Process_ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProcessBalance.Process_IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Process_ID' in table 'ProcessBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessBalance.Process_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Process_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessBalance.Process_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Process_Code' in table 'ProcessBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessBalance.Process_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Process_Desc() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessBalance.Process_DescColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Process_Desc' in table 'ProcessBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessBalance.Process_DescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessBalance.Item_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_ID' in table 'ProcessBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessBalance.Item_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemSize_ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableProcessBalance.ItemSize_IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemSize_ID' in table 'ProcessBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessBalance.ItemSize_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemSize_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessBalance.ItemSize_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ItemSize_Code' in table 'ProcessBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessBalance.ItemSize_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Detail_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProcessBalance.Item_Detail_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Detail_ID' in table 'ProcessBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessBalance.Item_Detail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableProcessBalance.QuantityColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Quantity' in table 'ProcessBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessBalance.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Item_Code() As String
            Get
                Try 
                    Return CType(Me(Me.tableProcessBalance.Item_CodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Item_Code' in table 'ProcessBalance' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProcessBalance.Item_CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProcess_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessBalance.Process_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProcess_IDNull()
            Me(Me.tableProcessBalance.Process_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProcess_CodeNull() As Boolean
            Return Me.IsNull(Me.tableProcessBalance.Process_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProcess_CodeNull()
            Me(Me.tableProcessBalance.Process_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProcess_DescNull() As Boolean
            Return Me.IsNull(Me.tableProcessBalance.Process_DescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProcess_DescNull()
            Me(Me.tableProcessBalance.Process_DescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessBalance.Item_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_IDNull()
            Me(Me.tableProcessBalance.Item_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemSize_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessBalance.ItemSize_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemSize_IDNull()
            Me(Me.tableProcessBalance.ItemSize_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemSize_CodeNull() As Boolean
            Return Me.IsNull(Me.tableProcessBalance.ItemSize_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemSize_CodeNull()
            Me(Me.tableProcessBalance.ItemSize_CodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_Detail_IDNull() As Boolean
            Return Me.IsNull(Me.tableProcessBalance.Item_Detail_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_Detail_IDNull()
            Me(Me.tableProcessBalance.Item_Detail_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuantityNull() As Boolean
            Return Me.IsNull(Me.tableProcessBalance.QuantityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuantityNull()
            Me(Me.tableProcessBalance.QuantityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItem_CodeNull() As Boolean
            Return Me.IsNull(Me.tableProcessBalance.Item_CodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItem_CodeNull()
            Me(Me.tableProcessBalance.Item_CodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProductionProcessRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProductionProcessRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProductionProcessRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProductionProcessRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProductionProcessWorkFlowRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProductionProcessWorkFlowRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProductionProcessWorkFlowRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProductionProcessWorkFlowRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FormulaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FormulaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FormulaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FormulaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FormulaDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FormulaDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FormulaDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FormulaDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OrderRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OrderRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OrderRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OrderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OrderDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OrderDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OrderDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OrderDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OrderBatchRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OrderBatchRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OrderBatchRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OrderBatchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OrderBatchDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OrderBatchDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OrderBatchDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OrderBatchDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProcessProductionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProcessProductionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProcessProductionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProcessProductionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProcessProductionDetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProcessProductionDetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProcessProductionDetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProcessProductionDetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProcessBalanceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProcessBalanceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProcessBalanceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProcessBalanceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace QuickProductionDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProductionProcessTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ProductionProcess"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Process_ID", "Process_ID")
            tableMapping.ColumnMappings.Add("Process_Code", "Process_Code")
            tableMapping.ColumnMappings.Add("Process_Desc", "Process_Desc")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_Process] WHERE (([Co_ID] = @Original_Co_ID) AND ([Process"& _ 
                "_ID] = @Original_Process_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Process_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_Process] ([Co_ID], [Process_ID], [Process_Code], [Process"& _ 
                "_Desc], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime], [RecordStatus_ID]) "& _ 
                "VALUES (@Co_ID, @Process_ID, @Process_Code, @Process_Desc, @Stamp_UserID, @Stamp"& _ 
                "_DateTime, @Upload_DateTime, @RecordStatus_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_Process] SET [Co_ID] = @Co_ID, [Process_ID] = @Process_ID, [Pr"& _ 
                "ocess_Code] = @Process_Code, [Process_Desc] = @Process_Desc, [Stamp_UserID] = @S"& _ 
                "tamp_UserID, [Stamp_DateTime] = @Stamp_DateTime, [Upload_DateTime] = @Upload_Dat"& _ 
                "eTime, [RecordStatus_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Original_Co_ID) A"& _ 
                "ND ([Process_ID] = @Original_Process_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Process_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Process_ID, Process_Code, Process_Desc, Stamp_UserID, Stamp_Dat"& _ 
                "eTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Process"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Co_ID, Process_ID, Process_Code, Process_Desc, Stamp_UserID, Stamp_Dat"& _ 
                "eTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Process"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "   (Co_ID =@Co_ID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT  Top(1)     Co_ID, Process_ID, Process_Code, Process_Desc, Stamp_UserID, S"& _ 
                "tamp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Process"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE (Co_ID=@Co_ID) AND (RecordStatus_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT   Top(1)  Co_ID, Process_ID, Process_Code, Process_Desc, Stamp_UserID, Sta"& _ 
                "mp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Process"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "WHERE    (Co_ID = @Co_ID) AND (RecordStatus_ID <> 4)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Process_ID DESC"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT ISNULL(MAX(Process_ID), 0) + 1 "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_Process"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (CO_ID"& _ 
                " = @CO_ID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CO_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT  TOP(1)   Co_ID, Process_ID, Process_Code, Process_Desc, Stamp_UserID, Sta"& _ 
                "mp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Process"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "WHERE    (Co_ID=@Co_ID) AND (Process_ID > @Process_ID) AND (RecordStatus_ID <> 4"& _ 
                ")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Process_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT   TOP(1)    Co_ID, Process_ID, Process_Code, Process_Desc, Stamp_UserID, S"& _ 
                "tamp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Process"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  (Co_ID=@CoID) AND (Process_ID < @Process_ID) AND (RecordStatus_ID <> 4 "& _ 
                ")"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Process_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     Co_ID, Process_ID, Process_Code, Process_Desc, Stamp_UserID, Stamp_Dat"& _ 
                "eTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Process"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "   Co_ID=@Co_ID AND Process_Code=@Process_Code AND RecordStatus_ID <> 4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_Code", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT     Co_ID, Process_ID, Process_Code, Process_Desc, Stamp_UserID, Stamp_Dat"& _ 
                "eTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Process"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "   Co_ID=@Co_ID AND Process_Desc=@Process_Desc AND RecordStatus_ID <> 4"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_Desc", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.ProductionProcessDataTable = New QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllByCoID(ByVal Co_ID As Integer) As QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickProductionDataSet.ProductionProcessDataTable = New QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFirstByCoID(ByVal Co_ID As Integer) As QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickProductionDataSet.ProductionProcessDataTable = New QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetLastByCoID(ByVal Co_ID As Integer) As QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickProductionDataSet.ProductionProcessDataTable = New QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetNextByCoIDProcessID(ByVal Co_ID As Integer, ByVal Process_ID As Integer) As QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Process_ID,Integer)
            Dim dataTable As QuickProductionDataSet.ProductionProcessDataTable = New QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPrevByCoIDProcessID(ByVal CoID As Integer, ByVal Process_ID As Integer) As QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(Process_ID,Integer)
            Dim dataTable As QuickProductionDataSet.ProductionProcessDataTable = New QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function IsExistProcessCode(ByVal Co_ID As Integer, ByVal Process_Code As String) As QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            If (Process_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Process_Code")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Process_Code,String)
            End If
            Dim dataTable As QuickProductionDataSet.ProductionProcessDataTable = New QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function IsExistProcessDesc(ByVal Co_ID As Integer, ByVal Process_Desc As String) As QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            If (Process_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Process_Desc")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Process_Desc,String)
            End If
            Dim dataTable As QuickProductionDataSet.ProductionProcessDataTable = New QuickProductionDataSet.ProductionProcessDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.ProductionProcessDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ProductionProcess")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Process_ID As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Process_ID,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Process_ID As Short, ByVal Process_Code As String, ByVal Process_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Process_ID,Short)
            If (Process_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Process_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Process_Code,String)
            End If
            If (Process_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Process_Desc")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Process_Desc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Co_ID As Short, ByVal Process_ID As Short, ByVal Process_Code As String, ByVal Process_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer, ByVal Original_Co_ID As Short, ByVal Original_Process_ID As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Process_ID,Short)
            If (Process_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Process_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Process_Code,String)
            End If
            If (Process_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Process_Desc")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Process_Desc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(RecordStatus_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Process_ID,Short)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Process_Code As String, ByVal Process_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer, ByVal Original_Co_ID As Short, ByVal Original_Process_ID As Short) As Integer
            Return Me.Update(Original_Co_ID, Original_Process_ID, Process_Code, Process_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Original_Co_ID, Original_Process_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewProcessIDByCoID(ByVal CO_ID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(CO_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProductionProcessWorkFlowTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ProductionProcessWorkFlow"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("ProcessWorkFlow_ID", "ProcessWorkFlow_ID")
            tableMapping.ColumnMappings.Add("Source_Process_ID", "Source_Process_ID")
            tableMapping.ColumnMappings.Add("Destination_Process_ID", "Destination_Process_ID")
            tableMapping.ColumnMappings.Add("ProcessWorkFlow_Desc", "ProcessWorkFlow_Desc")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_ProcessWorkFlow] WHERE (([Co_ID] = @Original_Co_ID) AND ("& _ 
                "[ProcessWorkFlow_ID] = @Original_ProcessWorkFlow_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProcessWorkFlow_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessWorkFlow_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_ProcessWorkFlow] ([Co_ID], [ProcessWorkFlow_ID], [Source_"& _ 
                "Process_ID], [Destination_Process_ID], [ProcessWorkFlow_Desc], [Stamp_UserID], ["& _ 
                "Stamp_DateTime], [Upload_DateTime], [RecordStatus_ID]) VALUES (@Co_ID, @ProcessW"& _ 
                "orkFlow_ID, @Source_Process_ID, @Destination_Process_ID, @ProcessWorkFlow_Desc, "& _ 
                "@Stamp_UserID, @Stamp_DateTime, @Upload_DateTime, @RecordStatus_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProcessWorkFlow_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessWorkFlow_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_Process_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Destination_Process_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Destination_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProcessWorkFlow_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessWorkFlow_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_ProcessWorkFlow] SET [Co_ID] = @Co_ID, [ProcessWorkFlow_ID] = "& _ 
                "@ProcessWorkFlow_ID, [Source_Process_ID] = @Source_Process_ID, [Destination_Proc"& _ 
                "ess_ID] = @Destination_Process_ID, [ProcessWorkFlow_Desc] = @ProcessWorkFlow_Des"& _ 
                "c, [Stamp_UserID] = @Stamp_UserID, [Stamp_DateTime] = @Stamp_DateTime, [Upload_D"& _ 
                "ateTime] = @Upload_DateTime, [RecordStatus_ID] = @RecordStatus_ID WHERE (([Co_ID"& _ 
                "] = @Original_Co_ID) AND ([ProcessWorkFlow_ID] = @Original_ProcessWorkFlow_ID))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProcessWorkFlow_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessWorkFlow_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_Process_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Destination_Process_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Destination_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProcessWorkFlow_Desc", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessWorkFlow_Desc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProcessWorkFlow_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProcessWorkFlow_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, ProcessWorkFlow_ID, Source_Process_ID,  Destination_Process_ID,"& _ 
                "  ProcessWorkFlow_Desc, Stamp_UserID, Stamp_DateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Up"& _ 
                "load_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_ProcessWorkFlow"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     pwf.Co_ID, ProcessWorkFlow_ID, Source_Process_ID, pp.Process_Desc as  "& _ 
                "                 Source_Process_Desc, Destination_Process_ID, pp1.Process_Desc a"& _ 
                "s                 Destination_Process_Desc, ProcessWorkFlow_Desc, pwf.Stamp_User"& _ 
                "ID, pwf.Stamp_DateTime,                 pwf.Upload_DateTime,  pwf.RecordStatus_I"& _ 
                "D"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_ProcessWorkFlow pwf"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER Join Production_Process a"& _ 
                "s pp on pwf.Source_Process_ID=pp.Process_ID "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"INNER JOIN Production_Process as "& _ 
                "pp1 on pwf.Destination_Process_ID=pp1.Process_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE    (pwf.Co_ID=@Co_ID) AN"& _ 
                "D (pwf.RecordStatus_ID <> 4)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     ProcessWorkFlow_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_ProcessWorkFlow"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_"& _ 
                "ID = @CoID AND Source_Process_ID = @SourceProcessID AND Destination_Process_ID ="& _ 
                " @DestinationProcessID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SourceProcessID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DestinationProcessID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Destination_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT IsNull(MAX(ProcessWorkFlow_ID),0) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_ProcessWorkFlow"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                " Co_ID=@Co_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.ProductionProcessWorkFlowDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.ProductionProcessWorkFlowDataTable = New QuickProductionDataSet.ProductionProcessWorkFlowDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetAllByCoID(ByVal Co_ID As Integer) As QuickProductionDataSet.ProductionProcessWorkFlowDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Co_ID,Integer)
            Dim dataTable As QuickProductionDataSet.ProductionProcessWorkFlowDataTable = New QuickProductionDataSet.ProductionProcessWorkFlowDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.ProductionProcessWorkFlowDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ProductionProcessWorkFlow")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_ProcessWorkFlow_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ProcessWorkFlow_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal ProcessWorkFlow_ID As Integer, ByVal Source_Process_ID As Global.System.Nullable(Of Short), ByVal Destination_Process_ID As Global.System.Nullable(Of Short), ByVal ProcessWorkFlow_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ProcessWorkFlow_ID,Integer)
            If (Source_Process_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Source_Process_ID.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Destination_Process_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Destination_Process_ID.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ProcessWorkFlow_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProcessWorkFlow_Desc")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ProcessWorkFlow_Desc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Co_ID As Short, ByVal ProcessWorkFlow_ID As Integer, ByVal Source_Process_ID As Global.System.Nullable(Of Short), ByVal Destination_Process_ID As Global.System.Nullable(Of Short), ByVal ProcessWorkFlow_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer, ByVal Original_Co_ID As Short, ByVal Original_ProcessWorkFlow_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ProcessWorkFlow_ID,Integer)
            If (Source_Process_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Source_Process_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Destination_Process_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Destination_Process_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ProcessWorkFlow_Desc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ProcessWorkFlow_Desc")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ProcessWorkFlow_Desc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RecordStatus_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ProcessWorkFlow_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Source_Process_ID As Global.System.Nullable(Of Short), ByVal Destination_Process_ID As Global.System.Nullable(Of Short), ByVal ProcessWorkFlow_Desc As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer, ByVal Original_Co_ID As Short, ByVal Original_ProcessWorkFlow_ID As Integer) As Integer
            Return Me.Update(Original_Co_ID, Original_ProcessWorkFlow_ID, Source_Process_ID, Destination_Process_ID, ProcessWorkFlow_Desc, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Original_Co_ID, Original_ProcessWorkFlow_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetProcessWorkFlowIDByCoIDSourceAndDestinationProcessID(ByVal CoID As Short, ByVal SourceProcessID As Global.System.Nullable(Of Short), ByVal DestinationProcessID As Global.System.Nullable(Of Short)) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(CoID,Short)
            If (SourceProcessID.HasValue = true) Then
                command.Parameters(1).Value = CType(SourceProcessID.Value,Short)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DestinationProcessID.HasValue = true) Then
                command.Parameters(2).Value = CType(DestinationProcessID.Value,Short)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function IsMaxByProcessWorkFlowID(ByVal Co_ID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(Co_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FormulaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Formula"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Formula_ID", "Formula_ID")
            tableMapping.ColumnMappings.Add("Formula_Code", "Formula_Code")
            tableMapping.ColumnMappings.Add("Formula_Description", "Formula_Description")
            tableMapping.ColumnMappings.Add("Output_Item_Detail_ID", "Output_Item_Detail_ID")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_Formula] WHERE (([Co_ID] = @Original_Co_ID) AND ([Formula"& _ 
                "_ID] = @Original_Formula_ID) AND ([Formula_Code] = @Original_Formula_Code) AND ("& _ 
                "[Formula_Description] = @Original_Formula_Description) AND ([Output_Item_Detail_"& _ 
                "ID] = @Original_Output_Item_Detail_ID) AND ([Stamp_UserID] = @Original_Stamp_Use"& _ 
                "rID) AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_Date"& _ 
                "Time = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload"& _ 
                "_DateTime)) AND ([RecordStatus_ID] = @Original_RecordStatus_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Description", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Output_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Output_Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_Formula] ([Co_ID], [Formula_ID], [Formula_Code], [Formula"& _ 
                "_Description], [Output_Item_Detail_ID], [Stamp_UserID], [Stamp_DateTime], [Uploa"& _ 
                "d_DateTime], [RecordStatus_ID]) VALUES (@Co_ID, @Formula_ID, @Formula_Code, @For"& _ 
                "mula_Description, @Output_Item_Detail_ID, @Stamp_UserID, @Stamp_DateTime, @Uploa"& _ 
                "d_DateTime, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Formula_ID, Formula_Code, Formula_"& _ 
                "Description, Output_Item_Detail_ID, Stamp_UserID, Stamp_DateTime, Upload_DateTim"& _ 
                "e, RecordStatus_ID FROM Production_Formula WHERE (Co_ID = @Co_ID) AND (Formula_I"& _ 
                "D = @Formula_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Output_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Output_Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_Formula] SET [Co_ID] = @Co_ID, [Formula_ID] = @Formula_ID, [Fo"& _ 
                "rmula_Code] = @Formula_Code, [Formula_Description] = @Formula_Description, [Outp"& _ 
                "ut_Item_Detail_ID] = @Output_Item_Detail_ID, [Stamp_UserID] = @Stamp_UserID, [St"& _ 
                "amp_DateTime] = @Stamp_DateTime, [Upload_DateTime] = @Upload_DateTime, [RecordSt"& _ 
                "atus_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Original_Co_ID) AND ([Formula_ID]"& _ 
                " = @Original_Formula_ID) AND ([Formula_Code] = @Original_Formula_Code) AND ([For"& _ 
                "mula_Description] = @Original_Formula_Description) AND ([Output_Item_Detail_ID] "& _ 
                "= @Original_Output_Item_Detail_ID) AND ([Stamp_UserID] = @Original_Stamp_UserID)"& _ 
                " AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime"& _ 
                " = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_Dat"& _ 
                "eTime)) AND ([RecordStatus_ID] = @Original_RecordStatus_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, For"& _ 
                "mula_ID, Formula_Code, Formula_Description, Output_Item_Detail_ID, Stamp_UserID,"& _ 
                " Stamp_DateTime, Upload_DateTime, RecordStatus_ID FROM Production_Formula WHERE "& _ 
                "(Co_ID = @Co_ID) AND (Formula_ID = @Formula_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Output_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Output_Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_Code", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_Description", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Description", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Output_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Output_Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Formula_ID, Formula_Code, Formula_Description, Output_Item_Deta"& _ 
                "il_ID, Stamp_UserID, Stamp_DateTime, Upload_DateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Re"& _ 
                "cordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Formula"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Production_Formula.Co_ID, Production_Formula.Formula_Code, Production_"& _ 
                "Formula.Formula_Description, Production_Formula.Formula_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    Production_Formula.Output_Item_Detail_ID, Production_Formula.RecordStatus_ID"& _ 
                ", Production_Formula.Stamp_DateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_Formula."& _ 
                "Stamp_UserID, Production_Formula.Upload_DateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Inv_Item_Detail I"& _ 
                "NNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Invs_Item ON Inv_Item_Detail.Co_ID = Invs_Item."& _ 
                "Co_ID AND Inv_Item_Detail.Item_ID = Invs_Item.Item_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "        Production_Formula ON Inv_Item_Detail.Co_ID = Production_Formula.Co_ID A"& _ 
                "ND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Inv_Item_Detail.Item_Detail_ID = Production_Formula.O"& _ 
                "utput_Item_Detail_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Production_Formula.Co_ID = @CoID) AND (Invs_Ite"& _ 
                "m.Item_Code = @ItemCode) AND (Inv_Item_Detail.ItemSize_ID = @ItemSizeID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemCode", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemSizeID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "ItemSize_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Co_ID, Formula_Code, Formula_Description, Formula_ID, Output_Item_Detail_I"& _ 
                "D, RecordStatus_ID, Stamp_DateTime, Stamp_UserID, Upload_DateTime FROM Productio"& _ 
                "n_Formula WHERE (Co_ID = @CoID) AND (Output_Item_Detail_ID = @OutputItemDetailID"& _ 
                ")"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OutputItemDetailID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Output_Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT CONVERT(INT, ISNULL(MAX(Formula_ID), 0) + 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_Formula"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE Co_ID = @CoID"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.FormulaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.FormulaDataTable = New QuickProductionDataSet.FormulaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDItemCodeItemSizeID(ByVal CoID As Integer, ByVal ItemCode As String, ByVal ItemSizeID As Global.System.Nullable(Of Integer)) As QuickProductionDataSet.FormulaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            If (ItemCode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ItemCode")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ItemCode,String)
            End If
            If (ItemSizeID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ItemSizeID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As QuickProductionDataSet.FormulaDataTable = New QuickProductionDataSet.FormulaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDOutputItemID(ByVal CoID As Integer, ByVal OutputItemDetailID As Integer) As QuickProductionDataSet.FormulaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(OutputItemDetailID,Integer)
            Dim dataTable As QuickProductionDataSet.FormulaDataTable = New QuickProductionDataSet.FormulaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.FormulaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Formula")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Formula_ID As Integer, ByVal Original_Formula_Code As String, ByVal Original_Formula_Description As String, ByVal Original_Output_Item_Detail_ID As Integer, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Formula_ID,Integer)
            If (Original_Formula_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Formula_Code")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Formula_Code,String)
            End If
            If (Original_Formula_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Formula_Description")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Formula_Description,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Output_Item_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Formula_ID As Integer, ByVal Formula_Code As String, ByVal Formula_Description As String, ByVal Output_Item_Detail_ID As Integer, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Formula_ID,Integer)
            If (Formula_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Formula_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Formula_Code,String)
            End If
            If (Formula_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Formula_Description")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Formula_Description,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Output_Item_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Formula_ID As Integer,  _
                    ByVal Formula_Code As String,  _
                    ByVal Formula_Description As String,  _
                    ByVal Output_Item_Detail_ID As Integer,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Formula_ID As Integer,  _
                    ByVal Original_Formula_Code As String,  _
                    ByVal Original_Formula_Description As String,  _
                    ByVal Original_Output_Item_Detail_ID As Integer,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Formula_ID,Integer)
            If (Formula_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Formula_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Formula_Code,String)
            End If
            If (Formula_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Formula_Description")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Formula_Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Output_Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RecordStatus_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Formula_ID,Integer)
            If (Original_Formula_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Formula_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Formula_Code,String)
            End If
            If (Original_Formula_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Formula_Description")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Formula_Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Output_Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Formula_Code As String,  _
                    ByVal Formula_Description As String,  _
                    ByVal Output_Item_Detail_ID As Integer,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Formula_ID As Integer,  _
                    ByVal Original_Formula_Code As String,  _
                    ByVal Original_Formula_Description As String,  _
                    ByVal Original_Output_Item_Detail_ID As Integer,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Return Me.Update(Original_Co_ID, Original_Formula_ID, Formula_Code, Formula_Description, Output_Item_Detail_ID, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Original_Co_ID, Original_Formula_ID, Original_Formula_Code, Original_Formula_Description, Original_Output_Item_Detail_ID, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_RecordStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewFormulaID(ByVal CoID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(CoID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FormulaDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FormulaDetail"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Formula_ID", "Formula_ID")
            tableMapping.ColumnMappings.Add("Formula_Detail_ID", "Formula_Detail_ID")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            tableMapping.ColumnMappings.Add("Input_Item_Detail_ID", "Input_Item_Detail_ID")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Item_Desc", "Item_Desc")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_Formula_Detail] WHERE (([Co_ID] = @Original_Co_ID) AND (["& _ 
                "Formula_ID] = @Original_Formula_ID) AND ([Formula_Detail_ID] = @Original_Formula"& _ 
                "_Detail_ID) AND ([Remarks] = @Original_Remarks) AND ([Input_Item_Detail_ID] = @O"& _ 
                "riginal_Input_Item_Detail_ID) AND ([Quantity] = @Original_Quantity) AND ([Stamp_"& _ 
                "UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTime] = @Original_Stamp_DateTi"& _ 
                "me) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Upload"& _ 
                "_DateTime] = @Original_Upload_DateTime)) AND ([RecordStatus_ID] = @Original_Reco"& _ 
                "rdStatus_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Input_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input_Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_Formula_Detail] ([Co_ID], [Formula_ID], [Formula_Detail_I"& _ 
                "D], [Remarks], [Input_Item_Detail_ID], [Quantity], [Stamp_UserID], [Stamp_DateTi"& _ 
                "me], [Upload_DateTime], [RecordStatus_ID]) VALUES (@Co_ID, @Formula_ID, @Formula"& _ 
                "_Detail_ID, @Remarks, @Input_Item_Detail_ID, @Quantity, @Stamp_UserID, @Stamp_Da"& _ 
                "teTime, @Upload_DateTime, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Formula_ID, Formula_"& _ 
                "Detail_ID, Remarks, Input_Item_Detail_ID, '' AS Item_Desc, Quantity, Stamp_UserI"& _ 
                "D, Stamp_DateTime, Upload_DateTime, RecordStatus_ID FROM Production_Formula_Deta"& _ 
                "il WHERE (Co_ID = @Co_ID) AND (Formula_Detail_ID = @Formula_Detail_ID) AND (Form"& _ 
                "ula_ID = @Formula_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Input_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input_Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_Formula_Detail] SET [Co_ID] = @Co_ID, [Formula_ID] = @Formula_"& _ 
                "ID, [Formula_Detail_ID] = @Formula_Detail_ID, [Remarks] = @Remarks, [Input_Item_"& _ 
                "Detail_ID] = @Input_Item_Detail_ID, [Quantity] = @Quantity, [Stamp_UserID] = @St"& _ 
                "amp_UserID, [Stamp_DateTime] = @Stamp_DateTime, [Upload_DateTime] = @Upload_Date"& _ 
                "Time, [RecordStatus_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Original_Co_ID) AN"& _ 
                "D ([Formula_ID] = @Original_Formula_ID) AND ([Formula_Detail_ID] = @Original_For"& _ 
                "mula_Detail_ID) AND ([Remarks] = @Original_Remarks) AND ([Input_Item_Detail_ID] "& _ 
                "= @Original_Input_Item_Detail_ID) AND ([Quantity] = @Original_Quantity) AND ([St"& _ 
                "amp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTime] = @Original_Stamp_Da"& _ 
                "teTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Up"& _ 
                "load_DateTime] = @Original_Upload_DateTime)) AND ([RecordStatus_ID] = @Original_"& _ 
                "RecordStatus_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Formula_ID, Formula_Detail_ID, Remarks, Input_"& _ 
                "Item_Detail_ID, '' AS Item_Desc, Quantity, Stamp_UserID, Stamp_DateTime, Upload_"& _ 
                "DateTime, RecordStatus_ID FROM Production_Formula_Detail WHERE (Co_ID = @Co_ID) "& _ 
                "AND (Formula_Detail_ID = @Formula_Detail_ID) AND (Formula_ID = @Formula_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Input_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input_Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Input_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Input_Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Co_ID, Formula_ID, Formula_Detail_ID, Remarks, Input_Item_Detail_ID,'' AS "& _ 
                "Item_Desc, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus"& _ 
                "_ID FROM Production_Formula_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Production_Formula_Detail.Co_ID, Production_Formula_Detail.Formula_Det"& _ 
                "ail_ID, Production_Formula_Detail.Formula_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production"& _ 
                "_Formula_Detail.Input_Item_Detail_ID, Production_Formula_Detail.Quantity, Produc"& _ 
                "tion_Formula_Detail.RecordStatus_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_Formula_"& _ 
                "Detail.Remarks, Production_Formula_Detail.Stamp_DateTime, Production_Formula_Det"& _ 
                "ail.Stamp_UserID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_Formula_Detail.Upload_DateT"& _ 
                "ime, Invs_Item.Item_Desc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Inv_Item_Detail INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         Production_Formula_Detail ON Inv_Item_Detail.Co_ID = Production_Formula"& _ 
                "_Detail.Co_ID AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Inv_Item_Detail.Item_Detail_ID = Produ"& _ 
                "ction_Formula_Detail.Input_Item_Detail_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Invs"& _ 
                "_Item ON Inv_Item_Detail.Co_ID = Invs_Item.Co_ID AND Inv_Item_Detail.Item_ID = I"& _ 
                "nvs_Item.Item_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Production_Formula_Detail.Co_ID = @CoID) AND (Produ"& _ 
                "ction_Formula_Detail.Formula_ID = @FormulaID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormulaID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     Production_Formula_Detail.Co_ID, Production_Formula_Detail.Formula_Det"& _ 
                "ail_ID, Production_Formula_Detail.Formula_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production"& _ 
                "_Formula_Detail.Input_Item_Detail_ID, Production_Formula_Detail.Quantity, Produc"& _ 
                "tion_Formula_Detail.RecordStatus_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_Formula_"& _ 
                "Detail.Remarks, Production_Formula_Detail.Stamp_DateTime, Production_Formula_Det"& _ 
                "ail.Stamp_UserID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_Formula_Detail.Upload_DateT"& _ 
                "ime, Invs_Item.Item_Desc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Inv_Item_Detail INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "         Production_Formula_Detail ON Inv_Item_Detail.Co_ID = Production_Formula"& _ 
                "_Detail.Co_ID AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Inv_Item_Detail.Item_Detail_ID = Produ"& _ 
                "ction_Formula_Detail.Input_Item_Detail_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Invs"& _ 
                "_Item ON Inv_Item_Detail.Co_ID = Invs_Item.Co_ID AND Inv_Item_Detail.Item_ID = I"& _ 
                "nvs_Item.Item_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Production_Formula_Detail.Co_ID = @CoID) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND Pro"& _ 
                "duction_Formula_Detail.Formula_ID = @FormulaID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND (Production_Formula_Detail."& _ 
                "Input_Item_Detail_ID = @InputItemDetailID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormulaID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputItemDetailID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Input_Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT CONVERT(INT, ISNULL( MAX(Formula_Detail_ID), 0) + 1) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_For"& _ 
                "mula_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID AND Formula_ID = @FormulaID"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormulaID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.FormulaDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.FormulaDetailDataTable = New QuickProductionDataSet.FormulaDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDFormulaID(ByVal CoID As Integer, ByVal FormulaID As Integer) As QuickProductionDataSet.FormulaDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(FormulaID,Integer)
            Dim dataTable As QuickProductionDataSet.FormulaDetailDataTable = New QuickProductionDataSet.FormulaDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDFormulaIDInputItemDetailID(ByVal CoID As Integer, ByVal FormulaID As Integer, ByVal InputItemDetailID As Integer) As QuickProductionDataSet.FormulaDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(FormulaID,Integer)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(InputItemDetailID,Integer)
            Dim dataTable As QuickProductionDataSet.FormulaDetailDataTable = New QuickProductionDataSet.FormulaDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.FormulaDetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FormulaDetail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Formula_ID As Integer, ByVal Original_Formula_Detail_ID As Integer, ByVal Original_Remarks As String, ByVal Original_Input_Item_Detail_ID As Integer, ByVal Original_Quantity As Decimal, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Formula_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Formula_Detail_ID,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Input_Item_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Quantity,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Formula_ID As Integer, ByVal Formula_Detail_ID As Integer, ByVal Remarks As String, ByVal Input_Item_Detail_ID As Integer, ByVal Quantity As Decimal, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Formula_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Formula_Detail_ID,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Input_Item_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Quantity,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Formula_ID As Integer,  _
                    ByVal Formula_Detail_ID As Integer,  _
                    ByVal Remarks As String,  _
                    ByVal Input_Item_Detail_ID As Integer,  _
                    ByVal Quantity As Decimal,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Formula_ID As Integer,  _
                    ByVal Original_Formula_Detail_ID As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_Input_Item_Detail_ID As Integer,  _
                    ByVal Original_Quantity As Decimal,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Formula_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Formula_Detail_ID,Integer)
            If (Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Input_Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Quantity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(RecordStatus_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Formula_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Formula_Detail_ID,Integer)
            If (Original_Remarks Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Remarks")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Input_Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Quantity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Remarks As String,  _
                    ByVal Input_Item_Detail_ID As Integer,  _
                    ByVal Quantity As Decimal,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Formula_ID As Integer,  _
                    ByVal Original_Formula_Detail_ID As Integer,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_Input_Item_Detail_ID As Integer,  _
                    ByVal Original_Quantity As Decimal,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Return Me.Update(Original_Co_ID, Original_Formula_ID, Original_Formula_Detail_ID, Remarks, Input_Item_Detail_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Original_Co_ID, Original_Formula_ID, Original_Formula_Detail_ID, Original_Remarks, Original_Input_Item_Detail_ID, Original_Quantity, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_RecordStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewFormulaDetailID(ByVal CoID As Integer, ByVal FormulaID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(CoID,Integer)
            command.Parameters(1).Value = CType(FormulaID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class OrderTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Order"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Order_ID", "Order_ID")
            tableMapping.ColumnMappings.Add("Order_No", "Order_No")
            tableMapping.ColumnMappings.Add("Order_Date", "Order_Date")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_Order] WHERE (([Co_ID] = @Original_Co_ID) AND ([Order_ID]"& _ 
                " = @Original_Order_ID) AND ([Order_No] = @Original_Order_No) AND ([Order_Date] ="& _ 
                " @Original_Order_Date) AND ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ([Rem"& _ 
                "arks] = @Original_Remarks)) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND (["& _ 
                "Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AN"& _ 
                "D [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime))"& _ 
                " AND ([RecordStatus_ID] = @Original_RecordStatus_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_Order] ([Co_ID], [Order_ID], [Order_No], [Order_Date], [R"& _ 
                "emarks], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime], [RecordStatus_ID])"& _ 
                " VALUES (@Co_ID, @Order_ID, @Order_No, @Order_Date, @Remarks, @Stamp_UserID, @St"& _ 
                "amp_DateTime, @Upload_DateTime, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Order_ID, Orde"& _ 
                "r_No, Order_Date, Remarks, Stamp_UserID, Stamp_DateTime, Upload_DateTime, Record"& _ 
                "Status_ID FROM Production_Order WHERE (Co_ID = @Co_ID) AND (Order_ID = @Order_ID"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_Order] SET [Co_ID] = @Co_ID, [Order_ID] = @Order_ID, [Order_No"& _ 
                "] = @Order_No, [Order_Date] = @Order_Date, [Remarks] = @Remarks, [Stamp_UserID] "& _ 
                "= @Stamp_UserID, [Stamp_DateTime] = @Stamp_DateTime, [Upload_DateTime] = @Upload"& _ 
                "_DateTime, [RecordStatus_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Original_Co_I"& _ 
                "D) AND ([Order_ID] = @Original_Order_ID) AND ([Order_No] = @Original_Order_No) A"& _ 
                "ND ([Order_Date] = @Original_Order_Date) AND ((@IsNull_Remarks = 1 AND [Remarks]"& _ 
                " IS NULL) OR ([Remarks] = @Original_Remarks)) AND ([Stamp_UserID] = @Original_St"& _ 
                "amp_UserID) AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Uplo"& _ 
                "ad_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Original"& _ 
                "_Upload_DateTime)) AND ([RecordStatus_ID] = @Original_RecordStatus_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " Co_ID, Order_ID, Order_No, Order_Date, Remarks, Stamp_UserID, Stamp_DateTime, U"& _ 
                "pload_DateTime, RecordStatus_ID FROM Production_Order WHERE (Co_ID = @Co_ID) AND"& _ 
                " (Order_ID = @Order_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(7) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Order_ID, Order_No, Order_Date, Remarks, Stamp_UserID, Stamp_Da"& _ 
                "teTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Order"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "dbo.spGetProductionByCoIDItemCode"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 5, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemCode", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     TOP 1 Co_ID, Order_ID, Order_No, Order_Date, Remarks, Stamp_UserID, St"& _ 
                "amp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Order"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE Co_ID = @CoID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Co_ID, Order_ID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     top 1 Co_ID, Order_ID, Order_No, Order_Date, Remarks, Stamp_UserID, St"& _ 
                "amp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Order"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE Co_ID = @CoID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Co_ID, Order_ID DESC"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT MAX(Order_No) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_Order"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID AND Order_No LI"& _ 
                "KE @OrderNo"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderNo", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT CONVERT(INT, ISNULL(MAX(Order_ID), 0) + 1) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_Order"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "Co_ID = @CoID"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT     top 1 Co_ID, Order_ID, Order_No, Order_Date, Remarks, Stamp_UserID, St"& _ 
                "amp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Order"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE Co_ID = @CoID AND Order_ID > @CurrentOrderID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Co_ID, Order_ID"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrentOrderID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     top 1 Co_ID, Order_ID, Order_No, Order_Date, Remarks, Stamp_UserID, St"& _ 
                "amp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Order"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE Co_ID = @CoID AND Order_ID < @CurrentOrderID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Co_ID, Order_ID DESC"& _ 
                ""
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CurrentOrderID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.OrderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.OrderDataTable = New QuickProductionDataSet.OrderDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDItemCode(ByVal CoID As Global.System.Nullable(Of Short), ByVal ItemCode As String) As QuickProductionDataSet.OrderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CoID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CoID.Value,Short)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ItemCode Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ItemCode,String)
            End If
            Dim dataTable As QuickProductionDataSet.OrderDataTable = New QuickProductionDataSet.OrderDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetFirstByCoID(ByVal CoID As Integer) As QuickProductionDataSet.OrderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Dim dataTable As QuickProductionDataSet.OrderDataTable = New QuickProductionDataSet.OrderDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetLastByCoID(ByVal CoID As Integer) As QuickProductionDataSet.OrderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Dim dataTable As QuickProductionDataSet.OrderDataTable = New QuickProductionDataSet.OrderDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetNextByCoIDOrderID(ByVal CoID As Integer, ByVal CurrentOrderID As Integer) As QuickProductionDataSet.OrderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(CurrentOrderID,Integer)
            Dim dataTable As QuickProductionDataSet.OrderDataTable = New QuickProductionDataSet.OrderDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetPreviousByCoIDOrderID(ByVal CoID As Integer, ByVal CurrentOrderID As Integer) As QuickProductionDataSet.OrderDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(CurrentOrderID,Integer)
            Dim dataTable As QuickProductionDataSet.OrderDataTable = New QuickProductionDataSet.OrderDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.OrderDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Order")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Order_ID As Integer, ByVal Original_Order_No As String, ByVal Original_Order_Date As Date, ByVal Original_Remarks As String, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Order_ID,Integer)
            If (Original_Order_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Order_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Order_No,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Order_Date,Date)
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Order_ID As Integer, ByVal Order_No As String, ByVal Order_Date As Date, ByVal Remarks As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Order_ID,Integer)
            If (Order_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Order_No")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Order_No,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Order_Date,Date)
            If (Remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Order_ID As Integer,  _
                    ByVal Order_No As String,  _
                    ByVal Order_Date As Date,  _
                    ByVal Remarks As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Order_ID As Integer,  _
                    ByVal Original_Order_No As String,  _
                    ByVal Original_Order_Date As Date,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Order_ID,Integer)
            If (Order_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Order_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Order_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Order_Date,Date)
            If (Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RecordStatus_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Order_ID,Integer)
            If (Original_Order_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Order_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Order_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Order_Date,Date)
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Order_No As String,  _
                    ByVal Order_Date As Date,  _
                    ByVal Remarks As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Order_ID As Integer,  _
                    ByVal Original_Order_No As String,  _
                    ByVal Original_Order_Date As Date,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Return Me.Update(Original_Co_ID, Original_Order_ID, Order_No, Order_Date, Remarks, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Original_Co_ID, Original_Order_ID, Original_Order_No, Original_Order_Date, Original_Remarks, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_RecordStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetMaxOrderNoByCoID(ByVal CoID As Integer, ByVal OrderNo As String) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(CoID,Integer)
            If (OrderNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OrderNo")
            Else
                command.Parameters(1).Value = CType(OrderNo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewOrderIDByCoID(ByVal CoID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            command.Parameters(0).Value = CType(CoID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class OrderDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OrderDetail"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Order_ID", "Order_ID")
            tableMapping.ColumnMappings.Add("Order_Detail_ID", "Order_Detail_ID")
            tableMapping.ColumnMappings.Add("Item_Detail_ID", "Item_Detail_ID")
            tableMapping.ColumnMappings.Add("Formula_ID", "Formula_ID")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            tableMapping.ColumnMappings.Add("Item_Code", "Item_Code")
            tableMapping.ColumnMappings.Add("Item_Desc", "Item_Desc")
            tableMapping.ColumnMappings.Add("ItemSize_ID", "ItemSize_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_Order_Detail] WHERE (([Co_ID] = @Original_Co_ID) AND ([Or"& _ 
                "der_ID] = @Original_Order_ID) AND ([Order_Detail_ID] = @Original_Order_Detail_ID"& _ 
                ") AND ([Item_Detail_ID] = @Original_Item_Detail_ID) AND ([Formula_ID] = @Origina"& _ 
                "l_Formula_ID) AND ([Quantity] = @Original_Quantity) AND ([Stamp_UserID] = @Origi"& _ 
                "nal_Stamp_UserID) AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNul"& _ 
                "l_Upload_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Or"& _ 
                "iginal_Upload_DateTime)) AND ([RecordStatus_ID] = @Original_RecordStatus_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_Order_Detail] ([Co_ID], [Order_ID], [Order_Detail_ID], [I"& _ 
                "tem_Detail_ID], [Formula_ID], [Quantity], [Stamp_UserID], [Stamp_DateTime], [Upl"& _ 
                "oad_DateTime], [RecordStatus_ID]) VALUES (@Co_ID, @Order_ID, @Order_Detail_ID, @"& _ 
                "Item_Detail_ID, @Formula_ID, @Quantity, @Stamp_UserID, @Stamp_DateTime, @Upload_"& _ 
                "DateTime, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Order_ID, Order_Detail_ID, Item_Deta"& _ 
                "il_ID, Formula_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, Reco"& _ 
                "rdStatus_ID, '' AS Item_Code, '' AS Item_Desc, 0 AS ItemSize_ID FROM Production_"& _ 
                "Order_Detail WHERE (Co_ID = @Co_ID) AND (Order_Detail_ID = @Order_Detail_ID) AND"& _ 
                " (Order_ID = @Order_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_Order_Detail] SET [Co_ID] = @Co_ID, [Order_ID] = @Order_ID, [O"& _ 
                "rder_Detail_ID] = @Order_Detail_ID, [Item_Detail_ID] = @Item_Detail_ID, [Formula"& _ 
                "_ID] = @Formula_ID, [Quantity] = @Quantity, [Stamp_UserID] = @Stamp_UserID, [Sta"& _ 
                "mp_DateTime] = @Stamp_DateTime, [Upload_DateTime] = @Upload_DateTime, [RecordSta"& _ 
                "tus_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Original_Co_ID) AND ([Order_ID] = "& _ 
                "@Original_Order_ID) AND ([Order_Detail_ID] = @Original_Order_Detail_ID) AND ([It"& _ 
                "em_Detail_ID] = @Original_Item_Detail_ID) AND ([Formula_ID] = @Original_Formula_"& _ 
                "ID) AND ([Quantity] = @Original_Quantity) AND ([Stamp_UserID] = @Original_Stamp_"& _ 
                "UserID) AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_D"& _ 
                "ateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upl"& _ 
                "oad_DateTime)) AND ([RecordStatus_ID] = @Original_RecordStatus_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_"& _ 
                "ID, Order_ID, Order_Detail_ID, Item_Detail_ID, Formula_ID, Quantity, Stamp_UserI"& _ 
                "D, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, '' AS Item_Code, '' AS Item"& _ 
                "_Desc, 0 AS ItemSize_ID FROM Production_Order_Detail WHERE (Co_ID = @Co_ID) AND "& _ 
                "(Order_Detail_ID = @Order_Detail_ID) AND (Order_ID = @Order_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Formula_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Formula_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Order_ID, Order_Detail_ID, Item_Detail_ID, Formula_ID, Quantity"& _ 
                ", Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, '' AS Item_Cod"& _ 
                "e, '' AS Item_Desc, 0 AS ItemSize_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Order_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Production_Order_Detail.Co_ID, Production_Order_Detail.Formula_ID, Pro"& _ 
                "duction_Order_Detail.Item_Detail_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_Order_De"& _ 
                "tail.Order_Detail_ID, Production_Order_Detail.Order_ID, Production_Order_Detail."& _ 
                "Quantity, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_Order_Detail.RecordStatus_ID, Produ"& _ 
                "ction_Order_Detail.Stamp_DateTime, Production_Order_Detail.Stamp_UserID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"     "& _ 
                "                 Production_Order_Detail.Upload_DateTime, Invs_Item.Item_Code, I"& _ 
                "nvs_Item.Item_Desc, Inv_Item_Detail.ItemSize_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_Order_D"& _ 
                "etail INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Inv_Item_Detail ON Production_Order_Deta"& _ 
                "il.Co_ID = Inv_Item_Detail.Co_ID AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_Order_De"& _ 
                "tail.Item_Detail_ID = Inv_Item_Detail.Item_Detail_ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       Invs_Item ON Inv_Item_Detail.Co_ID = Invs_Item.Co_ID AND Inv_Item_Detail."& _ 
                "Item_ID = Invs_Item.Item_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Production_Order_Detail.Co_ID = @CoID) A"& _ 
                "ND (Production_Order_Detail.Order_ID = @OrderID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CONVERT(INT, ISNULL(MAX(Order_Detail_ID), 0) + 1) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_Order_"& _ 
                "Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID AND Order_ID = @OrderID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.OrderDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.OrderDetailDataTable = New QuickProductionDataSet.OrderDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDOrderID(ByVal CoID As Integer, ByVal OrderID As Integer) As QuickProductionDataSet.OrderDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(OrderID,Integer)
            Dim dataTable As QuickProductionDataSet.OrderDetailDataTable = New QuickProductionDataSet.OrderDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.OrderDetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "OrderDetail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Order_ID As Integer, ByVal Original_Order_Detail_ID As Integer, ByVal Original_Item_Detail_ID As Integer, ByVal Original_Formula_ID As Integer, ByVal Original_Quantity As Decimal, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Order_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Order_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Item_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Formula_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Quantity,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Order_ID As Integer, ByVal Order_Detail_ID As Integer, ByVal Item_Detail_ID As Integer, ByVal Formula_ID As Integer, ByVal Quantity As Decimal, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Order_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Order_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Item_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Formula_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Quantity,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Order_ID As Integer,  _
                    ByVal Order_Detail_ID As Integer,  _
                    ByVal Item_Detail_ID As Integer,  _
                    ByVal Formula_ID As Integer,  _
                    ByVal Quantity As Decimal,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Order_ID As Integer,  _
                    ByVal Original_Order_Detail_ID As Integer,  _
                    ByVal Original_Item_Detail_ID As Integer,  _
                    ByVal Original_Formula_ID As Integer,  _
                    ByVal Original_Quantity As Decimal,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Order_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Order_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Formula_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Quantity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(RecordStatus_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Order_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Order_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Formula_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Quantity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Item_Detail_ID As Integer,  _
                    ByVal Formula_ID As Integer,  _
                    ByVal Quantity As Decimal,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Order_ID As Integer,  _
                    ByVal Original_Order_Detail_ID As Integer,  _
                    ByVal Original_Item_Detail_ID As Integer,  _
                    ByVal Original_Formula_ID As Integer,  _
                    ByVal Original_Quantity As Decimal,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Return Me.Update(Original_Co_ID, Original_Order_ID, Original_Order_Detail_ID, Item_Detail_ID, Formula_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Original_Co_ID, Original_Order_ID, Original_Order_Detail_ID, Original_Item_Detail_ID, Original_Formula_ID, Original_Quantity, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_RecordStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewOrderDetailIDByCoIDOrderID(ByVal CoID As Integer, ByVal OrderID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(CoID,Integer)
            command.Parameters(1).Value = CType(OrderID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class OrderBatchTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OrderBatch"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Order_ID", "Order_ID")
            tableMapping.ColumnMappings.Add("OrderBatch_ID", "OrderBatch_ID")
            tableMapping.ColumnMappings.Add("OrderBatch_No", "OrderBatch_No")
            tableMapping.ColumnMappings.Add("OrderBatch_Date", "OrderBatch_Date")
            tableMapping.ColumnMappings.Add("Remarks", "Remarks")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_OrderBatch] WHERE (([Co_ID] = @Original_Co_ID) AND ([Orde"& _ 
                "r_ID] = @Original_Order_ID) AND ([OrderBatch_ID] = @Original_OrderBatch_ID) AND "& _ 
                "([OrderBatch_No] = @Original_OrderBatch_No) AND ([OrderBatch_Date] = @Original_O"& _ 
                "rderBatch_Date) AND ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ([Remarks] ="& _ 
                " @Original_Remarks)) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_D"& _ 
                "ateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Uplo"& _ 
                "ad_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND (["& _ 
                "RecordStatus_ID] = @Original_RecordStatus_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_OrderBatch] ([Co_ID], [Order_ID], [OrderBatch_ID], [Order"& _ 
                "Batch_No], [OrderBatch_Date], [Remarks], [Stamp_UserID], [Stamp_DateTime], [Uplo"& _ 
                "ad_DateTime], [RecordStatus_ID]) VALUES (@Co_ID, @Order_ID, @OrderBatch_ID, @Ord"& _ 
                "erBatch_No, @OrderBatch_Date, @Remarks, @Stamp_UserID, @Stamp_DateTime, @Upload_"& _ 
                "DateTime, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Order_ID, OrderBatch_ID, OrderBatch_"& _ 
                "No, OrderBatch_Date, Remarks, Stamp_UserID, Stamp_DateTime, Upload_DateTime, Rec"& _ 
                "ordStatus_ID FROM Production_OrderBatch WHERE (Co_ID = @Co_ID) AND (OrderBatch_I"& _ 
                "D = @OrderBatch_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_OrderBatch] SET [Co_ID] = @Co_ID, [Order_ID] = @Order_ID, [Ord"& _ 
                "erBatch_ID] = @OrderBatch_ID, [OrderBatch_No] = @OrderBatch_No, [OrderBatch_Date"& _ 
                "] = @OrderBatch_Date, [Remarks] = @Remarks, [Stamp_UserID] = @Stamp_UserID, [Sta"& _ 
                "mp_DateTime] = @Stamp_DateTime, [Upload_DateTime] = @Upload_DateTime, [RecordSta"& _ 
                "tus_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Original_Co_ID) AND ([Order_ID] = "& _ 
                "@Original_Order_ID) AND ([OrderBatch_ID] = @Original_OrderBatch_ID) AND ([OrderB"& _ 
                "atch_No] = @Original_OrderBatch_No) AND ([OrderBatch_Date] = @Original_OrderBatc"& _ 
                "h_Date) AND ((@IsNull_Remarks = 1 AND [Remarks] IS NULL) OR ([Remarks] = @Origin"& _ 
                "al_Remarks)) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTime]"& _ 
                " = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateT"& _ 
                "ime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ([RecordSt"& _ 
                "atus_ID] = @Original_RecordStatus_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Order_ID, OrderBatch_ID, "& _ 
                "OrderBatch_No, OrderBatch_Date, Remarks, Stamp_UserID, Stamp_DateTime, Upload_Da"& _ 
                "teTime, RecordStatus_ID FROM Production_OrderBatch WHERE (Co_ID = @Co_ID) AND (O"& _ 
                "rderBatch_ID = @OrderBatch_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Order_ID, OrderBatch_ID, OrderBatch_No, OrderBatch_Date, Remark"& _ 
                "s, Stamp_UserID, Stamp_DateTime, Upload_DateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Record"& _ 
                "Status_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_OrderBatch"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Co_ID, Order_ID, OrderBatch_ID, OrderBatch_No, OrderBatch_Date, Remark"& _ 
                "s, Stamp_UserID, Stamp_DateTime, Upload_DateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Record"& _ 
                "Status_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_OrderBatch"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID AND OrderBatc"& _ 
                "h_No = @OrderBatchNo"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatchNo", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     Co_ID, Order_ID, OrderBatch_ID, OrderBatch_No, OrderBatch_Date, Remark"& _ 
                "s, Stamp_UserID, Stamp_DateTime, Upload_DateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Record"& _ 
                "Status_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_OrderBatch"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID AND Order_ID "& _ 
                "= @OrderID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT CONVERT(INT, ISNULL( MAX(OrderBatch_ID), 0) + 1) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_OrderBa"& _ 
                "tch"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID AND Order_ID = @OrderID"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.OrderBatchDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.OrderBatchDataTable = New QuickProductionDataSet.OrderBatchDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDOrderBatchNo(ByVal CoID As Integer, ByVal OrderBatchNo As String) As QuickProductionDataSet.OrderBatchDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            If (OrderBatchNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OrderBatchNo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(OrderBatchNo,String)
            End If
            Dim dataTable As QuickProductionDataSet.OrderBatchDataTable = New QuickProductionDataSet.OrderBatchDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDOrderID(ByVal CoID As Integer, ByVal OrderID As Integer) As QuickProductionDataSet.OrderBatchDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(OrderID,Integer)
            Dim dataTable As QuickProductionDataSet.OrderBatchDataTable = New QuickProductionDataSet.OrderBatchDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.OrderBatchDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "OrderBatch")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Order_ID As Integer, ByVal Original_OrderBatch_ID As Integer, ByVal Original_OrderBatch_No As String, ByVal Original_OrderBatch_Date As Date, ByVal Original_Remarks As String, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Order_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_OrderBatch_ID,Integer)
            If (Original_OrderBatch_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OrderBatch_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_OrderBatch_No,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_OrderBatch_Date,Date)
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Order_ID As Integer, ByVal OrderBatch_ID As Integer, ByVal OrderBatch_No As String, ByVal OrderBatch_Date As Date, ByVal Remarks As String, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Order_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(OrderBatch_ID,Integer)
            If (OrderBatch_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OrderBatch_No")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(OrderBatch_No,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(OrderBatch_Date,Date)
            If (Remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Order_ID As Integer,  _
                    ByVal OrderBatch_ID As Integer,  _
                    ByVal OrderBatch_No As String,  _
                    ByVal OrderBatch_Date As Date,  _
                    ByVal Remarks As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Order_ID As Integer,  _
                    ByVal Original_OrderBatch_ID As Integer,  _
                    ByVal Original_OrderBatch_No As String,  _
                    ByVal Original_OrderBatch_Date As Date,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Order_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(OrderBatch_ID,Integer)
            If (OrderBatch_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("OrderBatch_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(OrderBatch_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OrderBatch_Date,Date)
            If (Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(RecordStatus_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Order_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_OrderBatch_ID,Integer)
            If (Original_OrderBatch_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_OrderBatch_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_OrderBatch_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_OrderBatch_Date,Date)
            If (Original_Remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Order_ID As Integer,  _
                    ByVal OrderBatch_No As String,  _
                    ByVal OrderBatch_Date As Date,  _
                    ByVal Remarks As String,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Order_ID As Integer,  _
                    ByVal Original_OrderBatch_ID As Integer,  _
                    ByVal Original_OrderBatch_No As String,  _
                    ByVal Original_OrderBatch_Date As Date,  _
                    ByVal Original_Remarks As String,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Return Me.Update(Original_Co_ID, Order_ID, Original_OrderBatch_ID, OrderBatch_No, OrderBatch_Date, Remarks, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Original_Co_ID, Original_Order_ID, Original_OrderBatch_ID, Original_OrderBatch_No, Original_OrderBatch_Date, Original_Remarks, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_RecordStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewOrderBatchID(ByVal CoID As Integer, ByVal OrderID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            command.Parameters(0).Value = CType(CoID,Integer)
            command.Parameters(1).Value = CType(OrderID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class OrderBatchDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "OrderBatchDetail"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("OrderBatch_ID", "OrderBatch_ID")
            tableMapping.ColumnMappings.Add("OrderBatch_Detail_ID", "OrderBatch_Detail_ID")
            tableMapping.ColumnMappings.Add("Item_Detail_ID", "Item_Detail_ID")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_OrderBatch_Detail] WHERE (([Co_ID] = @Original_Co_ID) AND"& _ 
                " ([OrderBatch_ID] = @Original_OrderBatch_ID) AND ([OrderBatch_Detail_ID] = @Orig"& _ 
                "inal_OrderBatch_Detail_ID) AND ([Item_Detail_ID] = @Original_Item_Detail_ID) AND"& _ 
                " ([Quantity] = @Original_Quantity) AND ([Stamp_UserID] = @Original_Stamp_UserID)"& _ 
                " AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime"& _ 
                " = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_Dat"& _ 
                "eTime)) AND ([RecordStatus_ID] = @Original_RecordStatus_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_OrderBatch_Detail] ([Co_ID], [OrderBatch_ID], [OrderBatch"& _ 
                "_Detail_ID], [Item_Detail_ID], [Quantity], [Stamp_UserID], [Stamp_DateTime], [Up"& _ 
                "load_DateTime], [RecordStatus_ID]) VALUES (@Co_ID, @OrderBatch_ID, @OrderBatch_D"& _ 
                "etail_ID, @Item_Detail_ID, @Quantity, @Stamp_UserID, @Stamp_DateTime, @Upload_Da"& _ 
                "teTime, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, OrderBatch_ID, OrderBatch_Detail_ID, I"& _ 
                "tem_Detail_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordSt"& _ 
                "atus_ID FROM Production_OrderBatch_Detail WHERE (Co_ID = @Co_ID) AND (OrderBatch"& _ 
                "_Detail_ID = @OrderBatch_Detail_ID) AND (OrderBatch_ID = @OrderBatch_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_OrderBatch_Detail] SET [Co_ID] = @Co_ID, [OrderBatch_ID] = @Or"& _ 
                "derBatch_ID, [OrderBatch_Detail_ID] = @OrderBatch_Detail_ID, [Item_Detail_ID] = "& _ 
                "@Item_Detail_ID, [Quantity] = @Quantity, [Stamp_UserID] = @Stamp_UserID, [Stamp_"& _ 
                "DateTime] = @Stamp_DateTime, [Upload_DateTime] = @Upload_DateTime, [RecordStatus"& _ 
                "_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Original_Co_ID) AND ([OrderBatch_ID] "& _ 
                "= @Original_OrderBatch_ID) AND ([OrderBatch_Detail_ID] = @Original_OrderBatch_De"& _ 
                "tail_ID) AND ([Item_Detail_ID] = @Original_Item_Detail_ID) AND ([Quantity] = @Or"& _ 
                "iginal_Quantity) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateT"& _ 
                "ime] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_D"& _ 
                "ateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ([Reco"& _ 
                "rdStatus_ID] = @Original_RecordStatus_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, OrderBatch_ID, OrderB"& _ 
                "atch_Detail_ID, Item_Detail_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_D"& _ 
                "ateTime, RecordStatus_ID FROM Production_OrderBatch_Detail WHERE (Co_ID = @Co_ID"& _ 
                ") AND (OrderBatch_Detail_ID = @OrderBatch_Detail_ID) AND (OrderBatch_ID = @Order"& _ 
                "Batch_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, OrderBatch_ID, OrderBatch_Detail_ID, Item_Detail_ID, Quantity, "& _ 
                "Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Pro"& _ 
                "duction_OrderBatch_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Co_ID, OrderBatch_ID, OrderBatch_Detail_ID, Item_Detail_ID, Quantity, "& _ 
                "Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Pro"& _ 
                "duction_OrderBatch_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where Co_ID = @CoID AND OrderBatch_ID = @OrderBatchID"& _ 
                ""
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatchID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CONVERT(INT, ISNULL( MAX(OrderBatch_Detail_ID), 0) + 1) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_"& _ 
                "OrderBatch_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID AND OrderBatch_ID = @OrderBatchID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatchID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.OrderBatchDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.OrderBatchDetailDataTable = New QuickProductionDataSet.OrderBatchDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDOrderBatchID(ByVal CoID As Integer, ByVal OrderBatchID As Integer) As QuickProductionDataSet.OrderBatchDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(OrderBatchID,Integer)
            Dim dataTable As QuickProductionDataSet.OrderBatchDetailDataTable = New QuickProductionDataSet.OrderBatchDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.OrderBatchDetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "OrderBatchDetail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_OrderBatch_ID As Integer, ByVal Original_OrderBatch_Detail_ID As Integer, ByVal Original_Item_Detail_ID As Integer, ByVal Original_Quantity As Decimal, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_OrderBatch_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_OrderBatch_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Item_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Quantity,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal OrderBatch_ID As Integer, ByVal OrderBatch_Detail_ID As Integer, ByVal Item_Detail_ID As Integer, ByVal Quantity As Decimal, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(OrderBatch_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(OrderBatch_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Item_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Quantity,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal OrderBatch_ID As Integer,  _
                    ByVal OrderBatch_Detail_ID As Integer,  _
                    ByVal Item_Detail_ID As Integer,  _
                    ByVal Quantity As Decimal,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_OrderBatch_ID As Integer,  _
                    ByVal Original_OrderBatch_Detail_ID As Integer,  _
                    ByVal Original_Item_Detail_ID As Integer,  _
                    ByVal Original_Quantity As Decimal,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OrderBatch_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(OrderBatch_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Quantity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(RecordStatus_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_OrderBatch_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_OrderBatch_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Quantity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Item_Detail_ID As Integer, ByVal Quantity As Decimal, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer, ByVal Original_Co_ID As Short, ByVal Original_OrderBatch_ID As Integer, ByVal Original_OrderBatch_Detail_ID As Integer, ByVal Original_Item_Detail_ID As Integer, ByVal Original_Quantity As Decimal, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Integer) As Integer
            Return Me.Update(Original_Co_ID, Original_OrderBatch_ID, Original_OrderBatch_Detail_ID, Item_Detail_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Original_Co_ID, Original_OrderBatch_ID, Original_OrderBatch_Detail_ID, Original_Item_Detail_ID, Original_Quantity, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_RecordStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewOrderBatchDetailIDByCoIDOrderBatchID(ByVal CoID As Integer, ByVal OrderBatchID As Integer) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(CoID,Integer)
            command.Parameters(1).Value = CType(OrderBatchID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProcessProductionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ProcessProduction"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Production_ID", "Production_ID")
            tableMapping.ColumnMappings.Add("Production_No", "Production_No")
            tableMapping.ColumnMappings.Add("Production_Date", "Production_Date")
            tableMapping.ColumnMappings.Add("Order_ID", "Order_ID")
            tableMapping.ColumnMappings.Add("OrderBatch_ID", "OrderBatch_ID")
            tableMapping.ColumnMappings.Add("Source_Document_ID", "Source_Document_ID")
            tableMapping.ColumnMappings.Add("Source_DocumentType_ID", "Source_DocumentType_ID")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            tableMapping.ColumnMappings.Add("Vender_Party_ID", "Vender_Party_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_ProcessProduction] WHERE (([Co_ID] = @Original_Co_ID) AND"& _ 
                " ([Production_ID] = @Original_Production_ID) AND ([Production_No] = @Original_Pr"& _ 
                "oduction_No) AND ([Production_Date] = @Original_Production_Date) AND ((@IsNull_O"& _ 
                "rder_ID = 1 AND [Order_ID] IS NULL) OR ([Order_ID] = @Original_Order_ID)) AND (("& _ 
                "@IsNull_OrderBatch_ID = 1 AND [OrderBatch_ID] IS NULL) OR ([OrderBatch_ID] = @Or"& _ 
                "iginal_OrderBatch_ID)) AND ((@IsNull_Source_Document_ID = 1 AND [Source_Document"& _ 
                "_ID] IS NULL) OR ([Source_Document_ID] = @Original_Source_Document_ID)) AND ((@I"& _ 
                "sNull_Source_DocumentType_ID = 1 AND [Source_DocumentType_ID] IS NULL) OR ([Sour"& _ 
                "ce_DocumentType_ID] = @Original_Source_DocumentType_ID)) AND ([Stamp_UserID] = @"& _ 
                "Original_Stamp_UserID) AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@"& _ 
                "IsNull_Upload_DateTime = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] "& _ 
                "= @Original_Upload_DateTime)) AND ([RecordStatus_ID] = @Original_RecordStatus_ID"& _ 
                ") AND ((@IsNull_Vender_Party_ID = 1 AND [Vender_Party_ID] IS NULL) OR ([Vender_P"& _ 
                "arty_ID] = @Original_Vender_Party_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Source_Document_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Document_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Source_Document_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Document_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Source_DocumentType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Source_DocumentType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Vender_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vender_Party_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Vender_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vender_Party_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_ProcessProduction] ([Co_ID], [Production_ID], [Production"& _ 
                "_No], [Production_Date], [Order_ID], [OrderBatch_ID], [Source_Document_ID], [Sou"& _ 
                "rce_DocumentType_ID], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime], [Reco"& _ 
                "rdStatus_ID], [Vender_Party_ID]) VALUES (@Co_ID, @Production_ID, @Production_No,"& _ 
                " @Production_Date, @Order_ID, @OrderBatch_ID, @Source_Document_ID, @Source_Docum"& _ 
                "entType_ID, @Stamp_UserID, @Stamp_DateTime, @Upload_DateTime, @RecordStatus_ID, "& _ 
                "@Vender_Party_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Production_ID, Production_No, Production_Date,"& _ 
                " Order_ID, OrderBatch_ID, Source_Document_ID, Source_DocumentType_ID, Stamp_User"& _ 
                "ID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Vender_Party_ID FROM Produ"& _ 
                "ction_ProcessProduction WHERE (Co_ID = @Co_ID) AND (Production_ID = @Production_"& _ 
                "ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_Document_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Document_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_DocumentType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Vender_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vender_Party_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_ProcessProduction] SET [Co_ID] = @Co_ID, [Production_ID] = @Pr"& _ 
                "oduction_ID, [Production_No] = @Production_No, [Production_Date] = @Production_D"& _ 
                "ate, [Order_ID] = @Order_ID, [OrderBatch_ID] = @OrderBatch_ID, [Source_Document_"& _ 
                "ID] = @Source_Document_ID, [Source_DocumentType_ID] = @Source_DocumentType_ID, ["& _ 
                "Stamp_UserID] = @Stamp_UserID, [Stamp_DateTime] = @Stamp_DateTime, [Upload_DateT"& _ 
                "ime] = @Upload_DateTime, [RecordStatus_ID] = @RecordStatus_ID, [Vender_Party_ID]"& _ 
                " = @Vender_Party_ID WHERE (([Co_ID] = @Original_Co_ID) AND ([Production_ID] = @O"& _ 
                "riginal_Production_ID) AND ([Production_No] = @Original_Production_No) AND ([Pro"& _ 
                "duction_Date] = @Original_Production_Date) AND ((@IsNull_Order_ID = 1 AND [Order"& _ 
                "_ID] IS NULL) OR ([Order_ID] = @Original_Order_ID)) AND ((@IsNull_OrderBatch_ID "& _ 
                "= 1 AND [OrderBatch_ID] IS NULL) OR ([OrderBatch_ID] = @Original_OrderBatch_ID))"& _ 
                " AND ((@IsNull_Source_Document_ID = 1 AND [Source_Document_ID] IS NULL) OR ([Sou"& _ 
                "rce_Document_ID] = @Original_Source_Document_ID)) AND ((@IsNull_Source_DocumentT"& _ 
                "ype_ID = 1 AND [Source_DocumentType_ID] IS NULL) OR ([Source_DocumentType_ID] = "& _ 
                "@Original_Source_DocumentType_ID)) AND ([Stamp_UserID] = @Original_Stamp_UserID)"& _ 
                " AND ([Stamp_DateTime] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime"& _ 
                " = 1 AND [Upload_DateTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_Dat"& _ 
                "eTime)) AND ([RecordStatus_ID] = @Original_RecordStatus_ID) AND ((@IsNull_Vender"& _ 
                "_Party_ID = 1 AND [Vender_Party_ID] IS NULL) OR ([Vender_Party_ID] = @Original_V"& _ 
                "ender_Party_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Production_ID, Production_No, Production_Date,"& _ 
                " Order_ID, OrderBatch_ID, Source_Document_ID, Source_DocumentType_ID, Stamp_User"& _ 
                "ID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Vender_Party_ID FROM Produ"& _ 
                "ction_ProcessProduction WHERE (Co_ID = @Co_ID) AND (Production_ID = @Production_"& _ 
                "ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_Document_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Document_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Source_DocumentType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Vender_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vender_Party_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_No", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_No", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Date", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Order_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Order_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OrderBatch_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OrderBatch_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Source_Document_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Document_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Source_Document_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Document_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Source_DocumentType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Source_DocumentType_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Vender_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vender_Party_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Vender_Party_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vender_Party_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Production_ID, Production_No, Production_Date, Order_ID, OrderB"& _ 
                "atch_ID, Source_Document_ID, Source_DocumentType_ID, Stamp_UserID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Vender_Party_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM         Production_ProcessProduction"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Co_ID, Production_ID, Production_No, Production_Date, Order_ID, OrderB"& _ 
                "atch_ID, Source_Document_ID, Source_DocumentType_ID, Stamp_UserID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Vender_Party_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM         Production_ProcessProduction"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY Productio"& _ 
                "n_ID DESC"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT Co_ID, OrderBatch_ID, Order_ID, Production_Date, Production_ID, Production"& _ 
                "_No, RecordStatus_ID, Source_DocumentType_ID, Source_Document_ID, Stamp_DateTime"& _ 
                ", Stamp_UserID, Upload_DateTime, Vender_Party_ID FROM Production_ProcessProducti"& _ 
                "on WHERE (Co_ID = @CoID) AND (Source_DocumentType_ID = @SourceDocumentTypeID) AN"& _ 
                "D (Source_Document_ID = @SourceDocumentID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SourceDocumentTypeID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_DocumentType_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SourceDocumentID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Source_Document_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     Co_ID, Production_ID, Production_No, Production_Date, Order_ID, OrderB"& _ 
                "atch_ID, Source_Document_ID, Source_DocumentType_ID, Stamp_UserID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"           "& _ 
                "           Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Vender_Party_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FR"& _ 
                "OM         Production_ProcessProduction"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID AND Production_ID ="& _ 
                " @ProductionID"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductionID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT CONVERT(INT, ISNULL( MAX(Production_ID), 0) + 1) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_Process"& _ 
                "Production"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT CONVERT(VARCHAR, ISNULL( MAX(Production_No), '0') ) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_Proc"& _ 
                "essProduction"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.ProcessProductionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.ProcessProductionDataTable = New QuickProductionDataSet.ProcessProductionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoID(ByVal CoID As Integer) As QuickProductionDataSet.ProcessProductionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Dim dataTable As QuickProductionDataSet.ProcessProductionDataTable = New QuickProductionDataSet.ProcessProductionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDDocumentTypeIDDocumentID(ByVal CoID As Integer, ByVal SourceDocumentTypeID As Global.System.Nullable(Of Integer), ByVal SourceDocumentID As Global.System.Nullable(Of Integer)) As QuickProductionDataSet.ProcessProductionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            If (SourceDocumentTypeID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SourceDocumentTypeID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (SourceDocumentID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(SourceDocumentID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As QuickProductionDataSet.ProcessProductionDataTable = New QuickProductionDataSet.ProcessProductionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDProductionID(ByVal CoID As Integer, ByVal ProductionID As Integer) As QuickProductionDataSet.ProcessProductionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ProductionID,Integer)
            Dim dataTable As QuickProductionDataSet.ProcessProductionDataTable = New QuickProductionDataSet.ProcessProductionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.ProcessProductionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ProcessProduction")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Production_ID As Integer, ByVal Original_Production_No As String, ByVal Original_Production_Date As Date, ByVal Original_Order_ID As Global.System.Nullable(Of Integer), ByVal Original_OrderBatch_ID As Global.System.Nullable(Of Integer), ByVal Original_Source_Document_ID As Global.System.Nullable(Of Integer), ByVal Original_Source_DocumentType_ID As Global.System.Nullable(Of Integer), ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Integer, ByVal Original_Vender_Party_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Production_ID,Integer)
            If (Original_Production_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Production_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Production_No,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Production_Date,Date)
            If (Original_Order_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Order_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_OrderBatch_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_OrderBatch_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_Source_Document_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Source_Document_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_Source_DocumentType_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Source_DocumentType_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_RecordStatus_ID,Integer)
            If (Original_Vender_Party_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Vender_Party_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Production_ID As Integer, ByVal Production_No As String, ByVal Production_Date As Date, ByVal Order_ID As Global.System.Nullable(Of Integer), ByVal OrderBatch_ID As Global.System.Nullable(Of Integer), ByVal Source_Document_ID As Global.System.Nullable(Of Integer), ByVal Source_DocumentType_ID As Global.System.Nullable(Of Integer), ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer, ByVal Vender_Party_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Production_ID,Integer)
            If (Production_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Production_No")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Production_No,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Production_Date,Date)
            If (Order_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Order_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (OrderBatch_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(OrderBatch_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Source_Document_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Source_Document_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Source_DocumentType_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Source_DocumentType_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(RecordStatus_ID,Integer)
            If (Vender_Party_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Vender_Party_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Production_ID As Integer,  _
                    ByVal Production_No As String,  _
                    ByVal Production_Date As Date,  _
                    ByVal Order_ID As Global.System.Nullable(Of Integer),  _
                    ByVal OrderBatch_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Source_Document_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Source_DocumentType_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Vender_Party_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Production_ID As Integer,  _
                    ByVal Original_Production_No As String,  _
                    ByVal Original_Production_Date As Date,  _
                    ByVal Original_Order_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OrderBatch_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Source_Document_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Source_DocumentType_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer,  _
                    ByVal Original_Vender_Party_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Production_ID,Integer)
            If (Production_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Production_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Production_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Production_Date,Date)
            If (Order_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Order_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (OrderBatch_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(OrderBatch_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Source_Document_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Source_Document_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Source_DocumentType_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Source_DocumentType_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(RecordStatus_ID,Integer)
            If (Vender_Party_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Vender_Party_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Production_ID,Integer)
            If (Original_Production_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Production_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Production_No,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Production_Date,Date)
            If (Original_Order_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Order_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_OrderBatch_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_OrderBatch_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_Source_Document_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Source_Document_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_Source_DocumentType_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Source_DocumentType_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_RecordStatus_ID,Integer)
            If (Original_Vender_Party_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Vender_Party_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Production_No As String,  _
                    ByVal Production_Date As Date,  _
                    ByVal Order_ID As Global.System.Nullable(Of Integer),  _
                    ByVal OrderBatch_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Source_Document_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Source_DocumentType_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Vender_Party_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Production_ID As Integer,  _
                    ByVal Original_Production_No As String,  _
                    ByVal Original_Production_Date As Date,  _
                    ByVal Original_Order_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OrderBatch_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Source_Document_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Source_DocumentType_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer,  _
                    ByVal Original_Vender_Party_ID As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_Co_ID, Original_Production_ID, Production_No, Production_Date, Order_ID, OrderBatch_ID, Source_Document_ID, Source_DocumentType_ID, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Vender_Party_ID, Original_Co_ID, Original_Production_ID, Original_Production_No, Original_Production_Date, Original_Order_ID, Original_OrderBatch_ID, Original_Source_Document_ID, Original_Source_DocumentType_ID, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_RecordStatus_ID, Original_Vender_Party_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewProductionIDByCoID(ByVal CoID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            command.Parameters(0).Value = CType(CoID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewProductionNoByCoID(ByVal CoID As Integer) As String
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(5)
            command.Parameters(0).Value = CType(CoID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,String)
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProcessProductionDetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ProcessProductionDetail"
            tableMapping.ColumnMappings.Add("Co_ID", "Co_ID")
            tableMapping.ColumnMappings.Add("Production_ID", "Production_ID")
            tableMapping.ColumnMappings.Add("Production_Detail_ID", "Production_Detail_ID")
            tableMapping.ColumnMappings.Add("Consumption_Process_ID", "Consumption_Process_ID")
            tableMapping.ColumnMappings.Add("Production_Process_ID", "Production_Process_ID")
            tableMapping.ColumnMappings.Add("Item_Detail_ID", "Item_Detail_ID")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Stamp_UserID", "Stamp_UserID")
            tableMapping.ColumnMappings.Add("Stamp_DateTime", "Stamp_DateTime")
            tableMapping.ColumnMappings.Add("Upload_DateTime", "Upload_DateTime")
            tableMapping.ColumnMappings.Add("RecordStatus_ID", "RecordStatus_ID")
            tableMapping.ColumnMappings.Add("ItemSize_ID", "ItemSize_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Production_ProcessProduction_Detail] WHERE (([Co_ID] = @Original_Co_"& _ 
                "ID) AND ([Production_ID] = @Original_Production_ID) AND ([Production_Detail_ID] "& _ 
                "= @Original_Production_Detail_ID) AND ((@IsNull_Consumption_Process_ID = 1 AND ["& _ 
                "Consumption_Process_ID] IS NULL) OR ([Consumption_Process_ID] = @Original_Consum"& _ 
                "ption_Process_ID)) AND ([Production_Process_ID] = @Original_Production_Process_I"& _ 
                "D) AND ([Item_Detail_ID] = @Original_Item_Detail_ID) AND ([Quantity] = @Original"& _ 
                "_Quantity) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTime] ="& _ 
                " @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_DateTim"& _ 
                "e] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ([RecordStat"& _ 
                "us_ID] = @Original_RecordStatus_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Consumption_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Consumption_Process_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Consumption_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Consumption_Process_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Process_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Production_ProcessProduction_Detail] ([Co_ID], [Production_ID], [Pro"& _ 
                "duction_Detail_ID], [Consumption_Process_ID], [Production_Process_ID], [Item_Det"& _ 
                "ail_ID], [Quantity], [Stamp_UserID], [Stamp_DateTime], [Upload_DateTime], [Recor"& _ 
                "dStatus_ID]) VALUES (@Co_ID, @Production_ID, @Production_Detail_ID, @Consumption"& _ 
                "_Process_ID, @Production_Process_ID, @Item_Detail_ID, @Quantity, @Stamp_UserID, "& _ 
                "@Stamp_DateTime, @Upload_DateTime, @RecordStatus_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Production_"& _ 
                "ID, Production_Detail_ID, Consumption_Process_ID, Production_Process_ID, Item_De"& _ 
                "tail_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_I"& _ 
                "D, 0 AS ItemSize_ID FROM Production_ProcessProduction_Detail WHERE (Co_ID = @Co_"& _ 
                "ID) AND (Production_Detail_ID = @Production_Detail_ID) AND (Production_ID = @Pro"& _ 
                "duction_ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Consumption_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Consumption_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Production_ProcessProduction_Detail] SET [Co_ID] = @Co_ID, [Production_ID"& _ 
                "] = @Production_ID, [Production_Detail_ID] = @Production_Detail_ID, [Consumption"& _ 
                "_Process_ID] = @Consumption_Process_ID, [Production_Process_ID] = @Production_Pr"& _ 
                "ocess_ID, [Item_Detail_ID] = @Item_Detail_ID, [Quantity] = @Quantity, [Stamp_Use"& _ 
                "rID] = @Stamp_UserID, [Stamp_DateTime] = @Stamp_DateTime, [Upload_DateTime] = @U"& _ 
                "pload_DateTime, [RecordStatus_ID] = @RecordStatus_ID WHERE (([Co_ID] = @Original"& _ 
                "_Co_ID) AND ([Production_ID] = @Original_Production_ID) AND ([Production_Detail_"& _ 
                "ID] = @Original_Production_Detail_ID) AND ((@IsNull_Consumption_Process_ID = 1 A"& _ 
                "ND [Consumption_Process_ID] IS NULL) OR ([Consumption_Process_ID] = @Original_Co"& _ 
                "nsumption_Process_ID)) AND ([Production_Process_ID] = @Original_Production_Proce"& _ 
                "ss_ID) AND ([Item_Detail_ID] = @Original_Item_Detail_ID) AND ([Quantity] = @Orig"& _ 
                "inal_Quantity) AND ([Stamp_UserID] = @Original_Stamp_UserID) AND ([Stamp_DateTim"& _ 
                "e] = @Original_Stamp_DateTime) AND ((@IsNull_Upload_DateTime = 1 AND [Upload_Dat"& _ 
                "eTime] IS NULL) OR ([Upload_DateTime] = @Original_Upload_DateTime)) AND ([Record"& _ 
                "Status_ID] = @Original_RecordStatus_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Co_ID, Production_ID, Producti"& _ 
                "on_Detail_ID, Consumption_Process_ID, Production_Process_ID, Item_Detail_ID, Qua"& _ 
                "ntity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, 0 AS Item"& _ 
                "Size_ID FROM Production_ProcessProduction_Detail WHERE (Co_ID = @Co_ID) AND (Pro"& _ 
                "duction_Detail_ID = @Production_Detail_ID) AND (Production_ID = @Production_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Consumption_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Consumption_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Production_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Process_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Co_ID", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Consumption_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Consumption_Process_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Consumption_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Consumption_Process_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Production_Process_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_Process_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Item_Detail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item_Detail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_UserID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Stamp_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Stamp_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Upload_DateTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Upload_DateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Upload_DateTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordStatus_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordStatus_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Co_ID, Production_ID, Production_Detail_ID, Consumption_Process_ID, Pr"& _ 
                "oduction_Process_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&", Item_Detail_ID, Quantity, Stamp_UserID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&", Stamp_DateTim"& _ 
                "e, Upload_DateTime, RecordStatus_ID, 0 AS ItemSize_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_P"& _ 
                "rocessProduction_Detail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Production_ProcessProduction_Detail.Co_ID, Production_ProcessProductio"& _ 
                "n_Detail.Production_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_ProcessProduction_Det"& _ 
                "ail.Production_Detail_ID, Production_ProcessProduction_Detail.Consumption_Proces"& _ 
                "s_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_ProcessProduction_Detail.Production_Pro"& _ 
                "cess_ID, Production_ProcessProduction_Detail.Item_Detail_ID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     Production_ProcessProduction_Detail.Quantity, Production_ProcessProduction_"& _ 
                "Detail.Stamp_UserID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_ProcessProduction_Detail"& _ 
                ".Stamp_DateTime, Production_ProcessProduction_Detail.Upload_DateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              Production_ProcessProduction_Detail.RecordStatus_ID, Inv_Item_Deta"& _ 
                "il.ItemSize_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Production_ProcessProduction_Detail INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   Inv_Item_Detail ON Production_ProcessProduction_Detail.Co_ID "& _ 
                "= Inv_Item_Detail.Co_ID AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Production_ProcessProduction"& _ 
                "_Detail.Item_Detail_ID = Inv_Item_Detail.Item_Detail_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Production_P"& _ 
                "rocessProduction_Detail.Co_ID = @CoID) AND (Production_ProcessProduction_Detail."& _ 
                "Production_ID = @ProductionID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductionID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT CONVERT(INT, ISNULL( MAX(Production_Detail_ID), 0) + 1)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM Production_P"& _ 
                "rocessProduction_Detail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE Co_ID = @CoID AND Production_ID = @ProductionID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 0, 0, "Co_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductionID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Production_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetAll() As QuickProductionDataSet.ProcessProductionDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As QuickProductionDataSet.ProcessProductionDetailDataTable = New QuickProductionDataSet.ProcessProductionDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetByCoIDProductionID(ByVal CoID As Integer, ByVal ProductionID As Integer) As QuickProductionDataSet.ProcessProductionDetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CoID,Integer)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ProductionID,Integer)
            Dim dataTable As QuickProductionDataSet.ProcessProductionDetailDataTable = New QuickProductionDataSet.ProcessProductionDetailDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As QuickProductionDataSet.ProcessProductionDetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As QuickProductionDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ProcessProductionDetail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Co_ID As Short, ByVal Original_Production_ID As Integer, ByVal Original_Production_Detail_ID As Integer, ByVal Original_Consumption_Process_ID As Global.System.Nullable(Of Integer), ByVal Original_Production_Process_ID As Integer, ByVal Original_Item_Detail_ID As Integer, ByVal Original_Quantity As Decimal, ByVal Original_Stamp_UserID As Integer, ByVal Original_Stamp_DateTime As Date, ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date), ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Co_ID,Short)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Production_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Production_Detail_ID,Integer)
            If (Original_Consumption_Process_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Consumption_Process_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Production_Process_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Item_Detail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Quantity,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Co_ID As Short, ByVal Production_ID As Integer, ByVal Production_Detail_ID As Integer, ByVal Consumption_Process_ID As Global.System.Nullable(Of Integer), ByVal Production_Process_ID As Integer, ByVal Item_Detail_ID As Integer, ByVal Quantity As Decimal, ByVal Stamp_UserID As Integer, ByVal Stamp_DateTime As Date, ByVal Upload_DateTime As Global.System.Nullable(Of Date), ByVal RecordStatus_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Production_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Production_Detail_ID,Integer)
            If (Consumption_Process_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Consumption_Process_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Production_Process_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Item_Detail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(Quantity,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Co_ID As Short,  _
                    ByVal Production_ID As Integer,  _
                    ByVal Production_Detail_ID As Integer,  _
                    ByVal Consumption_Process_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Production_Process_ID As Integer,  _
                    ByVal Item_Detail_ID As Integer,  _
                    ByVal Quantity As Decimal,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Production_ID As Integer,  _
                    ByVal Original_Production_Detail_ID As Integer,  _
                    ByVal Original_Consumption_Process_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Production_Process_ID As Integer,  _
                    ByVal Original_Item_Detail_ID As Integer,  _
                    ByVal Original_Quantity As Decimal,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Production_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Production_Detail_ID,Integer)
            If (Consumption_Process_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Consumption_Process_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Production_Process_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Quantity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Stamp_DateTime,Date)
            If (Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(RecordStatus_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Co_ID,Short)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Production_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Production_Detail_ID,Integer)
            If (Original_Consumption_Process_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Consumption_Process_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Production_Process_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Item_Detail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Quantity,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Stamp_UserID,Integer)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Stamp_DateTime,Date)
            If (Original_Upload_DateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Upload_DateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_RecordStatus_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Consumption_Process_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Production_Process_ID As Integer,  _
                    ByVal Item_Detail_ID As Integer,  _
                    ByVal Quantity As Decimal,  _
                    ByVal Stamp_UserID As Integer,  _
                    ByVal Stamp_DateTime As Date,  _
                    ByVal Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal RecordStatus_ID As Integer,  _
                    ByVal Original_Co_ID As Short,  _
                    ByVal Original_Production_ID As Integer,  _
                    ByVal Original_Production_Detail_ID As Integer,  _
                    ByVal Original_Consumption_Process_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_Production_Process_ID As Integer,  _
                    ByVal Original_Item_Detail_ID As Integer,  _
                    ByVal Original_Quantity As Decimal,  _
                    ByVal Original_Stamp_UserID As Integer,  _
                    ByVal Original_Stamp_DateTime As Date,  _
                    ByVal Original_Upload_DateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RecordStatus_ID As Integer) As Integer
            Return Me.Update(Original_Co_ID, Original_Production_ID, Original_Production_Detail_ID, Consumption_Process_ID, Production_Process_ID, Item_Detail_ID, Quantity, Stamp_UserID, Stamp_DateTime, Upload_DateTime, RecordStatus_ID, Original_Co_ID, Original_Production_ID, Original_Production_Detail_ID, Original_Consumption_Process_ID, Original_Production_Process_ID, Original_Item_Detail_ID, Original_Quantity, Original_Stamp_UserID, Original_Stamp_DateTime, Original_Upload_DateTime, Original_RecordStatus_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetNewProductionDetailID(ByVal CoID As Integer, ByVal ProductionID As Integer) As Global.System.Nullable(Of Integer)
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            command.Parameters(0).Value = CType(CoID,Integer)
            command.Parameters(1).Value = CType(ProductionID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Integer)
            Else
                Return New Global.System.Nullable(Of Integer)(CType(returnValue,Integer))
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProcessBalanceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ProcessBalance"
            tableMapping.ColumnMappings.Add("Process_ID", "Process_ID")
            tableMapping.ColumnMappings.Add("Process_Code", "Process_Code")
            tableMapping.ColumnMappings.Add("Process_Desc", "Process_Desc")
            tableMapping.ColumnMappings.Add("Item_ID", "Item_ID")
            tableMapping.ColumnMappings.Add("ItemSize_ID", "ItemSize_ID")
            tableMapping.ColumnMappings.Add("ItemSize_Code", "ItemSize_Code")
            tableMapping.ColumnMappings.Add("Item_Detail_ID", "Item_Detail_ID")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Item_Code", "Item_Code")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.QuickDAL.My.MySettings.Default.Quick_ERPConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.spGetProcessBalanceSizeWiseByCoIDProcessIDItemCode"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CoID", Global.System.Data.SqlDbType.SmallInt, 2, Global.System.Data.ParameterDirection.Input, 5, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProcessID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ItemCode", Global.System.Data.SqlDbType.VarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetByCoIDProcessIDItemCode(ByVal CoID As Global.System.Nullable(Of Short), ByVal ProcessID As Global.System.Nullable(Of Integer), ByVal ItemCode As String) As QuickProductionDataSet.ProcessBalanceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CoID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CoID.Value,Short)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ProcessID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ProcessID.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ItemCode Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ItemCode,String)
            End If
            Dim dataTable As QuickProductionDataSet.ProcessBalanceDataTable = New QuickProductionDataSet.ProcessBalanceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
